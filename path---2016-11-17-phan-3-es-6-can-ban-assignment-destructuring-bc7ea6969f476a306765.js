webpackJsonp([52],{"./node_modules/json-loader/index.js!./.cache/json/2016-11-17-phan-3-es-6-can-ban-assignment-destructuring.json":function(n,s){n.exports={data:{markdownRemark:{html:'<!-- MarkdownTOC -->\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>- Truy cập các phần tử của `Objects`</code></pre>\n      </div>\n<ul>\n<li>\n<p>Truy cập các phần tử của <code>Arrays</code></p>\n<ul>\n<li>Truy cập các phần tử <code>Parameters</code> của <code>Function</code></li>\n<li>Ứng dụng</li>\n</ul>\n</li>\n</ul>\n<!-- /MarkdownTOC -->\n<h2>Truy cập các phần tử của <code>Objects</code></h2>\n<p>Tưởng tượng ta có nhân vật Bruce với mật danh Batman được định nghĩa như sau</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">var</span> character <span class="token operator">=</span> <span class="token punctuation">{</span>\n name<span class="token punctuation">:</span> <span class="token string">\'Bruce\'</span><span class="token punctuation">,</span>\n pseudonym<span class="token punctuation">:</span> <span class="token string">\'Batman\'</span><span class="token punctuation">,</span>\n metadata<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  age<span class="token punctuation">:</span> <span class="token number">34</span><span class="token punctuation">,</span>\n  gender<span class="token punctuation">:</span> <span class="token string">\'male\'</span>\n <span class="token punctuation">}</span><span class="token punctuation">,</span>\n batarang<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">\'gas pellet\'</span><span class="token punctuation">,</span><span class="token string">\'bat-mobile control\'</span><span class="token punctuation">,</span><span class="token string">\'bat-cuffs\'</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>Nếu bạn muốn biến <code>pseudonym</code> tham chiếu đến <code>character.pseudonym</code>, với ES5</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">var</span> pseudonym <span class="token operator">=</span> character<span class="token punctuation">.</span>pseudonym\n</code></pre>\n      </div>\n<p>Với ES6 ta có thể viết đoạn trên thành</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">var</span> <span class="token punctuation">{</span>pseudonym<span class="token punctuation">}</span> <span class="token operator">=</span> character\n</code></pre>\n      </div>\n<p>Cái này được gọi là <code>Destructuring object</code>, nếu muốn khai báo nhiều biến như thế này tham chiếu tới key của object <em>character</em>, thêm dấu <code>,</code> giữa mỗi biến</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">var</span> <span class="token punctuation">{</span>pseudonym<span class="token punctuation">,</span> name<span class="token punctuation">}</span> <span class="token operator">=</span> character\n</code></pre>\n      </div>\n<p>Nếu muốn tham chiếu đến key là <code>pseudonym</code> nhưng lại muốn đặt tên biến là <code>alias</code></p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">var</span> <span class="token punctuation">{</span> pseudonym<span class="token punctuation">:</span> alias <span class="token punctuation">}</span> <span class="token operator">=</span> character\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> alias <span class="token punctuation">)</span>\n<span class="token comment" spellcheck="true">// The same with: alias = character.pseudonym</span>\n</code></pre>\n      </div>\n<p>Nếu đặt giữa dấu <code>{}</code> là đang truy xuất tới key bên dưới <code>pseudonym</code> chứ ko phải đặt alias. Khi <code>gender</code> chưa được định nghĩa, mặc định sẽ trả về <code>undefined</code></p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">var</span> <span class="token punctuation">{</span> pseudonym<span class="token punctuation">:</span> <span class="token punctuation">{</span>gender<span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token operator">=</span> character\n</code></pre>\n      </div>\n<p>Nếu kết hợp sử dụng alias và giá trị mặc định, viết tên alias trước rồi tới giá trị mặc định</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">var</span> <span class="token punctuation">{</span> boots<span class="token punctuation">:</span> footwear <span class="token operator">=</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span> <span class="token operator">=</span> character\n</code></pre>\n      </div>\n<p>Sử dụng kết hợp với <code>Computed Property</code>, trong trường hợp này bắt buộc đặt alias</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">var</span> person <span class="token operator">=</span>  <span class="token punctuation">{</span> scientist<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>\n<span class="token keyword">var</span> type <span class="token operator">=</span> <span class="token string">\'scientist\'</span>\n<span class="token keyword">var</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">:</span> value <span class="token punctuation">}</span> <span class="token operator">=</span> person\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>\n</code></pre>\n      </div>\n<p>Câu này thì biết vậy thôi chứ ko cần dùng vì nó khó đọc hơn cách viết cũ <code>value = person[type]</code></p>\n<h1>Truy cập các phần tử của <code>Arrays</code></h1>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">var</span> coordinates <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">]</span>\n<span class="token keyword">var</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> coordinates\n</code></pre>\n      </div>\n<p>Tương tự như object, khác ở chổ thay vì rào hay tham biến bằng <code>{}</code>  thì rào nó vào <code>[]</code>, câu trên tương tự với <code>x = coordinates[0], y = coordinates[1]</code></p>\n<p>Để bỏ qua một giá trị trong mảng không muốn tham biến tới, bỏ trống</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">var</span> coordinates <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">]</span>\n<span class="token keyword">var</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span><span class="token punctuation">,</span>z<span class="token punctuation">]</span> <span class="token operator">=</span> coordinates\n</code></pre>\n      </div>\n<p>Tham biến giá trị mặc định lúc khởi tạo</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>var coordinates = [12,-7,20]\nvar [x,,z = 30] = coordinates\nconsole.log(z)\n// z=30</code></pre>\n      </div>\n<p>Trong ES5 để hoán đổi giá trị của 2 biến nào đó mình sẽ thêm một biến nữa để lưu tạm giá trị</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">var</span> left <span class="token operator">=</span> <span class="token number">5</span>\n<span class="token keyword">var</span> right <span class="token operator">=</span> <span class="token number">7</span>\n<span class="token keyword">var</span> tempt <span class="token operator">=</span> left\nleft <span class="token operator">=</span> right\nright <span class="token operator">=</span> tempt\n</code></pre>\n      </div>\n<p>Viết lại thế này với ES6</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">var</span> left <span class="token operator">=</span> <span class="token number">5</span>\n<span class="token keyword">var</span> right <span class="token operator">=</span> <span class="token number">7</span>\n<span class="token punctuation">[</span>left<span class="token punctuation">,</span> right<span class="token punctuation">]</span> <span class="token operator">=</span>  <span class="token punctuation">[</span>right<span class="token punctuation">,</span>left<span class="token punctuation">]</span>\n</code></pre>\n      </div>\n<h2>Truy cập các phần tử <code>Parameters</code> của <code>Function</code></h2>\n<p>Cái này thì cũ rồi mà giờ mới có nè, giá trị mặc định cho <code>parameter</code></p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">function</span> <span class="token function">powerOf</span><span class="token punctuation">(</span> base<span class="token punctuation">,</span> exponent <span class="token operator">=</span> <span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>base<span class="token punctuation">,</span> exponent<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>Sử dụng với <code>Arrow function</code>, trường hợp này luôn luôn kẹp vào <code>()</code> dù chỉ có một tham số</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">var</span> double <span class="token operator">=</span> <span class="token punctuation">(</span>input <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> input <span class="token operator">*</span> <span class="token number">2</span>\n<span class="token keyword">function</span> sumOf <span class="token punctuation">(</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n <span class="token keyword">return</span> a <span class="token operator">+</span> b <span class="token operator">+</span> c\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>Truyền vào tham số là một <code>object</code> chứa nhiều <code>key</code>, định giá trị mặc định cho <code>key</code> của <code>object</code></p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">function</span> <span class="token function">carFactory</span><span class="token punctuation">(</span> options <span class="token operator">=</span> <span class="token punctuation">{</span> brand<span class="token punctuation">:</span> <span class="token string">"Suzuki"</span><span class="token punctuation">,</span> year<span class="token punctuation">:</span> <span class="token number">1989</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>brand<span class="token punctuation">)</span>\n console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>year<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>Để ý là nếu truyền vào <code>object</code> chỉ một <code>key</code>, thì toàn bộ <code>key</code> mặc định cũng mất, ví dụ như <strong>options</strong> ở trên chỉ truyền vào <strong>year</strong> thì cái *<em>brand</em> mất</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token function">carFactory</span><span class="token punctuation">(</span><span class="token punctuation">{</span>year<span class="token punctuation">:</span> <span class="token number">2000</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n      </div>\n<p>Cách tốt nhất là nên truyền vào theo kiểu từng phần tử, không dùng <code>object</code> <strong>options</strong>, sửa lại hàm ở trên thành</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">function</span> <span class="token function">carFactory</span><span class="token punctuation">(</span><span class="token punctuation">{</span>brand <span class="token operator">=</span> <span class="token string">"Suzuki"</span><span class="token punctuation">,</span> year <span class="token operator">=</span> <span class="token number">1999</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n<span class="token punctuation">}</span>\n<span class="token function">carFactory</span><span class="token punctuation">(</span><span class="token punctuation">{</span>year<span class="token punctuation">:</span> <span class="token number">2000</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n      </div>\n<h2>Ứng dụng</h2>\n<p>Khi một hàm cần trả về <code>object</code> hoặc <code>array</code>. Ví dụ hàm bên dưới trả về tọa độ và <code>type</code>, nhưng chúng ta có thể lấy đúng giá trị của tọa độ x, y, không quan tâm z, type</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">function</span> <span class="token function">getCoordinates</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n <span class="token keyword">return</span> <span class="token punctuation">{</span>x<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span> z<span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> type<span class="token punctuation">:</span> <span class="token string">\'3d\'</span> <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> <span class="token punctuation">{</span>x<span class="token punctuation">,</span>y<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">getCoordinates</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre>\n      </div>\n<p>Ví dụ ta có hàm <code>random</code> để tạo một con số ngẫu nhiên nào đó trong phạm vi min và max được chỉ định, khi gọi hàm này cũng có thể thay đổi giá trị min, max tùy ý</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">function</span> <span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">{</span>min <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> max <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n <span class="token keyword">return</span> Match<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>max <span class="token operator">-</span> min<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> min\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">{</span>max<span class="token punctuation">:</span> <span class="token number">24</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>\n</code></pre>\n      </div>\n<p>Khi sử dụng cùng với <code>Regular expression</code>, ta có thể bỏ qua giá trí đầu tiên trả về vốn là giá trị truyền vào, ta chỉ cần lấy lấy kết quả year, month, day</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">function</span> <span class="token function">splitDate</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n <span class="token keyword">var</span> rdate <span class="token operator">=</span> <span class="token regex">/(\\d+).(\\d+).(\\d+)/</span>\n <span class="token keyword">return</span> rdate<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> <span class="token punctuation">[</span><span class="token punctuation">,</span>year<span class="token punctuation">,</span> month<span class="token punctuation">,</span> day<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">slitDate</span><span class="token punctuation">(</span><span class="token string">\'2016-11-16\'</span><span class="token punctuation">)</span>\n</code></pre>\n      </div>',frontmatter:{date:"November 17, 2016",path:"/2016-11-17-phan-3-es6-can-ban-assignment-destructuring",tags:["javascript"],title:"Hồi 3: ES6 căn bản - Truy cập phần tử",desc:"Hồi 3 trong series ES6 căn bản, nói về Assignment Destructuring"}}},pathContext:{prev:{excerpt:'Mục lục Spread Operator Rest parameter Khi có số lượng tham số truyền vào cho một function không cố định, trước đây ta dùng  , sau đó sử dụng   để chuyển nó thành một mảng Kết quả tương tự với cách làm mới đơn giản hơn, thêm dấu "..." phía trước tham...',html:'<p>Mục lục</p>\n<!-- MarkdownTOC -->\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>- Rest parameter</code></pre>\n      </div>\n<ul>\n<li>Spread Operator</li>\n</ul>\n<!-- /MarkdownTOC -->\n<h2>Rest parameter</h2>\n<p>Khi có số lượng tham số truyền vào cho một function không cố định, trước đây ta dùng <code>arguments object</code>, sau đó sử dụng <code>Array.prototype.slice.call</code> để chuyển nó thành một mảng</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">var</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n <span class="token keyword">var</span> list <span class="token operator">=</span> Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>slice<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span>\n console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token function">print</span><span class="token punctuation">(</span><span class="token string">\'a\'</span><span class="token punctuation">,</span><span class="token string">\'b\'</span><span class="token punctuation">,</span><span class="token string">\'c\'</span><span class="token punctuation">)</span>\n<span class="token comment" spellcheck="true">// -> [\'a\',\'b\',\'c\']</span>\n</code></pre>\n      </div>\n<p>Kết quả tương tự với cách làm mới đơn giản hơn, thêm dấu "..." phía trước tham số</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">var</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token operator">...</span>list<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token function">print</span><span class="token punctuation">(</span><span class="token string">\'a\'</span><span class="token punctuation">,</span><span class="token string">\'b\'</span><span class="token punctuation">,</span><span class="token string">\'c\'</span><span class="token punctuation">)</span>\n<span class="token comment" spellcheck="true">// -> [\'a\',\'b\',\'c\']</span>\n</code></pre>\n      </div>\n<p>Nếu muốn truyền vào 1 tham số bình thường</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">var</span> <span class="token function">print</span><span class="token punctuation">(</span>first<span class="token punctuation">,</span><span class="token operator">...</span>list<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span>\n console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token function">print</span><span class="token punctuation">(</span><span class="token string">\'a\'</span><span class="token punctuation">,</span><span class="token string">\'b\'</span><span class="token punctuation">,</span><span class="token string">\'c\'</span><span class="token punctuation">)</span>\n<span class="token comment" spellcheck="true">// -> \'a\'</span>\n<span class="token comment" spellcheck="true">// -> [\'b\',\'c\']</span>\n</code></pre>\n      </div>\n<p>Nếu sử dụng <code>Arrow function</code> thì buộc phải thêm dấu ngoặc kép <code>()</code>, dù chỉ có một tham số</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">var</span> sumAll <span class="token operator">=</span> <span class="token punctuation">(</span> <span class="token operator">...</span>numbers <span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> numbers<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>total<span class="token punctuation">,</span>next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> total <span class="token operator">+</span> next<span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token function">sumAll</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token comment" spellcheck="true">// = 8</span>\n</code></pre>\n      </div>\n<p>Nếu lúc trước ta phải viết</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">function</span> <span class="token function">sumAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">var</span> numbers <span class="token operator">=</span> Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>slice<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span>\n        <span class="token keyword">return</span> numbers<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">return</span> a <span class="token operator">+</span> b\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token comment" spellcheck="true">// =8</span>\n</code></pre>\n      </div>\n<h1>Spread Operator</h1>\n<p>Xem ví dụ bên dưới, Spread operator giúp trả về một mảng</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">function</span> <span class="token function">cast</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">...</span>arguments<span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n<span class="token function">cast</span><span class="token punctuation">(</span><span class="token string">\'a\'</span><span class="token punctuation">,</span><span class="token string">\'b\'</span><span class="token punctuation">,</span><span class="token string">\'c\'</span><span class="token punctuation">)</span>\n<span class="token comment" spellcheck="true">// [\'a\',\'b\',\'c\']</span>\n</code></pre>\n      </div>\n<p>Trong trường hợp phải combine nhiều mảng</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">var</span> all <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>all<span class="token punctuation">)</span>\n<span class="token comment" spellcheck="true">// [1,2,3,4,5,6,7]</span>\n</code></pre>\n      </div>\n<p>Một ví dụ khác để thấy lợi ích của <em>spread operator</em> khi kết hợp với new một <code>object</code> như <code>Date</code></p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span> <span class="token operator">...</span><span class="token punctuation">[</span><span class="token number">2015</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">]</span> <span class="token punctuation">)</span>\n<span class="token comment" spellcheck="true">// Thu Dec 31 2015</span>\n</code></pre>\n      </div>\n<p>Khi muốn lấy 1 hoặc 2 phần tử của mảng, cách vẫn thường làm là shift mấy phần tử này</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">var</span> list <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token string">\'a\'</span><span class="token punctuation">,</span><span class="token string">\'b\'</span><span class="token punctuation">,</span><span class="token string">\'c\'</span><span class="token punctuation">,</span><span class="token string">\'d\'</span> <span class="token punctuation">]</span>\n<span class="token keyword">var</span> first <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">var</span> second <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span>\n<span class="token comment" spellcheck="true">// a</span>\n</code></pre>\n      </div>\n<p>Cách viết mới</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">var</span> <span class="token punctuation">[</span>first<span class="token punctuation">,</span> second<span class="token punctuation">,</span> <span class="token operator">...</span>rest<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token string">\'a\'</span><span class="token punctuation">,</span><span class="token string">\'b\'</span><span class="token punctuation">,</span><span class="token string">\'c\'</span><span class="token punctuation">,</span><span class="token string">\'d\'</span><span class="token punctuation">,</span><span class="token string">\'e\'</span> <span class="token punctuation">]</span>\n<span class="token comment" spellcheck="true">// [\'c\',\'d\',\'e\']</span>\n</code></pre>\n      </div>',
id:"E:/anluu/luckyluu/posts/2016-11-18-phan-4-es6-can-ban-rest-parameters-va-spread-operator/index.md absPath of file >>> MarkdownRemark",timeToRead:2,frontmatter:{date:"2016-11-18T13:35:13.234Z",path:"/2016-11-18-phan-4-es6-can-ban-rest-parameters-va-spread-operator",tags:["javascript"],title:"Hồi 4: ES6 căn bản - Rest Parameters và Spread Operator"}},next:{excerpt:"Khai báo Lexical scoping là gì Một số dạng khai báo Nên và không nên Khai báo Trước đây để khai báo hàm trong javascript Hoặc, tạo một hàm ẩn (anonymous function), sau đó gán hàm này cho biến, key của object Bắt đầu từ ES6 ta có thêm một cách để viết...",html:'<!-- MarkdownTOC -->\n<ul>\n<li>Khai báo</li>\n<li>Lexical scoping là gì</li>\n<li>Một số dạng khai báo</li>\n<li>Nên và không nên</li>\n</ul>\n<!-- /MarkdownTOC -->\n<h1>Khai báo</h1>\n<p>Trước đây để khai báo hàm trong javascript</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">function</span> <span class="token function">name</span><span class="token punctuation">(</span>paramters<span class="token punctuation">)</span><span class="token punctuation">{</span>\n <span class="token comment" spellcheck="true">//body</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>Hoặc, tạo một hàm ẩn (anonymous function), sau đó gán hàm này cho biến, key của object</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">var</span> mystyle <span class="token operator">=</span><span class="token keyword">function</span> <span class="token punctuation">(</span>paramters<span class="token punctuation">)</span><span class="token punctuation">{</span>\n <span class="token comment" spellcheck="true">//body</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>Bắt đầu từ ES6 ta có thêm một cách để viết một hàm không có tên (hàm ẩn), có thể viết hàm trên bằng cách mới</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">var</span> mystyle <span class="token operator">=</span> <span class="token punctuation">(</span>paramters<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n <span class="token comment" spellcheck="true">//body</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>Bỏ từ khóa <code>function</code>, thêm vào <code>=></code>  sau <code>paramater</code>. Sự khác biệt của <em>arrow function</em> là nó <strong>không được phép đặt tên</strong> và là dạng <code>lexical scoping</code></p>\n<h1>Lexical scoping là gì</h1>\n<p>Từ khóa <code>this</code> và <code>argument</code> điều trỏ về đối tượng cha bự nhất. Ví dụ cho dễ hiểu cái nha. Chúng ta có đối tượng <code>timer</code> với biến đếm <code>second</code> và phương thức <code>start</code>. Khi chạy <code>timer</code> một vài giây, log giá trị <code>seconds</code> hiện tại</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">var</span> timer <span class="token operator">=</span> <span class="token punctuation">{</span>\n seconds<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n   <span class="token keyword">this</span><span class="token punctuation">.</span>seconds<span class="token operator">++</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>\n <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\ntimer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token function">setTimer</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>timer<span class="token punctuation">.</span>seconds<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">3500</span><span class="token punctuation">)</span>\n<span class="token comment" spellcheck="true">// result -3</span>\n</code></pre>\n      </div>\n<p>Nếu hàm truyền vào cho <code>setInterval</code> là một hàm bình thường nó sẽ không hiểu <code>this.second</code> là thằng nào, ta phải khai báo thêm <code>self = this</code> ở trên <em>timer</em>, từ khóa this không còn đi theo ngữ cảnh hiện tại mà nó sẽ tham chiếu lên trên.</p>\n<h1>Một số dạng khai báo</h1>\n<p>Nếu <em>arrow function</em> chỉ chứa một <em>parameter</em> duy nhất, bỏ luôn dấu `()<code></code> viết gì cho dễ đọc</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">var</span> double <span class="token operator">=</span> value <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n <span class="token keyword">return</span> value <span class="token operator">*</span> <span class="token number">2</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>Với hàm mà return 1 dòng như vậy có thể rút ngắn lại</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">var</span> double <span class="token operator">=</span> value <span class="token operator">=</span><span class="token operator">></span> value <span class="token operator">*</span> <span class="token number">2</span>\n</code></pre>\n      </div>\n<h1>Nên và không nên</h1>\n<p>ES6 không có nghĩa là cái nào cũng tốt hơn ES5, <em>arrow function</em> có trường hợp không nên sử dụng. Ví dụ nếu hàm lớn với vài chục dòng code, thay thế bằng <em>arrow function</em> là điều không nên làm, nên nhớ <em>arrow function</em> không được phép có tên, trong mọi trường hợp hàm có tên đi kèm luôn dễ maintain hơn.</p>\n<p>Arrow function tuyệt vời khi cần một hàm không tên thực hiện một vài thao tác đơn giản. Thí dụ kết hợp với những hàm như .map, .filter, .reduce</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>value <span class="token operator">=</span><span class="token operator">></span> value <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span> value <span class="token operator">=</span><span class="token operator">></span> value <span class="token operator">></span> <span class="token number">2</span> <span class="token punctuation">)</span>\n<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span> value <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> value <span class="token punctuation">)</span> <span class="token punctuation">)</span>\n</code></pre>\n      </div>',id:"E:/anluu/luckyluu/posts/2016-11-16-chuong-2-es6-can-ban-arrow-function/index.md absPath of file >>> MarkdownRemark",timeToRead:2,frontmatter:{date:"2016-11-16T13:35:13.234Z",path:"/2016-11-16-chuong-2-es6-can-ban-arrow-function",tags:["javascript"],title:"Hồi 2: ES6 căn bản - Arrow Function"}}}}}});
//# sourceMappingURL=path---2016-11-17-phan-3-es-6-can-ban-assignment-destructuring-bc7ea6969f476a306765.js.map