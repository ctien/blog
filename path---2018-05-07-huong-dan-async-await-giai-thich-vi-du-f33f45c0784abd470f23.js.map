{"version":3,"sources":["webpack:///path---2018-05-07-huong-dan-async-await-giai-thich-vi-du-f33f45c0784abd470f23.js","webpack:///./.cache/json/2018-05-07-huong-dan-async-await-giai-thich-vi-du.json"],"names":["webpackJsonp","1310","module","exports","data","markdownRemark","html","timeToRead","excerpt","frontmatter","title","cover","date","category","tags","desc","fields","slug","pathContext","prev","type","next"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,s7yBAAo6xBC,WAAA,EAAAC,QAAA,gJAAAC,aAAioDC,MAAA,kCAAAC,MAAA,GAAAC,KAAA,aAAAC,SAAA,KAAAC,MAAA,cAAAC,KAAA,4EAAiMC,QAAWC,KAAA,wDAA8DC,aAAgBD,KAAA,qDAAAE,MAAoEV,aAAeC,MAAA,gDAAAK,KAAA,uEAAAK,KAAA,OAAAP,SAAA,KAAAC,MAAA,sBAAAF,KAAA,aAAAD,MAAA,IAAiOK,QAAWC,KAAA,8DAAoEI,MAASZ,aAAeC,MAAA,qDAAAK,KAAA,mEAAAK,KAAA,OAAAP,SAAA,KAAAC,MAAA,qCAAAF,KAAA,aAAAD,MAAA,IAAiPK,QAAWC,KAAA","file":"path---2018-05-07-huong-dan-async-await-giai-thich-vi-du-f33f45c0784abd470f23.js","sourcesContent":["webpackJsonp([45510163150066],{\n\n/***/ 1310:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<!-- TOC -->\\n<ul>\\n<li><a href=\\\"#gi%E1%BB%9Bi-thi%E1%BB%87u\\\">Giới thiệu</a></li>\\n<li><a href=\\\"#promise\\\">Promise</a></li>\\n<li><a href=\\\"#v%E1%BA%A5n-%C4%91%E1%BB%81-k%E1%BA%BFt-h%E1%BB%A3p-nhi%E1%BB%81u-promise\\\">Vấn đề: Kết hợp nhiều Promise</a></li>\\n<li><a href=\\\"#h%C3%A0m-async\\\">Hàm Async</a></li>\\n<li><a href=\\\"#await\\\">Await</a></li>\\n<li><a href=\\\"#gi%E1%BA%A3i-quy%E1%BA%BFt-l%E1%BB%97i-x%E1%BA%A3y-ra\\\">Giải quyết lỗi xảy ra</a></li>\\n</ul>\\n<!-- /TOC -->\\n<h1 id=\\\"giới-thiệu\\\"><a href=\\\"#gi%E1%BB%9Bi-thi%E1%BB%87u\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Giới thiệu</h1>\\n<p>Cú pháp <code class=\\\"language-text\\\">async/await</code> trong ES7 giúp giải quyết vấn đề với <strong>promise</strong> bất tuần tự.</p>\\n<p>Trường hợp chúng ta muốn <code class=\\\"language-text\\\">fetch</code> dữ liệu bất tuần tự từ nhiều nguồn database hoặc các API theo một thứ tự nhất định, chúng ta sẽ đi đến kết cục là một đống lộn xộn <strong>callback</strong> của <code class=\\\"language-text\\\">Promise</code>. Cú pháp <code class=\\\"language-text\\\">async/await</code> sẽ giúp chúng ta diễn giải logic này một cách dễ đọc hơn, dễ maintain hơn.</p>\\n<p>Trước khi bắt đầu, cũng nhìn lại một cách tổng quát Promise là gì, nếu đã nắm vững Promise, bạn có thể bỏ qua phần này.</p>\\n<h1 id=\\\"promise\\\"><a href=\\\"#promise\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Promise</h1>\\n<p><strong>Promise</strong> trong Javascript giống như <code class=\\\"language-text\\\">Future</code> trong Java, <code class=\\\"language-text\\\">Task</code> trong C#, một kiểu <strong>abstraction</strong> cho phép các đoạn code chạy bất tuần tự, đầy đủ thì có thể xem thêm bài viết của mình <a href=\\\"https://luubinhan.github.io/blog/2017-10-12-javascript-promise/\\\">ở đây về Promise trong Javascript</a></p>\\n<p><strong>Promise</strong> thường được dùng trong các thao tác I/O và network, ví dụ: đọc file, tạo một HTTP request.</p>\\n<p>Bình thường, do Javascript chạy kiểu single threat, mỗi một threat chỉ thực hiện một xử lý, Promise sẽ đảm bảo không chặn như vậy (còn cách nó làm như thế nào, bạn đọc bài ở link trên sẽ hiểu), thay vào đó nó sẽ gọi hàm callback mà chúng ta gắn vào trong <code class=\\\"language-text\\\">then</code>.</p>\\n<p>Để đơn giản, chúng ta sử dụng thư viện <code class=\\\"language-text\\\">request-promise</code> để tạo một HTTP GET request, nó sẽ trả về cho chúng ta một Promise</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> rq <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'request-promise'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> promise <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">rq</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'http://example.com/'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>Giờ xem xét đoạn code sau</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Bắt đầu chạy'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> promise <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">rp</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'http://example.com/'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\npromise<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>result <span class=\\\"token operator\\\">=></span> console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Không thể biết được Promise đã kết thúc chưa...\\\"</span><span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>Nếu chạy đoạn code này nhiều lần, chúng ta sẽ nhận những kết quả khác nhau, có khi đoạn <code class=\\\"language-text\\\">console.log(result)</code> chạy trước, có khi chạy sau.</p>\\n<p><strong>Không có một cách nào hợp lý để chúng ta block lại các xử lý cho đến khi <code class=\\\"language-text\\\">Promise</code> kết thúc</strong>. Muốn vậy chúng ta phải đưa đoạn code phía sau Promise vào bên trong hàm callback</p>\\n<p><img src=\\\"https://nikgrozev.com/images/blog/async-await/SimplePromiseExample.png\\\" alt=\\\"Hướng dẫn các bạn nắm vững asyn await trong javascript, kèm ví dụ cụ thể\\\"></p>\\n<p>Nếu chúng ta đưa đoạn code vào trong <code class=\\\"language-text\\\">then</code>, nó chỉ được gọi khi Promise đó trả về <code class=\\\"language-text\\\">success</code>, nếu <code class=\\\"language-text\\\">error</code> thì nghĩ chạy luôn. Phải đưa thêm xử lý vào <code class=\\\"language-text\\\">catch</code></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token function\\\">rp</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'http://example.com'</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Success'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">catch</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>e<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">warn</span><span class=\\\"token punctuation\\\">(</span>e<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<h1 id=\\\"vấn-đề-kết-hợp-nhiều-promise\\\"><a href=\\\"#v%E1%BA%A5n-%C4%91%E1%BB%81-k%E1%BA%BFt-h%E1%BB%A3p-nhi%E1%BB%81u-promise\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Vấn đề: Kết hợp nhiều Promise</h1>\\n<p>Sử dụng 1 Promise thì không vấn đề vì, nếu cần xử lý cho một logic bất tuần tự phức tạp hơn, chúng ta sẽ phải gọp nhiều Promise.</p>\\n<p>Ví dụ chúng ta cần ứng dụng thực hiện</p>\\n<ol>\\n<li>Tạo một HTTP request, đợi đến khi hoàn tất, in kết quả ra</li>\\n<li>Sau đó tạo thêm 2 HTTP request chạy song song</li>\\n<li>Sau khi cả 2 request này hoàn tất, in kết quả ra</li>\\n</ol>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// tạo first request</span>\\n<span class=\\\"token keyword\\\">const</span> call1Promise <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">rq</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'http://example.com/'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\ncall1Promise<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>result1 <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>result1<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token keyword\\\">const</span> call2Promise <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">rq</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'http://example.com/'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">const</span> call3Promise <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">rq</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'http://example.com/'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token keyword\\\">return</span> Promise<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">all</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span>call2Promise<span class=\\\"token punctuation\\\">,</span> call3Promise<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>arr <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// cả 2 promise 2, 3 đã hoàn tất</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p><img src=\\\"https://nikgrozev.com/images/blog/async-await/CombinedPromises.png\\\" alt=\\\"Computational process of a combination of promises. We use &#x22;Promise.all&#x22; to combine two concurrent promises into a single promise.\\\"></p>\\n<p>Và nếu chúng ta thêm một vài thao tác xử lý bất tuần tự nữa, thêm câu <code class=\\\"language-text\\\">catch</code> nữa, mọi thứ sẽ bắt đầu rối như canh hẹ luôn.</p>\\n<h1 id=\\\"hàm-async\\\"><a href=\\\"#h%C3%A0m-async\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Hàm Async</h1>\\n<p><strong>Async function</strong> là một cách để chúng ta định nghĩa một <strong>hàm trả về 1 Promise</strong></p>\\n<p>Ví dụ, 2 hàm sau là hoàn toàn như nhau</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">f</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> Promise<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'TEST'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// hàm asyncF này = với hàm f ở trên</span>\\n<span class=\\\"token keyword\\\">async</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">asyncF</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token string\\\">'TEST'</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>Tương tự, hàm <code class=\\\"language-text\\\">async</code> sẽ <em>throw</em> một exception giống như rejecting của promise</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">f</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> Promise<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">reject</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Error'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// asyncF = f</span>\\n<span class=\\\"token keyword\\\">async</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">asyncF</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token string\\\">'Error'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<h1 id=\\\"await\\\"><a href=\\\"#await\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Await</h1>\\n<p>Để các Promise chạy tuần tự, các xử lý Promise phải đợi các xử lý bất tuần tự khác chạy xong mới đến lượt nó chạy. Bằng cách sử dụng từ khóa <code class=\\\"language-text\\\">async</code>, javascript sẽ <strong>đóng gói</strong> các xử lý bên trong hàm để trả về 1 Promise, và chạy kiểu <strong>bất tuần tự</strong></p>\\n<p>Bên trong hàm <code class=\\\"language-text\\\">async</code> ta có thể sử dụng thêm từ khóa là <code class=\\\"language-text\\\">await</code>, và chỉ có thể sử dụng <code class=\\\"language-text\\\">await</code> trong hàm <code class=\\\"language-text\\\">async</code> thôi nhé, nó sẽ cho phép ta chỉ định một tác vụ phải chạy tuần tự, phải <strong>đợi tao chạy xong</strong>.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">async</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">f</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// sau khi promise được resolved, kết quả đó sẽ dược đưa về cho response</span>\\n    <span class=\\\"token keyword\\\">const</span> response <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">await</span> <span class=\\\"token function\\\">rp</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'http://example.com/'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>response<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// bên ngoài hàm async ta phải dùng then chứ không thể gọi await, nhớ là hàm f trả về promise</span>\\n<span class=\\\"token function\\\">f</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Finished'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>Giờ chúng ta viết lại hàm xử lý lồng nhiều Promise ở trên</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// đưa nó vô hàm async</span>\\n<span class=\\\"token keyword\\\">async</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">solution</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// đợi và print kết quả</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">await</span> <span class=\\\"token function\\\">rp</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'http://example.com/'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token comment\\\">// chạy bất tuần tự 2 đứa này</span>\\n    <span class=\\\"token keyword\\\">const</span> call2Promise <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">rp</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'http://example.com/'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">const</span> call3Promise <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">rp</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'http://example.com/'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token comment\\\">// đợi khi cả 2 thằng trên chạy xong và được resolve</span>\\n    <span class=\\\"token keyword\\\">const</span> response2 <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">await</span> call2Promise<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">const</span> response3 <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">await</span> call3Promise<span class=\\\"token punctuation\\\">;</span>\\n\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>response2<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>response3<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// gọi hàm async</span>\\n<span class=\\\"token function\\\">solution</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Finished'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>Nó sẽ tương tự như cách sử dụng <code class=\\\"language-text\\\">Promise.all(...).then(...)</code> chỉ là ta viết khác đi cho nó dễ hiểu, đỡ rối.</p>\\n<p><img src=\\\"https://nikgrozev.com/images/blog/async-await/AsyncAwaitExample.png\\\"></p>\\n<h1 id=\\\"giải-quyết-lỗi-xảy-ra\\\"><a href=\\\"#gi%E1%BA%A3i-quy%E1%BA%BFt-l%E1%BB%97i-x%E1%BA%A3y-ra\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Giải quyết lỗi xảy ra</h1>\\n<p>Trong ví dụ trên chúng ta đã mặc định là 2 hàm <code class=\\\"language-text\\\">call2Promise</code> và <code class=\\\"language-text\\\">call3Promise</code> luôn thành công, nếu lỡ thằng nào chết chúng ta phải <code class=\\\"language-text\\\">try/catch</code> để bắt lỗi</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">async</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">f</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">try</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">const</span> promiseResult <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">await</span> Promise<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">reject</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Error'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">catch</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">e</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n        console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>e<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>Nếu không handle lỗi trong hàm <code class=\\\"language-text\\\">async</code>, thì nó sẽ trả về rejected promise khi có bug</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">async</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">f</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">//...</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token function\\\">f</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>\\n    <span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Success'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>\\n    <span class=\\\"token keyword\\\">catch</span><span class=\\\"token punctuation\\\">(</span>err <span class=\\\"token operator\\\">=></span> console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>Kết luận <code class=\\\"language-text\\\">async/await</code> không hẳn là kẻ thay thế cho <code class=\\\"language-text\\\">promise</code>. Chúng ta vẫn dùng Promise cho những trường hợp đơn giản, với yêu cầu xử lý phức tạp hơn thì luôn cân nhắc xử dụng <code class=\\\"language-text\\\">async/await</code>.</p>\\n<p><a href=\\\"http://nikgrozev.com/2017/10/01/async-await/\\\">Link tham khảo IKOLAY GROZEV</a></p>\",\"timeToRead\":6,\"excerpt\":\"Giới thiệu Promise Vấn đề: Kết hợp nhiều Promise Hàm Async Await Giải quyết lỗi xảy ra Giới thiệu Cú pháp   trong ES7 giúp giải quyết vấn đề…\",\"frontmatter\":{\"title\":\"Async Await giải thích và ví dụ\",\"cover\":\"\",\"date\":\"2018-05-07\",\"category\":null,\"tags\":[\"javascript\"],\"desc\":\"Hướng dẫn các bạn nắm vững asyn await trong javascript, kèm ví dụ cụ thể\"},\"fields\":{\"slug\":\"/2018-05-07-huong-dan-async-await-giai-thich-vi-du\"}}},\"pathContext\":{\"slug\":\"/2018-05-07-huong-dan-async-await-giai-thich-vi-du\",\"prev\":{\"frontmatter\":{\"title\":\"React Context API - có phải sẽ thay thế Redux\",\"desc\":\"Thử sử dụng React Context API để thay thể Redux cho State Management\",\"type\":\"post\",\"category\":null,\"tags\":[\"javascript\",\"react\"],\"date\":\"2018-05-16\",\"cover\":\"\"},\"fields\":{\"slug\":\"/2018-05-16-huong-dan-react-context-api-ke-thay-the-redux\"}},\"next\":{\"frontmatter\":{\"title\":\"Transition trong React Native với React Navigation\",\"desc\":\"Hướng dẫn làm transition trong React Native với react navigation\",\"type\":\"post\",\"category\":null,\"tags\":[\"javascript\",\"react\",\"react-native\"],\"date\":\"2018-05-02\",\"cover\":\"\"},\"fields\":{\"slug\":\"/2018-05-02-huong-dan-transition-voi-react-navigation\"}}}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---2018-05-07-huong-dan-async-await-giai-thich-vi-du-f33f45c0784abd470f23.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<!-- TOC -->\\n<ul>\\n<li><a href=\\\"#gi%E1%BB%9Bi-thi%E1%BB%87u\\\">Giới thiệu</a></li>\\n<li><a href=\\\"#promise\\\">Promise</a></li>\\n<li><a href=\\\"#v%E1%BA%A5n-%C4%91%E1%BB%81-k%E1%BA%BFt-h%E1%BB%A3p-nhi%E1%BB%81u-promise\\\">Vấn đề: Kết hợp nhiều Promise</a></li>\\n<li><a href=\\\"#h%C3%A0m-async\\\">Hàm Async</a></li>\\n<li><a href=\\\"#await\\\">Await</a></li>\\n<li><a href=\\\"#gi%E1%BA%A3i-quy%E1%BA%BFt-l%E1%BB%97i-x%E1%BA%A3y-ra\\\">Giải quyết lỗi xảy ra</a></li>\\n</ul>\\n<!-- /TOC -->\\n<h1 id=\\\"giới-thiệu\\\"><a href=\\\"#gi%E1%BB%9Bi-thi%E1%BB%87u\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Giới thiệu</h1>\\n<p>Cú pháp <code class=\\\"language-text\\\">async/await</code> trong ES7 giúp giải quyết vấn đề với <strong>promise</strong> bất tuần tự.</p>\\n<p>Trường hợp chúng ta muốn <code class=\\\"language-text\\\">fetch</code> dữ liệu bất tuần tự từ nhiều nguồn database hoặc các API theo một thứ tự nhất định, chúng ta sẽ đi đến kết cục là một đống lộn xộn <strong>callback</strong> của <code class=\\\"language-text\\\">Promise</code>. Cú pháp <code class=\\\"language-text\\\">async/await</code> sẽ giúp chúng ta diễn giải logic này một cách dễ đọc hơn, dễ maintain hơn.</p>\\n<p>Trước khi bắt đầu, cũng nhìn lại một cách tổng quát Promise là gì, nếu đã nắm vững Promise, bạn có thể bỏ qua phần này.</p>\\n<h1 id=\\\"promise\\\"><a href=\\\"#promise\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Promise</h1>\\n<p><strong>Promise</strong> trong Javascript giống như <code class=\\\"language-text\\\">Future</code> trong Java, <code class=\\\"language-text\\\">Task</code> trong C#, một kiểu <strong>abstraction</strong> cho phép các đoạn code chạy bất tuần tự, đầy đủ thì có thể xem thêm bài viết của mình <a href=\\\"https://luubinhan.github.io/blog/2017-10-12-javascript-promise/\\\">ở đây về Promise trong Javascript</a></p>\\n<p><strong>Promise</strong> thường được dùng trong các thao tác I/O và network, ví dụ: đọc file, tạo một HTTP request.</p>\\n<p>Bình thường, do Javascript chạy kiểu single threat, mỗi một threat chỉ thực hiện một xử lý, Promise sẽ đảm bảo không chặn như vậy (còn cách nó làm như thế nào, bạn đọc bài ở link trên sẽ hiểu), thay vào đó nó sẽ gọi hàm callback mà chúng ta gắn vào trong <code class=\\\"language-text\\\">then</code>.</p>\\n<p>Để đơn giản, chúng ta sử dụng thư viện <code class=\\\"language-text\\\">request-promise</code> để tạo một HTTP GET request, nó sẽ trả về cho chúng ta một Promise</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> rq <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'request-promise'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> promise <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">rq</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'http://example.com/'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>Giờ xem xét đoạn code sau</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Bắt đầu chạy'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> promise <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">rp</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'http://example.com/'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\npromise<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>result <span class=\\\"token operator\\\">=></span> console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Không thể biết được Promise đã kết thúc chưa...\\\"</span><span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>Nếu chạy đoạn code này nhiều lần, chúng ta sẽ nhận những kết quả khác nhau, có khi đoạn <code class=\\\"language-text\\\">console.log(result)</code> chạy trước, có khi chạy sau.</p>\\n<p><strong>Không có một cách nào hợp lý để chúng ta block lại các xử lý cho đến khi <code class=\\\"language-text\\\">Promise</code> kết thúc</strong>. Muốn vậy chúng ta phải đưa đoạn code phía sau Promise vào bên trong hàm callback</p>\\n<p><img src=\\\"https://nikgrozev.com/images/blog/async-await/SimplePromiseExample.png\\\" alt=\\\"Hướng dẫn các bạn nắm vững asyn await trong javascript, kèm ví dụ cụ thể\\\"></p>\\n<p>Nếu chúng ta đưa đoạn code vào trong <code class=\\\"language-text\\\">then</code>, nó chỉ được gọi khi Promise đó trả về <code class=\\\"language-text\\\">success</code>, nếu <code class=\\\"language-text\\\">error</code> thì nghĩ chạy luôn. Phải đưa thêm xử lý vào <code class=\\\"language-text\\\">catch</code></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token function\\\">rp</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'http://example.com'</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Success'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">catch</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>e<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">warn</span><span class=\\\"token punctuation\\\">(</span>e<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<h1 id=\\\"vấn-đề-kết-hợp-nhiều-promise\\\"><a href=\\\"#v%E1%BA%A5n-%C4%91%E1%BB%81-k%E1%BA%BFt-h%E1%BB%A3p-nhi%E1%BB%81u-promise\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Vấn đề: Kết hợp nhiều Promise</h1>\\n<p>Sử dụng 1 Promise thì không vấn đề vì, nếu cần xử lý cho một logic bất tuần tự phức tạp hơn, chúng ta sẽ phải gọp nhiều Promise.</p>\\n<p>Ví dụ chúng ta cần ứng dụng thực hiện</p>\\n<ol>\\n<li>Tạo một HTTP request, đợi đến khi hoàn tất, in kết quả ra</li>\\n<li>Sau đó tạo thêm 2 HTTP request chạy song song</li>\\n<li>Sau khi cả 2 request này hoàn tất, in kết quả ra</li>\\n</ol>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// tạo first request</span>\\n<span class=\\\"token keyword\\\">const</span> call1Promise <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">rq</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'http://example.com/'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\ncall1Promise<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>result1 <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>result1<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token keyword\\\">const</span> call2Promise <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">rq</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'http://example.com/'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">const</span> call3Promise <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">rq</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'http://example.com/'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token keyword\\\">return</span> Promise<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">all</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span>call2Promise<span class=\\\"token punctuation\\\">,</span> call3Promise<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>arr <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// cả 2 promise 2, 3 đã hoàn tất</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p><img src=\\\"https://nikgrozev.com/images/blog/async-await/CombinedPromises.png\\\" alt=\\\"Computational process of a combination of promises. We use &#x22;Promise.all&#x22; to combine two concurrent promises into a single promise.\\\"></p>\\n<p>Và nếu chúng ta thêm một vài thao tác xử lý bất tuần tự nữa, thêm câu <code class=\\\"language-text\\\">catch</code> nữa, mọi thứ sẽ bắt đầu rối như canh hẹ luôn.</p>\\n<h1 id=\\\"hàm-async\\\"><a href=\\\"#h%C3%A0m-async\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Hàm Async</h1>\\n<p><strong>Async function</strong> là một cách để chúng ta định nghĩa một <strong>hàm trả về 1 Promise</strong></p>\\n<p>Ví dụ, 2 hàm sau là hoàn toàn như nhau</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">f</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> Promise<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'TEST'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// hàm asyncF này = với hàm f ở trên</span>\\n<span class=\\\"token keyword\\\">async</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">asyncF</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token string\\\">'TEST'</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>Tương tự, hàm <code class=\\\"language-text\\\">async</code> sẽ <em>throw</em> một exception giống như rejecting của promise</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">f</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> Promise<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">reject</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Error'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// asyncF = f</span>\\n<span class=\\\"token keyword\\\">async</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">asyncF</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token string\\\">'Error'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<h1 id=\\\"await\\\"><a href=\\\"#await\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Await</h1>\\n<p>Để các Promise chạy tuần tự, các xử lý Promise phải đợi các xử lý bất tuần tự khác chạy xong mới đến lượt nó chạy. Bằng cách sử dụng từ khóa <code class=\\\"language-text\\\">async</code>, javascript sẽ <strong>đóng gói</strong> các xử lý bên trong hàm để trả về 1 Promise, và chạy kiểu <strong>bất tuần tự</strong></p>\\n<p>Bên trong hàm <code class=\\\"language-text\\\">async</code> ta có thể sử dụng thêm từ khóa là <code class=\\\"language-text\\\">await</code>, và chỉ có thể sử dụng <code class=\\\"language-text\\\">await</code> trong hàm <code class=\\\"language-text\\\">async</code> thôi nhé, nó sẽ cho phép ta chỉ định một tác vụ phải chạy tuần tự, phải <strong>đợi tao chạy xong</strong>.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">async</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">f</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// sau khi promise được resolved, kết quả đó sẽ dược đưa về cho response</span>\\n    <span class=\\\"token keyword\\\">const</span> response <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">await</span> <span class=\\\"token function\\\">rp</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'http://example.com/'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>response<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// bên ngoài hàm async ta phải dùng then chứ không thể gọi await, nhớ là hàm f trả về promise</span>\\n<span class=\\\"token function\\\">f</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Finished'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>Giờ chúng ta viết lại hàm xử lý lồng nhiều Promise ở trên</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// đưa nó vô hàm async</span>\\n<span class=\\\"token keyword\\\">async</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">solution</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// đợi và print kết quả</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">await</span> <span class=\\\"token function\\\">rp</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'http://example.com/'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token comment\\\">// chạy bất tuần tự 2 đứa này</span>\\n    <span class=\\\"token keyword\\\">const</span> call2Promise <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">rp</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'http://example.com/'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">const</span> call3Promise <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">rp</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'http://example.com/'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token comment\\\">// đợi khi cả 2 thằng trên chạy xong và được resolve</span>\\n    <span class=\\\"token keyword\\\">const</span> response2 <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">await</span> call2Promise<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">const</span> response3 <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">await</span> call3Promise<span class=\\\"token punctuation\\\">;</span>\\n\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>response2<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>response3<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// gọi hàm async</span>\\n<span class=\\\"token function\\\">solution</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Finished'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>Nó sẽ tương tự như cách sử dụng <code class=\\\"language-text\\\">Promise.all(...).then(...)</code> chỉ là ta viết khác đi cho nó dễ hiểu, đỡ rối.</p>\\n<p><img src=\\\"https://nikgrozev.com/images/blog/async-await/AsyncAwaitExample.png\\\"></p>\\n<h1 id=\\\"giải-quyết-lỗi-xảy-ra\\\"><a href=\\\"#gi%E1%BA%A3i-quy%E1%BA%BFt-l%E1%BB%97i-x%E1%BA%A3y-ra\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Giải quyết lỗi xảy ra</h1>\\n<p>Trong ví dụ trên chúng ta đã mặc định là 2 hàm <code class=\\\"language-text\\\">call2Promise</code> và <code class=\\\"language-text\\\">call3Promise</code> luôn thành công, nếu lỡ thằng nào chết chúng ta phải <code class=\\\"language-text\\\">try/catch</code> để bắt lỗi</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">async</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">f</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">try</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">const</span> promiseResult <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">await</span> Promise<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">reject</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Error'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">catch</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">e</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n        console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>e<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>Nếu không handle lỗi trong hàm <code class=\\\"language-text\\\">async</code>, thì nó sẽ trả về rejected promise khi có bug</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">async</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">f</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">//...</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token function\\\">f</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>\\n    <span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Success'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>\\n    <span class=\\\"token keyword\\\">catch</span><span class=\\\"token punctuation\\\">(</span>err <span class=\\\"token operator\\\">=></span> console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>Kết luận <code class=\\\"language-text\\\">async/await</code> không hẳn là kẻ thay thế cho <code class=\\\"language-text\\\">promise</code>. Chúng ta vẫn dùng Promise cho những trường hợp đơn giản, với yêu cầu xử lý phức tạp hơn thì luôn cân nhắc xử dụng <code class=\\\"language-text\\\">async/await</code>.</p>\\n<p><a href=\\\"http://nikgrozev.com/2017/10/01/async-await/\\\">Link tham khảo IKOLAY GROZEV</a></p>\",\"timeToRead\":6,\"excerpt\":\"Giới thiệu Promise Vấn đề: Kết hợp nhiều Promise Hàm Async Await Giải quyết lỗi xảy ra Giới thiệu Cú pháp   trong ES7 giúp giải quyết vấn đề…\",\"frontmatter\":{\"title\":\"Async Await giải thích và ví dụ\",\"cover\":\"\",\"date\":\"2018-05-07\",\"category\":null,\"tags\":[\"javascript\"],\"desc\":\"Hướng dẫn các bạn nắm vững asyn await trong javascript, kèm ví dụ cụ thể\"},\"fields\":{\"slug\":\"/2018-05-07-huong-dan-async-await-giai-thich-vi-du\"}}},\"pathContext\":{\"slug\":\"/2018-05-07-huong-dan-async-await-giai-thich-vi-du\",\"prev\":{\"frontmatter\":{\"title\":\"React Context API - có phải sẽ thay thế Redux\",\"desc\":\"Thử sử dụng React Context API để thay thể Redux cho State Management\",\"type\":\"post\",\"category\":null,\"tags\":[\"javascript\",\"react\"],\"date\":\"2018-05-16\",\"cover\":\"\"},\"fields\":{\"slug\":\"/2018-05-16-huong-dan-react-context-api-ke-thay-the-redux\"}},\"next\":{\"frontmatter\":{\"title\":\"Transition trong React Native với React Navigation\",\"desc\":\"Hướng dẫn làm transition trong React Native với react navigation\",\"type\":\"post\",\"category\":null,\"tags\":[\"javascript\",\"react\",\"react-native\"],\"date\":\"2018-05-02\",\"cover\":\"\"},\"fields\":{\"slug\":\"/2018-05-02-huong-dan-transition-voi-react-navigation\"}}}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/2018-05-07-huong-dan-async-await-giai-thich-vi-du.json\n// module id = 1310\n// module chunks = 45510163150066"],"sourceRoot":""}