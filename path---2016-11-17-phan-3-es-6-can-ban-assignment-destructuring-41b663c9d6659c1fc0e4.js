webpackJsonp([29],{"./node_modules/json-loader/index.js!./.cache/json/2016-11-17-phan-3-es-6-can-ban-assignment-destructuring.json":function(n,s){n.exports={data:{markdownRemark:{html:'<!-- MarkdownTOC -->\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>- Truy cập các phần tử của `Objects`</code></pre>\n      </div>\n<ul>\n<li>\n<p>Truy cập các phần tử của <code>Arrays</code></p>\n<ul>\n<li>Truy cập các phần tử <code>Parameters</code> của <code>Function</code></li>\n<li>Ứng dụng</li>\n</ul>\n</li>\n</ul>\n<!-- /MarkdownTOC -->\n<h2>Truy cập các phần tử của <code>Objects</code></h2>\n<p>Tưởng tượng ta có nhân vật Bruce với mật danh Batman được định nghĩa như sau</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">var</span> character <span class="token operator">=</span> <span class="token punctuation">{</span>\n name<span class="token punctuation">:</span> <span class="token string">\'Bruce\'</span><span class="token punctuation">,</span>\n pseudonym<span class="token punctuation">:</span> <span class="token string">\'Batman\'</span><span class="token punctuation">,</span>\n metadata<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  age<span class="token punctuation">:</span> <span class="token number">34</span><span class="token punctuation">,</span>\n  gender<span class="token punctuation">:</span> <span class="token string">\'male\'</span>\n <span class="token punctuation">}</span><span class="token punctuation">,</span>\n batarang<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">\'gas pellet\'</span><span class="token punctuation">,</span><span class="token string">\'bat-mobile control\'</span><span class="token punctuation">,</span><span class="token string">\'bat-cuffs\'</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>Nếu bạn muốn biến <code>pseudonym</code> tham chiếu đến <code>character.pseudonym</code>, với ES5</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">var</span> pseudonym <span class="token operator">=</span> character<span class="token punctuation">.</span>pseudonym\n</code></pre>\n      </div>\n<p>Với ES6 ta có thể viết đoạn trên thành</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">var</span> <span class="token punctuation">{</span>pseudonym<span class="token punctuation">}</span> <span class="token operator">=</span> character\n</code></pre>\n      </div>\n<p>Cái này được gọi là <code>Destructuring object</code>, nếu muốn khai báo nhiều biến như thế này tham chiếu tới key của object <em>character</em>, thêm dấu <code>,</code> giữa mỗi biến</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">var</span> <span class="token punctuation">{</span>pseudonym<span class="token punctuation">,</span> name<span class="token punctuation">}</span> <span class="token operator">=</span> character\n</code></pre>\n      </div>\n<p>Nếu muốn tham chiếu đến key là <code>pseudonym</code> nhưng lại muốn đặt tên biến là <code>alias</code></p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">var</span> <span class="token punctuation">{</span> pseudonym<span class="token punctuation">:</span> alias <span class="token punctuation">}</span> <span class="token operator">=</span> character\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> alias <span class="token punctuation">)</span>\n<span class="token comment" spellcheck="true">// The same with: alias = character.pseudonym</span>\n</code></pre>\n      </div>\n<p>Nếu đặt giữa dấu <code>{}</code> là đang truy xuất tới key bên dưới <code>pseudonym</code> chứ ko phải đặt alias. Khi <code>gender</code> chưa được định nghĩa, mặc định sẽ trả về <code>undefined</code></p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">var</span> <span class="token punctuation">{</span> pseudonym<span class="token punctuation">:</span> <span class="token punctuation">{</span>gender<span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token operator">=</span> character\n</code></pre>\n      </div>\n<p>Nếu kết hợp sử dụng alias và giá trị mặc định, viết tên alias trước rồi tới giá trị mặc định</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">var</span> <span class="token punctuation">{</span> boots<span class="token punctuation">:</span> footwear <span class="token operator">=</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span> <span class="token operator">=</span> character\n</code></pre>\n      </div>\n<p>Sử dụng kết hợp với <code>Computed Property</code>, trong trường hợp này bắt buộc đặt alias</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">var</span> person <span class="token operator">=</span>  <span class="token punctuation">{</span> scientist<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>\n<span class="token keyword">var</span> type <span class="token operator">=</span> <span class="token string">\'scientist\'</span>\n<span class="token keyword">var</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">:</span> value <span class="token punctuation">}</span> <span class="token operator">=</span> person\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>\n</code></pre>\n      </div>\n<p>Câu này thì biết vậy thôi chứ ko cần dùng vì nó khó đọc hơn cách viết cũ <code>value = person[type]</code></p>\n<h1>Truy cập các phần tử của <code>Arrays</code></h1>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">var</span> coordinates <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">]</span>\n<span class="token keyword">var</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> coordinates\n</code></pre>\n      </div>\n<p>Tương tự như object, khác ở chổ thay vì rào hay tham biến bằng <code>{}</code>  thì rào nó vào <code>[]</code>, câu trên tương tự với <code>x = coordinates[0], y = coordinates[1]</code></p>\n<p>Để bỏ qua một giá trị trong mảng không muốn tham biến tới, bỏ trống</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">var</span> coordinates <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">]</span>\n<span class="token keyword">var</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span><span class="token punctuation">,</span>z<span class="token punctuation">]</span> <span class="token operator">=</span> coordinates\n</code></pre>\n      </div>\n<p>Tham biến giá trị mặc định lúc khởi tạo</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>var coordinates = [12,-7,20]\nvar [x,,z = 30] = coordinates\nconsole.log(z)\n// z=30</code></pre>\n      </div>\n<p>Trong ES5 để hoán đổi giá trị của 2 biến nào đó mình sẽ thêm một biến nữa để lưu tạm giá trị</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">var</span> left <span class="token operator">=</span> <span class="token number">5</span>\n<span class="token keyword">var</span> right <span class="token operator">=</span> <span class="token number">7</span>\n<span class="token keyword">var</span> tempt <span class="token operator">=</span> left\nleft <span class="token operator">=</span> right\nright <span class="token operator">=</span> tempt\n</code></pre>\n      </div>\n<p>Viết lại thế này với ES6</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">var</span> left <span class="token operator">=</span> <span class="token number">5</span>\n<span class="token keyword">var</span> right <span class="token operator">=</span> <span class="token number">7</span>\n<span class="token punctuation">[</span>left<span class="token punctuation">,</span> right<span class="token punctuation">]</span> <span class="token operator">=</span>  <span class="token punctuation">[</span>right<span class="token punctuation">,</span>left<span class="token punctuation">]</span>\n</code></pre>\n      </div>\n<h2>Truy cập các phần tử <code>Parameters</code> của <code>Function</code></h2>\n<p>Cái này thì cũ rồi mà giờ mới có nè, giá trị mặc định cho <code>parameter</code></p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">function</span> <span class="token function">powerOf</span><span class="token punctuation">(</span> base<span class="token punctuation">,</span> exponent <span class="token operator">=</span> <span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>base<span class="token punctuation">,</span> exponent<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>Sử dụng với <code>Arrow function</code>, trường hợp này luôn luôn kẹp vào <code>()</code> dù chỉ có một tham số</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">var</span> double <span class="token operator">=</span> <span class="token punctuation">(</span>input <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> input <span class="token operator">*</span> <span class="token number">2</span>\n<span class="token keyword">function</span> sumOf <span class="token punctuation">(</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n <span class="token keyword">return</span> a <span class="token operator">+</span> b <span class="token operator">+</span> c\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>Truyền vào tham số là một <code>object</code> chứa nhiều <code>key</code>, định giá trị mặc định cho <code>key</code> của <code>object</code></p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">function</span> <span class="token function">carFactory</span><span class="token punctuation">(</span> options <span class="token operator">=</span> <span class="token punctuation">{</span> brand<span class="token punctuation">:</span> <span class="token string">"Suzuki"</span><span class="token punctuation">,</span> year<span class="token punctuation">:</span> <span class="token number">1989</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>brand<span class="token punctuation">)</span>\n console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>year<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>Để ý là nếu truyền vào <code>object</code> chỉ một <code>key</code>, thì toàn bộ <code>key</code> mặc định cũng mất, ví dụ như <strong>options</strong> ở trên chỉ truyền vào <strong>year</strong> thì cái *<em>brand</em> mất</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token function">carFactory</span><span class="token punctuation">(</span><span class="token punctuation">{</span>year<span class="token punctuation">:</span> <span class="token number">2000</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n      </div>\n<p>Cách tốt nhất là nên truyền vào theo kiểu từng phần tử, không dùng <code>object</code> <strong>options</strong>, sửa lại hàm ở trên thành</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">function</span> <span class="token function">carFactory</span><span class="token punctuation">(</span><span class="token punctuation">{</span>brand <span class="token operator">=</span> <span class="token string">"Suzuki"</span><span class="token punctuation">,</span> year <span class="token operator">=</span> <span class="token number">1999</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n<span class="token punctuation">}</span>\n<span class="token function">carFactory</span><span class="token punctuation">(</span><span class="token punctuation">{</span>year<span class="token punctuation">:</span> <span class="token number">2000</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n      </div>\n<h2>Ứng dụng</h2>\n<p>Khi một hàm cần trả về <code>object</code> hoặc <code>array</code>. Ví dụ hàm bên dưới trả về tọa độ và <code>type</code>, nhưng chúng ta có thể lấy đúng giá trị của tọa độ x, y, không quan tâm z, type</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">function</span> <span class="token function">getCoordinates</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n <span class="token keyword">return</span> <span class="token punctuation">{</span>x<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span> z<span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> type<span class="token punctuation">:</span> <span class="token string">\'3d\'</span> <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> <span class="token punctuation">{</span>x<span class="token punctuation">,</span>y<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">getCoordinates</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre>\n      </div>\n<p>Ví dụ ta có hàm <code>random</code> để tạo một con số ngẫu nhiên nào đó trong phạm vi min và max được chỉ định, khi gọi hàm này cũng có thể thay đổi giá trị min, max tùy ý</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">function</span> <span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">{</span>min <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> max <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n <span class="token keyword">return</span> Match<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>max <span class="token operator">-</span> min<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> min\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">{</span>max<span class="token punctuation">:</span> <span class="token number">24</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>\n</code></pre>\n      </div>\n<p>Khi sử dụng cùng với <code>Regular expression</code>, ta có thể bỏ qua giá trí đầu tiên trả về vốn là giá trị truyền vào, ta chỉ cần lấy lấy kết quả year, month, day</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">function</span> <span class="token function">splitDate</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n <span class="token keyword">var</span> rdate <span class="token operator">=</span> <span class="token regex">/(\\d+).(\\d+).(\\d+)/</span>\n <span class="token keyword">return</span> rdate<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> <span class="token punctuation">[</span><span class="token punctuation">,</span>year<span class="token punctuation">,</span> month<span class="token punctuation">,</span> day<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">slitDate</span><span class="token punctuation">(</span><span class="token string">\'2016-11-16\'</span><span class="token punctuation">)</span>\n</code></pre>\n      </div>',frontmatter:{date:"November 17, 2016",path:"/2016-11-17-phan-3-es6-can-ban-assignment-destructuring",tags:["javascript"],title:"Hồi 3: ES6 căn bản - Truy cập phần tử",desc:"Hồi 3 trong series ES6 căn bản, nói về Assignment Destructuring"}}},pathContext:{prev:{excerpt:"Sạo vậy thôi chứ làm gì mà trở thành master ngay lập tức được, lý lẽ bình thường muốn master bất cứ thứ gì cũng cần mồ hôi và nước mắt. Hiểu được 5 khái niệm được cho là căn cơ nhất này sẽ giúp bạn dễ xa lầy hơn. Component JSX Props & State Component...",html:'<p>Sạo vậy thôi chứ làm gì mà trở thành master ngay lập tức được, lý lẽ bình thường muốn master bất cứ thứ gì cũng cần mồ hôi và nước mắt. Hiểu được 5 khái niệm được cho là căn cơ nhất này sẽ giúp bạn dễ xa lầy hơn.</p>\n<ol>\n<li>Component</li>\n<li>JSX</li>\n<li>Props &#x26; State</li>\n<li>Component API</li>\n<li>Component Type</li>\n</ol>\n<h1>Khái niệm #1: React component hoạt động ra sau</h1>\n<p>Điều đầu tiên cần nằm lòng là tất cả những gì React xây dựng điều xoay quanh component. Thế thì component là gì. Ví dụ tuyệt vời nhất là select HTML element, select có thể xem như một component được định nghĩa sẵn với kiểu hiện thị riêng của nó (màu xám, có label, nút tam giác nằm ở góc phải) và tự nó xử lý tác vụ đóng mở mấy cái option</p>\n<p><img src="https://img.readitlater.com/i/cdn-images-1.medium.com/max/800/1*dPxDcCmCItzEyQuPpHOS3Q/RS/w704.gif"></p>\n<p>Giờ tưởng tượng là chúng ta sẽ tự build ra một cái component tương tự như select với giao diện và event chúng ta tự kiểm soát</p>\n<p><img src="https://img.readitlater.com/i/cdn-images-1.medium.com/max/800/1*AZ2IbiM4WskvgvIyhq6qPA/RS/w704.gif"></p>\n<p>Đó là những gì React giúp chúng ta làm, xây dựng một đối tượng không chỉ output ra một HTML templete thông thường,  chúng ta sẽ viết ra những function để control những event trên cái template đó</p>\n<p>Để tạo ra một React component căn bản nhất</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">class</span> <span class="token class-name">MyComponent</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>component</span> <span class="token punctuation">{</span>\n <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword">return</span> Hello World<span class="token operator">!</span><span class="token punctuation">;</span>\n <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<h1>Khái niệm #2: JSX chạy thế nào</h1>\n<p>Có thể thấy là với cách tạo ra một component như React thì javascript và HTML sống chung một nhà. Vũ khí bí mật của React để làm được chuyện "what-the-heck" đó là JSX language.</p>\n<p>Ngày xưa, đi học được dạy phải tách biệt HTML ra một file và JS ra một file, thời gian sau này anh em làm frontend thấy làm gom như vậy làm thấy nhanh hơn, mà cũng không quá evil như mấy ông thầy dạy</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">class</span> <span class="token class-name">MyComponent</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>component</span> <span class="token punctuation">{</span>\n <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\nreturnToday is<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token keyword">new</span> <span class="token class-name">Data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>Để ý cái cách ta chèn code javascript ở trong HTML bằng cách đưa nào vào bên trong dấu {}, đó là cách viết JSX</p>\n<h1>Khái niệm 3: Props và State</h1>\n<p>Bạn chắc chắn biết đến attribute href cho thẻ a , chưa biết? về lại w3com học nhé. Với một component của React những attribute như vậy được gọi là props . Props là cách mà các component tương tác lẫn nhau</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">class</span> <span class="token class-name">ParentComponent</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token punctuation">{</span>\n <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token operator">&lt;</span>ChildComponent message<span class="token operator">=</span><span class="token string">"Hello World"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">;</span>\n <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">class</span> <span class="token class-name">ChildComponent</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token punctuation">{</span>\n <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword">return</span> And then I said<span class="token punctuation">,</span> <span class="token string">"{this.props.message}"</span><span class="token punctuation">;</span>\n <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>Dữ liệu trong component có thể truyền từ cha xuống con và không có ngược lại</p>\n<p>Đôi khi dữ liệu sẽ không phải được truyền từ cha xuống con, mà nó chỉ là một dữ liệu tạm thời nào đó, ví dụ như giá trị input của user chẳng hạn, lúc đó nó được gọi là state</p>\n<p>Cho dễ hình dung, nếu xem cái bảng nam châm là một component thì props là nút gạt xóa, state là những gì viết trên bảng</p>\n<p><img src="https://img.readitlater.com/i/cdn-images-1.medium.com/max/1000/1*aYxNrkwkAPwIoGc0-3k_Ug/RS/w704.jpeg"></p>\n<p>Bên trong một component, state được quản lý bằng hàm setState thường được viết lòng trong một hàm xử lý sự kiện</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">class</span> <span class="token class-name">MyComponent</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>\n handleClick <span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>setState <span class="token punctuation">(</span><span class="token punctuation">{</span>clicked<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n <span class="token punctuation">}</span>\n <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"#"</span> onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleClick<span class="token punctuation">}</span><span class="token operator">></span> Click Me<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token punctuation">;</span>\n <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<h1>Khái niệm #4: Component API</h1>\n<p>Những hàm như render và setState là một phần của component API, ngoài ra nó còn một số hàm hữu ích khác nữa như constructor để khởi tạo state và kích hoạt các phương thức, một số hàm trigger trước khi component được load, sau khi load, sau khi unmounting. vâng vâng.</p>\n<p>Thật ra việc master được React phần nhiều là master được việc lập trình và khái niệm để kiến trúc ra một component hơn là một loạt các API được hỗ trợ sẵn, vậy nên phần này kết thúc ở đây.</p>\n<h1>Khái niệm 5: Component Type</h1>\n<p>Mấy ví dụ trên, định nghĩa một component được khai báo dạng class</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">class</span> <span class="token class-name">MyComponent</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token punctuation">{</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>Giờ thì hãy quên cách viết này đi! Bây giờ ai cũng viết một component ở dạng function component</p>\n<p>Một functional component là một function nhận một props object như tham số truyền vào và trả về một đống HTML lằn xà ngoằn. Y hệt như cách viết template kinh điển, khác biệt cơ bản là ở chổ mình có thể xài JavaScript bất cứ chổ nào khi cần</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">const</span> myComponent <span class="token operator">=</span> props <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> Hello <span class="token punctuation">{</span>props<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token punctuation">,</span> Today is <span class="token punctuation">{</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>Viết cách này có một hậu quả là mình không thể access được phương thức của component, trên thực tế việc này không ảnh hưởng gì làm vì phần lớn trường hợp ta không dùng tới.</p>\n<p>Và như vậy component này sẽ không có phương thức setState , không có state luôn, người ta còn gọi là stateless functional component.</p>\n<p>Cách viết này rất là gọn gàng, phù hợp cho những trường component đơn giản, nên áp dụng khi có thể.</p>\n<p>Nguồn</p>\n<blockquote>\n<blockquote>\n<p><a href="https://medium.freecodecamp.com/the-5-things-you-need-to-know-to-understand-react-a1dbd5d114a3">https://medium.freecodecamp.com/the-5-things-you-need-to-know-to-understand-react-a1dbd5d114a3</a></p>\n</blockquote>\n</blockquote>',id:"C:/anluu/luckyluu/posts/2017-01-10-nam-vung-5-khai-niem-sau-xem-nhu-master-react/index.md absPath of file >>> MarkdownRemark",timeToRead:4,frontmatter:{date:"2017-01-10T13:35:13.234Z",path:"/2017-01-10-nam-vung-5-khai-niem-sau-xem-nhu-master-react",tags:["javascript","react"],title:"Nắm vững 5 khái niệm sau, xem như master React"}},next:{excerpt:"Khai báo Lexical scoping là gì Một số dạng khai báo Nên và không nên Khai báo Trước đây để khai báo hàm trong javascript Hoặc, tạo một hàm ẩn (anonymous function), sau đó gán hàm này cho biến, key của object Bắt đầu từ ES6 ta có thêm một cách để viết...",html:'<!-- MarkdownTOC -->\n<ul>\n<li>Khai báo</li>\n<li>Lexical scoping là gì</li>\n<li>Một số dạng khai báo</li>\n<li>Nên và không nên</li>\n</ul>\n<!-- /MarkdownTOC -->\n<h1>Khai báo</h1>\n<p>Trước đây để khai báo hàm trong javascript</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">function</span> <span class="token function">name</span><span class="token punctuation">(</span>paramters<span class="token punctuation">)</span><span class="token punctuation">{</span>\n <span class="token comment" spellcheck="true">//body</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>Hoặc, tạo một hàm ẩn (anonymous function), sau đó gán hàm này cho biến, key của object</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">var</span> mystyle <span class="token operator">=</span><span class="token keyword">function</span> <span class="token punctuation">(</span>paramters<span class="token punctuation">)</span><span class="token punctuation">{</span>\n <span class="token comment" spellcheck="true">//body</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>Bắt đầu từ ES6 ta có thêm một cách để viết một hàm không có tên (hàm ẩn), có thể viết hàm trên bằng cách mới</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">var</span> mystyle <span class="token operator">=</span> <span class="token punctuation">(</span>paramters<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n <span class="token comment" spellcheck="true">//body</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>Bỏ từ khóa <code>function</code>, thêm vào <code>=></code>  sau <code>paramater</code>. Sự khác biệt của <em>arrow function</em> là nó <strong>không được phép đặt tên</strong> và là dạng <code>lexical scoping</code></p>\n<h1>Lexical scoping là gì</h1>\n<p>Từ khóa <code>this</code> và <code>argument</code> điều trỏ về đối tượng cha bự nhất. Ví dụ cho dễ hiểu cái nha. Chúng ta có đối tượng <code>timer</code> với biến đếm <code>second</code> và phương thức <code>start</code>. Khi chạy <code>timer</code> một vài giây, log giá trị <code>seconds</code> hiện tại</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">var</span> timer <span class="token operator">=</span> <span class="token punctuation">{</span>\n seconds<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n   <span class="token keyword">this</span><span class="token punctuation">.</span>seconds<span class="token operator">++</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>\n <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\ntimer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token function">setTimer</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>timer<span class="token punctuation">.</span>seconds<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">3500</span><span class="token punctuation">)</span>\n<span class="token comment" spellcheck="true">// result -3</span>\n</code></pre>\n      </div>\n<p>Nếu hàm truyền vào cho <code>setInterval</code> là một hàm bình thường nó sẽ không hiểu <code>this.second</code> là thằng nào, ta phải khai báo thêm <code>self = this</code> ở trên <em>timer</em>, từ khóa this không còn đi theo ngữ cảnh hiện tại mà nó sẽ tham chiếu lên trên.</p>\n<h1>Một số dạng khai báo</h1>\n<p>Nếu <em>arrow function</em> chỉ chứa một <em>parameter</em> duy nhất, bỏ luôn dấu `()<code></code> viết gì cho dễ đọc</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">var</span> double <span class="token operator">=</span> value <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n <span class="token keyword">return</span> value <span class="token operator">*</span> <span class="token number">2</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>Với hàm mà return 1 dòng như vậy có thể rút ngắn lại</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">var</span> double <span class="token operator">=</span> value <span class="token operator">=</span><span class="token operator">></span> value <span class="token operator">*</span> <span class="token number">2</span>\n</code></pre>\n      </div>\n<h1>Nên và không nên</h1>\n<p>ES6 không có nghĩa là cái nào cũng tốt hơn ES5, <em>arrow function</em> có trường hợp không nên sử dụng. Ví dụ nếu hàm lớn với vài chục dòng code, thay thế bằng <em>arrow function</em> là điều không nên làm, nên nhớ <em>arrow function</em> không được phép có tên, trong mọi trường hợp hàm có tên đi kèm luôn dễ maintain hơn.</p>\n<p>Arrow function tuyệt vời khi cần một hàm không tên thực hiện một vài thao tác đơn giản. Thí dụ kết hợp với những hàm như .map, .filter, .reduce</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>value <span class="token operator">=</span><span class="token operator">></span> value <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span> value <span class="token operator">=</span><span class="token operator">></span> value <span class="token operator">></span> <span class="token number">2</span> <span class="token punctuation">)</span>\n<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span> value <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> value <span class="token punctuation">)</span> <span class="token punctuation">)</span>\n</code></pre>\n      </div>',
id:"C:/anluu/luckyluu/posts/2016-11-16-chuong-2-es6-can-ban-arrow-function/index.md absPath of file >>> MarkdownRemark",timeToRead:2,frontmatter:{date:"2016-11-16T13:35:13.234Z",path:"/2016-11-16-chuong-2-es6-can-ban-arrow-function",tags:["javascript"],title:"Hồi 2: ES6 căn bản - Arrow Function"}}}}}});
//# sourceMappingURL=path---2016-11-17-phan-3-es-6-can-ban-assignment-destructuring-41b663c9d6659c1fc0e4.js.map