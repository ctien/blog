{"version":3,"sources":["webpack:///path---2017-01-10-nam-vung-5-khai-niem-sau-xem-nhu-master-react-36df03ad123cc80e0f61.js","webpack:///./.cache/json/2017-01-10-nam-vung-5-khai-niem-sau-xem-nhu-master-react.json"],"names":["webpackJsonp","./node_modules/json-loader/index.js!./.cache/json/2017-01-10-nam-vung-5-khai-niem-sau-xem-nhu-master-react.json","module","exports","data","markdownRemark","html","frontmatter","date","path","tags","title","desc","pathContext","prev","excerpt","id","timeToRead","next"],"mappings":"AAAAA,cAAc,KAERC,kHACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,4vVAA20UC,aAAiwBC,KAAA,mBAAAC,KAAA,4DAAAC,MAAA,sBAAAC,MAAA,iDAAAC,KAAA,0NAAoZC,aAAgBC,MAAQC,QAAA,+PAAAT,KAAA,41BAAAU,GAAA,gIAAAC,WAAA,EAAAV,aAAixCC,KAAA,2BAAAC,KAAA,6DAAAC,MAAA,cAAAC,MAAA,oDAAuLO,MAASH,QAAA,+PAAAT,KAAA,8oeAAmreU,GAAA,sGAAAC,WAAA,EAAAV,aAA06BC,KAAA,2BAAAC,KAAA,mCAAAC,MAAA,cAAAC,MAAA","file":"path---2017-01-10-nam-vung-5-khai-niem-sau-xem-nhu-master-react-36df03ad123cc80e0f61.js","sourcesContent":["webpackJsonp([25],{\n\n/***/ \"./node_modules/json-loader/index.js!./.cache/json/2017-01-10-nam-vung-5-khai-niem-sau-xem-nhu-master-react.json\":\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p>Sạo vậy thôi chứ làm gì mà trở thành master ngay lập tức được, lý lẽ bình thường muốn master bất cứ thứ gì cũng cần mồ hôi và nước mắt. Hiểu được 5 khái niệm được cho là căn cơ nhất này sẽ giúp bạn dễ xa lầy hơn.</p>\\n<ol>\\n<li>Component</li>\\n<li>JSX</li>\\n<li>Props &#x26; State</li>\\n<li>Component API</li>\\n<li>Component Type</li>\\n</ol>\\n<h1>Khái niệm #1: React component hoạt động ra sau</h1>\\n<p>Điều đầu tiên cần nằm lòng là tất cả những gì React xây dựng điều xoay quanh component. Thế thì component là gì. Ví dụ tuyệt vời nhất là select HTML element, select có thể xem như một component được định nghĩa sẵn với kiểu hiện thị riêng của nó (màu xám, có label, nút tam giác nằm ở góc phải) và tự nó xử lý tác vụ đóng mở mấy cái option</p>\\n<p><img src=\\\"https://img.readitlater.com/i/cdn-images-1.medium.com/max/800/1*dPxDcCmCItzEyQuPpHOS3Q/RS/w704.gif\\\"></p>\\n<p>Giờ tưởng tượng là chúng ta sẽ tự build ra một cái component tương tự như select với giao diện và event chúng ta tự kiểm soát</p>\\n<p><img src=\\\"https://img.readitlater.com/i/cdn-images-1.medium.com/max/800/1*AZ2IbiM4WskvgvIyhq6qPA/RS/w704.gif\\\"></p>\\n<p>Đó là những gì React giúp chúng ta làm, xây dựng một đối tượng không chỉ output ra một HTML templete thông thường,  chúng ta sẽ viết ra những function để control những event trên cái template đó</p>\\n<p>Để tạo ra một React component căn bản nhất</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">MyComponent</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>component</span> <span class=\\\"token punctuation\\\">{</span>\\n <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> Hello World<span class=\\\"token operator\\\">!</span><span class=\\\"token punctuation\\\">;</span>\\n <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h1>Khái niệm #2: JSX chạy thế nào</h1>\\n<p>Có thể thấy là với cách tạo ra một component như React thì javascript và HTML sống chung một nhà. Vũ khí bí mật của React để làm được chuyện \\\"what-the-heck\\\" đó là JSX language.</p>\\n<p>Ngày xưa, đi học được dạy phải tách biệt HTML ra một file và JS ra một file, thời gian sau này anh em làm frontend thấy làm gom như vậy làm thấy nhanh hơn, mà cũng không quá evil như mấy ông thầy dạy</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">MyComponent</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>component</span> <span class=\\\"token punctuation\\\">{</span>\\n <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\nreturnToday is<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Data</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>Để ý cái cách ta chèn code javascript ở trong HTML bằng cách đưa nào vào bên trong dấu {}, đó là cách viết JSX</p>\\n<h1>Khái niệm 3: Props và State</h1>\\n<p>Bạn chắc chắn biết đến attribute href cho thẻ a , chưa biết? về lại w3com học nhé. Với một component của React những attribute như vậy được gọi là props . Props là cách mà các component tương tác lẫn nhau</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">ParentComponent</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span><span class=\\\"token punctuation\\\">{</span>\\n <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token operator\\\">&lt;</span>ChildComponent message<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"Hello World\\\"</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">;</span>\\n <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">ChildComponent</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span><span class=\\\"token punctuation\\\">{</span>\\n <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> And then I said<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"{this.props.message}\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>Dữ liệu trong component có thể truyền từ cha xuống con và không có ngược lại</p>\\n<p>Đôi khi dữ liệu sẽ không phải được truyền từ cha xuống con, mà nó chỉ là một dữ liệu tạm thời nào đó, ví dụ như giá trị input của user chẳng hạn, lúc đó nó được gọi là state</p>\\n<p>Cho dễ hình dung, nếu xem cái bảng nam châm là một component thì props là nút gạt xóa, state là những gì viết trên bảng</p>\\n<p><img src=\\\"https://img.readitlater.com/i/cdn-images-1.medium.com/max/1000/1*aYxNrkwkAPwIoGc0-3k_Ug/RS/w704.jpeg\\\"></p>\\n<p>Bên trong một component, state được quản lý bằng hàm setState thường được viết lòng trong một hàm xử lý sự kiện</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">MyComponent</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span> <span class=\\\"token punctuation\\\">{</span>\\n handleClick <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>e<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>setState <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>clicked<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n <span class=\\\"token punctuation\\\">}</span>\\n <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token operator\\\">&lt;</span>a href<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"#\\\"</span> onClick<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>handleClick<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span> Click Me<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>a<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">;</span>\\n <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h1>Khái niệm #4: Component API</h1>\\n<p>Những hàm như render và setState là một phần của component API, ngoài ra nó còn một số hàm hữu ích khác nữa như constructor để khởi tạo state và kích hoạt các phương thức, một số hàm trigger trước khi component được load, sau khi load, sau khi unmounting. vâng vâng.</p>\\n<p>Thật ra việc master được React phần nhiều là master được việc lập trình và khái niệm để kiến trúc ra một component hơn là một loạt các API được hỗ trợ sẵn, vậy nên phần này kết thúc ở đây.</p>\\n<h1>Khái niệm 5: Component Type</h1>\\n<p>Mấy ví dụ trên, định nghĩa một component được khai báo dạng class</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">MyComponent</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span><span class=\\\"token punctuation\\\">{</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>Giờ thì hãy quên cách viết này đi! Bây giờ ai cũng viết một component ở dạng function component</p>\\n<p>Một functional component là một function nhận một props object như tham số truyền vào và trả về một đống HTML lằn xà ngoằn. Y hệt như cách viết template kinh điển, khác biệt cơ bản là ở chổ mình có thể xài JavaScript bất cứ chổ nào khi cần</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> myComponent <span class=\\\"token operator\\\">=</span> props <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> Hello <span class=\\\"token punctuation\\\">{</span>props<span class=\\\"token punctuation\\\">.</span>name<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> Today is <span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Date</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>Viết cách này có một hậu quả là mình không thể access được phương thức của component, trên thực tế việc này không ảnh hưởng gì làm vì phần lớn trường hợp ta không dùng tới.</p>\\n<p>Và như vậy component này sẽ không có phương thức setState , không có state luôn, người ta còn gọi là stateless functional component.</p>\\n<p>Cách viết này rất là gọn gàng, phù hợp cho những trường component đơn giản, nên áp dụng khi có thể.</p>\\n<p>Nguồn</p>\\n<blockquote>\\n<blockquote>\\n<p><a href=\\\"https://medium.freecodecamp.com/the-5-things-you-need-to-know-to-understand-react-a1dbd5d114a3\\\">https://medium.freecodecamp.com/the-5-things-you-need-to-know-to-understand-react-a1dbd5d114a3</a></p>\\n</blockquote>\\n</blockquote>\",\"frontmatter\":{\"date\":\"January 10, 2017\",\"path\":\"/2017-01-10-nam-vung-5-khai-niem-sau-xem-nhu-master-react\",\"tags\":[\"javascript\",\"react\"],\"title\":\"Nắm vững 5 khái niệm sau, xem như master React\",\"desc\":\"Sạo vậy thôi chứ làm gì mà trở thành master ngay lập tức được, lý lẽ bình thường muốn master bất cứ thứ gì cũng cần mồ hôi và nước mắt. Hiểu được 5 khái niệm được cho là căn cơ nhất này sẽ giúp bạn dễ xa lầy hơn.\"}}},\"pathContext\":{\"prev\":{\"excerpt\":\"Làm front end được kha khá năm, đứng trung gian giữa anh developer và anh designer, được tiếp xúc với rất nhiều designer từ cao cấp tới mới ra trường, mình có thể khẳng định là những ảnh designer dù là tự học hay được đào tạo bài bảng qua trường lớp...\",\"html\":\"<p>Làm front end được kha khá năm, đứng trung gian giữa anh developer và anh designer, được tiếp xúc với rất nhiều designer từ cao cấp tới mới ra trường, mình có thể khẳng định là những ảnh designer dù là tự học hay được đào tạo bài bảng qua trường lớp, mỗi anh điều có một kiểu làm việc rất riêng, trong giới designer, đặc biệt là web design, sẽ chẳng anh nào đi theo một cái guide chung nào cả, khác hẳng với developer, nơi mà mọi thứ luôn được chuẩn hóa từng ngày, một anh developer mới vào công ty được thẩy vô trong một cái dự án bự tổ chảng, sau vài ngày training những \\\"luật lệ\\\" được đề ra từ lớp người đi trước là ảnh có thể follow theo và bắt đầu làm việc với một cách mượt mà. Ở góc độ của một người đứng giữa, mình luôn cho rằng anh developer luôn luôn là người nên đặt ra các luật lệ mà anh designer phải tuân theo, chứ không phải ngược lại.</p>\",\"id\":\"C:/anluu/luckyluu/posts/2017-03-06-thoi-dai-cua-pixel-effect-design-da-het-tu-lau/index.md absPath of file >>> MarkdownRemark\",\"timeToRead\":1,\"frontmatter\":{\"date\":\"2017-03-06T13:35:13.234Z\",\"path\":\"/2017-03-06-thoi-dai-cua-pixel-effect-design-da-het-tu-lau\",\"tags\":[\"javascript\"],\"title\":\"Thời đại của Pixel Perfect Design đã hết từ lâu\"}},\"next\":{\"excerpt\":\"Một object trong javascript được khai như sau Những nâng cấp cho Object trong ES6 Cách viết tắt thay vì Key: Value Bình thường thì khai báo dạng giá trị của một object bằng  , bây giờ không cần   nữa, nếu   tham chiếu tới một biến hoặc hàm, nói cách...\",\"html\":\"<p>Một object trong javascript được khai như sau</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> book <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n title<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'ES6'</span><span class=\\\"token punctuation\\\">,</span>\\n author<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'anluu'</span><span class=\\\"token punctuation\\\">,</span>\\n publisher<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'luckyluu'</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>Những nâng cấp cho Object trong ES6</p>\\n<h1>Cách viết tắt thay vì Key: Value</h1>\\n<p>Bình thường thì khai báo dạng giá trị của một object bằng <code>key: value</code>, bây giờ không cần <code>value</code> nữa, nếu <code>key</code> tham chiếu tới một biến hoặc hàm, nói cách khác là nếu nó cùng tên với hàm hoặc biến được định nghĩa trước đó</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">var</span> listeners <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">listen</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">var</span> api <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>listeners<span class=\\\"token punctuation\\\">,</span> listen<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>object nhìn \\\"sạch sẽ\\\" hơn</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">var</span> store <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">var</span> api <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> getItem<span class=\\\"token punctuation\\\">,</span> setItem<span class=\\\"token punctuation\\\">,</span> clear <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">getItem</span><span class=\\\"token punctuation\\\">(</span>key<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n <span class=\\\"token keyword\\\">return</span> key <span class=\\\"token keyword\\\">in</span> store <span class=\\\"token operator\\\">?</span> store<span class=\\\"token punctuation\\\">[</span>key<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">null</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">setItem</span><span class=\\\"token punctuation\\\">(</span>key<span class=\\\"token punctuation\\\">,</span>value<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n store<span class=\\\"token punctuation\\\">[</span>key<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> value\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">clear</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n store <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h1>Khi key là 1 biến hoặc hàm</h1>\\n<p>Nếu cần khai báo <code>key</code> là một biến, nó không phải là một giá trị định sẵn, với ES5 thì sẽ viết như sau</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">var</span> expertise <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'journalism'</span>\\n<span class=\\\"token keyword\\\">var</span> person <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'Sharon'</span><span class=\\\"token punctuation\\\">,</span>\\n age<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'28'</span>\\n<span class=\\\"token punctuation\\\">}</span>\\nperson<span class=\\\"token punctuation\\\">[</span>expertise<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n years<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span>\\n interests<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'international'</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">'politics'</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">'internet'</span><span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>Với ES6 object key không nhất thiết phải là tên cố định, nó có thể là biến, đặt trong dấu <code>[]</code></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">var</span> expertise <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'journalism'</span>\\n<span class=\\\"token keyword\\\">var</span> person <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'Sharon'</span><span class=\\\"token punctuation\\\">,</span>\\n age<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'28'</span><span class=\\\"token punctuation\\\">,</span>\\n <span class=\\\"token punctuation\\\">[</span>expertise<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n  years<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span>\\n  interests<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'international'</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">'politics'</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">'internet'</span><span class=\\\"token punctuation\\\">]</span>\\n <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p><strong>Lưu ý</strong> không nên kết hợp sử dụng giữa cả 2 cách viết trên cùng lúc, vì sẽ sinh ra lỗi và đọc rất khó hiểu</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">var</span> expertise <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'journalism'</span>\\n<span class=\\\"token keyword\\\">var</span> journalism <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n years<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span>\\n interest<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'international'</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">'politics'</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">'internet'</span><span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">var</span> person <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'Sharon'</span><span class=\\\"token punctuation\\\">,</span>\\n age<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'28'</span><span class=\\\"token punctuation\\\">,</span>\\n <span class=\\\"token punctuation\\\">[</span>expertise<span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>Tình huống thường sử dụng đến computed property name khi muốn thêm một entity vào một object map sử dụng entity.id như là key. Thay vì có câu khai báo thứ 3 để thêm grocery vào groceries map, chúng ta có thể viết khai báo inline nó trong groceries luôn</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">var</span> grocery <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n id<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'bananas'</span><span class=\\\"token punctuation\\\">,</span>\\n name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'Bananas'</span><span class=\\\"token punctuation\\\">,</span>\\n units<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">6</span><span class=\\\"token punctuation\\\">,</span>\\n price<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">,</span>\\n currency<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'USD'</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">var</span> groceries <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n <span class=\\\"token punctuation\\\">[</span>grocery<span class=\\\"token punctuation\\\">.</span>id<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">:</span> grocery\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>Tình huống khác, khi có một hàm nhận một tham số truyền vào để tạo ra một đối tượng mới, đây là cách làm của ES5, tạo một object mới, khai báo các property động dựa vào tham số truyền vào, sau đó trả về object. Ví dụ hàm getEnvelope sẽ trả về type=\\\"error\\\" với description khi có lỗi, type=\\\"success\\\" + description khi mọi thứ ok</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">function</span> getEnvelope <span class=\\\"token punctuation\\\">(</span>type<span class=\\\"token punctuation\\\">,</span> description<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n <span class=\\\"token keyword\\\">var</span> envelope <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  data<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span>\\n <span class=\\\"token punctuation\\\">}</span>\\n envelope<span class=\\\"token punctuation\\\">[</span>type<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> description\\n <span class=\\\"token keyword\\\">return</span> envelope\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>Có thể viết bằng một dòng khai báo với computed property names</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">function</span> getEnvelope <span class=\\\"token punctuation\\\">(</span>type<span class=\\\"token punctuation\\\">,</span> description<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n  data<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">[</span>type<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">:</span> description\\n <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h2>Định nghĩa một phương thức</h2>\\nBình thường để định nghĩa một phương thức trong object\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">var</span> reserver <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">4</span>\\n<span class=\\\"token keyword\\\">var</span> emitter <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n emit<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>evenName<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n\\n <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n <span class=\\\"token keyword\\\">get</span> <span class=\\\"token function\\\">fuel</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> reserver\\n <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n <span class=\\\"token keyword\\\">set</span> <span class=\\\"token function\\\">fuel</span><span class=\\\"token punctuation\\\">(</span>value<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n  reserver <span class=\\\"token operator\\\">=</span> value\\n <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>Hàm <code>set</code> và <code>get</code> thì vẫn giữ như cũ, phương thức có thể khai bảo mà không cần từ khóa <code>function</code></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">var</span> reserver <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">4</span>\\n<span class=\\\"token keyword\\\">var</span> emitter <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n <span class=\\\"token keyword\\\">delete</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n   reserver <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span>\\n <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n <span class=\\\"token keyword\\\">get</span> <span class=\\\"token function\\\">fuel</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> reserver\\n <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n <span class=\\\"token keyword\\\">set</span> <span class=\\\"token function\\\">fuel</span><span class=\\\"token punctuation\\\">(</span>value<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n  reserver <span class=\\\"token operator\\\">=</span> value\\n <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\nemitter<span class=\\\"token punctuation\\\">.</span>fuel <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">10</span>\\nemitter<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">delete</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>Tức nhiên vẫn khai báo phương thức như bình thường được, cách khai bao mới này có vẻ hơi dễ lẫn lộn giữa phương thức và object, tất nhiên đây chỉ là thêm lựa chọn để viết chứ không khuyến khích viết theo kiểu này vì nhìn code không được tường minh.</p>\\n<p>Chương sau, <a href=\\\"https://luckyluu.wordpress.com/2016/11/16/chuong-1-es6-can-ban-phan-2/\\\">Arrow Function</a>, một trong nhưng phương thức mới siêu cool mà bạn sẽ sử dụng rất nhiều.</p>\",\"id\":\"C:/anluu/luckyluu/posts/2016-11-15-chuong-1-es6-can-ban/index.md absPath of file >>> MarkdownRemark\",\"timeToRead\":3,\"frontmatter\":{\"date\":\"2016-12-04T13:35:13.234Z\",\"path\":\"/2016-11-15-chuong-1-es6-can-ban\",\"tags\":[\"javascript\"],\"title\":\"ES6 Căn bản (phần 1) - Những nâng cấp cho Object\"}}}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---2017-01-10-nam-vung-5-khai-niem-sau-xem-nhu-master-react-36df03ad123cc80e0f61.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p>Sạo vậy thôi chứ làm gì mà trở thành master ngay lập tức được, lý lẽ bình thường muốn master bất cứ thứ gì cũng cần mồ hôi và nước mắt. Hiểu được 5 khái niệm được cho là căn cơ nhất này sẽ giúp bạn dễ xa lầy hơn.</p>\\n<ol>\\n<li>Component</li>\\n<li>JSX</li>\\n<li>Props &#x26; State</li>\\n<li>Component API</li>\\n<li>Component Type</li>\\n</ol>\\n<h1>Khái niệm #1: React component hoạt động ra sau</h1>\\n<p>Điều đầu tiên cần nằm lòng là tất cả những gì React xây dựng điều xoay quanh component. Thế thì component là gì. Ví dụ tuyệt vời nhất là select HTML element, select có thể xem như một component được định nghĩa sẵn với kiểu hiện thị riêng của nó (màu xám, có label, nút tam giác nằm ở góc phải) và tự nó xử lý tác vụ đóng mở mấy cái option</p>\\n<p><img src=\\\"https://img.readitlater.com/i/cdn-images-1.medium.com/max/800/1*dPxDcCmCItzEyQuPpHOS3Q/RS/w704.gif\\\"></p>\\n<p>Giờ tưởng tượng là chúng ta sẽ tự build ra một cái component tương tự như select với giao diện và event chúng ta tự kiểm soát</p>\\n<p><img src=\\\"https://img.readitlater.com/i/cdn-images-1.medium.com/max/800/1*AZ2IbiM4WskvgvIyhq6qPA/RS/w704.gif\\\"></p>\\n<p>Đó là những gì React giúp chúng ta làm, xây dựng một đối tượng không chỉ output ra một HTML templete thông thường,  chúng ta sẽ viết ra những function để control những event trên cái template đó</p>\\n<p>Để tạo ra một React component căn bản nhất</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">MyComponent</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>component</span> <span class=\\\"token punctuation\\\">{</span>\\n <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> Hello World<span class=\\\"token operator\\\">!</span><span class=\\\"token punctuation\\\">;</span>\\n <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h1>Khái niệm #2: JSX chạy thế nào</h1>\\n<p>Có thể thấy là với cách tạo ra một component như React thì javascript và HTML sống chung một nhà. Vũ khí bí mật của React để làm được chuyện \\\"what-the-heck\\\" đó là JSX language.</p>\\n<p>Ngày xưa, đi học được dạy phải tách biệt HTML ra một file và JS ra một file, thời gian sau này anh em làm frontend thấy làm gom như vậy làm thấy nhanh hơn, mà cũng không quá evil như mấy ông thầy dạy</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">MyComponent</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>component</span> <span class=\\\"token punctuation\\\">{</span>\\n <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\nreturnToday is<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Data</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>Để ý cái cách ta chèn code javascript ở trong HTML bằng cách đưa nào vào bên trong dấu {}, đó là cách viết JSX</p>\\n<h1>Khái niệm 3: Props và State</h1>\\n<p>Bạn chắc chắn biết đến attribute href cho thẻ a , chưa biết? về lại w3com học nhé. Với một component của React những attribute như vậy được gọi là props . Props là cách mà các component tương tác lẫn nhau</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">ParentComponent</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span><span class=\\\"token punctuation\\\">{</span>\\n <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token operator\\\">&lt;</span>ChildComponent message<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"Hello World\\\"</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">;</span>\\n <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">ChildComponent</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span><span class=\\\"token punctuation\\\">{</span>\\n <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> And then I said<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"{this.props.message}\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>Dữ liệu trong component có thể truyền từ cha xuống con và không có ngược lại</p>\\n<p>Đôi khi dữ liệu sẽ không phải được truyền từ cha xuống con, mà nó chỉ là một dữ liệu tạm thời nào đó, ví dụ như giá trị input của user chẳng hạn, lúc đó nó được gọi là state</p>\\n<p>Cho dễ hình dung, nếu xem cái bảng nam châm là một component thì props là nút gạt xóa, state là những gì viết trên bảng</p>\\n<p><img src=\\\"https://img.readitlater.com/i/cdn-images-1.medium.com/max/1000/1*aYxNrkwkAPwIoGc0-3k_Ug/RS/w704.jpeg\\\"></p>\\n<p>Bên trong một component, state được quản lý bằng hàm setState thường được viết lòng trong một hàm xử lý sự kiện</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">MyComponent</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span> <span class=\\\"token punctuation\\\">{</span>\\n handleClick <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>e<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>setState <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>clicked<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n <span class=\\\"token punctuation\\\">}</span>\\n <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token operator\\\">&lt;</span>a href<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"#\\\"</span> onClick<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>handleClick<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span> Click Me<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>a<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">;</span>\\n <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h1>Khái niệm #4: Component API</h1>\\n<p>Những hàm như render và setState là một phần của component API, ngoài ra nó còn một số hàm hữu ích khác nữa như constructor để khởi tạo state và kích hoạt các phương thức, một số hàm trigger trước khi component được load, sau khi load, sau khi unmounting. vâng vâng.</p>\\n<p>Thật ra việc master được React phần nhiều là master được việc lập trình và khái niệm để kiến trúc ra một component hơn là một loạt các API được hỗ trợ sẵn, vậy nên phần này kết thúc ở đây.</p>\\n<h1>Khái niệm 5: Component Type</h1>\\n<p>Mấy ví dụ trên, định nghĩa một component được khai báo dạng class</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">MyComponent</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span><span class=\\\"token punctuation\\\">{</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>Giờ thì hãy quên cách viết này đi! Bây giờ ai cũng viết một component ở dạng function component</p>\\n<p>Một functional component là một function nhận một props object như tham số truyền vào và trả về một đống HTML lằn xà ngoằn. Y hệt như cách viết template kinh điển, khác biệt cơ bản là ở chổ mình có thể xài JavaScript bất cứ chổ nào khi cần</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> myComponent <span class=\\\"token operator\\\">=</span> props <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> Hello <span class=\\\"token punctuation\\\">{</span>props<span class=\\\"token punctuation\\\">.</span>name<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> Today is <span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Date</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>Viết cách này có một hậu quả là mình không thể access được phương thức của component, trên thực tế việc này không ảnh hưởng gì làm vì phần lớn trường hợp ta không dùng tới.</p>\\n<p>Và như vậy component này sẽ không có phương thức setState , không có state luôn, người ta còn gọi là stateless functional component.</p>\\n<p>Cách viết này rất là gọn gàng, phù hợp cho những trường component đơn giản, nên áp dụng khi có thể.</p>\\n<p>Nguồn</p>\\n<blockquote>\\n<blockquote>\\n<p><a href=\\\"https://medium.freecodecamp.com/the-5-things-you-need-to-know-to-understand-react-a1dbd5d114a3\\\">https://medium.freecodecamp.com/the-5-things-you-need-to-know-to-understand-react-a1dbd5d114a3</a></p>\\n</blockquote>\\n</blockquote>\",\"frontmatter\":{\"date\":\"January 10, 2017\",\"path\":\"/2017-01-10-nam-vung-5-khai-niem-sau-xem-nhu-master-react\",\"tags\":[\"javascript\",\"react\"],\"title\":\"Nắm vững 5 khái niệm sau, xem như master React\",\"desc\":\"Sạo vậy thôi chứ làm gì mà trở thành master ngay lập tức được, lý lẽ bình thường muốn master bất cứ thứ gì cũng cần mồ hôi và nước mắt. Hiểu được 5 khái niệm được cho là căn cơ nhất này sẽ giúp bạn dễ xa lầy hơn.\"}}},\"pathContext\":{\"prev\":{\"excerpt\":\"Làm front end được kha khá năm, đứng trung gian giữa anh developer và anh designer, được tiếp xúc với rất nhiều designer từ cao cấp tới mới ra trường, mình có thể khẳng định là những ảnh designer dù là tự học hay được đào tạo bài bảng qua trường lớp...\",\"html\":\"<p>Làm front end được kha khá năm, đứng trung gian giữa anh developer và anh designer, được tiếp xúc với rất nhiều designer từ cao cấp tới mới ra trường, mình có thể khẳng định là những ảnh designer dù là tự học hay được đào tạo bài bảng qua trường lớp, mỗi anh điều có một kiểu làm việc rất riêng, trong giới designer, đặc biệt là web design, sẽ chẳng anh nào đi theo một cái guide chung nào cả, khác hẳng với developer, nơi mà mọi thứ luôn được chuẩn hóa từng ngày, một anh developer mới vào công ty được thẩy vô trong một cái dự án bự tổ chảng, sau vài ngày training những \\\"luật lệ\\\" được đề ra từ lớp người đi trước là ảnh có thể follow theo và bắt đầu làm việc với một cách mượt mà. Ở góc độ của một người đứng giữa, mình luôn cho rằng anh developer luôn luôn là người nên đặt ra các luật lệ mà anh designer phải tuân theo, chứ không phải ngược lại.</p>\",\"id\":\"C:/anluu/luckyluu/posts/2017-03-06-thoi-dai-cua-pixel-effect-design-da-het-tu-lau/index.md absPath of file >>> MarkdownRemark\",\"timeToRead\":1,\"frontmatter\":{\"date\":\"2017-03-06T13:35:13.234Z\",\"path\":\"/2017-03-06-thoi-dai-cua-pixel-effect-design-da-het-tu-lau\",\"tags\":[\"javascript\"],\"title\":\"Thời đại của Pixel Perfect Design đã hết từ lâu\"}},\"next\":{\"excerpt\":\"Một object trong javascript được khai như sau Những nâng cấp cho Object trong ES6 Cách viết tắt thay vì Key: Value Bình thường thì khai báo dạng giá trị của một object bằng  , bây giờ không cần   nữa, nếu   tham chiếu tới một biến hoặc hàm, nói cách...\",\"html\":\"<p>Một object trong javascript được khai như sau</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> book <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n title<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'ES6'</span><span class=\\\"token punctuation\\\">,</span>\\n author<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'anluu'</span><span class=\\\"token punctuation\\\">,</span>\\n publisher<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'luckyluu'</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>Những nâng cấp cho Object trong ES6</p>\\n<h1>Cách viết tắt thay vì Key: Value</h1>\\n<p>Bình thường thì khai báo dạng giá trị của một object bằng <code>key: value</code>, bây giờ không cần <code>value</code> nữa, nếu <code>key</code> tham chiếu tới một biến hoặc hàm, nói cách khác là nếu nó cùng tên với hàm hoặc biến được định nghĩa trước đó</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">var</span> listeners <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">listen</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">var</span> api <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>listeners<span class=\\\"token punctuation\\\">,</span> listen<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>object nhìn \\\"sạch sẽ\\\" hơn</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">var</span> store <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">var</span> api <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> getItem<span class=\\\"token punctuation\\\">,</span> setItem<span class=\\\"token punctuation\\\">,</span> clear <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">getItem</span><span class=\\\"token punctuation\\\">(</span>key<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n <span class=\\\"token keyword\\\">return</span> key <span class=\\\"token keyword\\\">in</span> store <span class=\\\"token operator\\\">?</span> store<span class=\\\"token punctuation\\\">[</span>key<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">null</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">setItem</span><span class=\\\"token punctuation\\\">(</span>key<span class=\\\"token punctuation\\\">,</span>value<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n store<span class=\\\"token punctuation\\\">[</span>key<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> value\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">clear</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n store <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h1>Khi key là 1 biến hoặc hàm</h1>\\n<p>Nếu cần khai báo <code>key</code> là một biến, nó không phải là một giá trị định sẵn, với ES5 thì sẽ viết như sau</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">var</span> expertise <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'journalism'</span>\\n<span class=\\\"token keyword\\\">var</span> person <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'Sharon'</span><span class=\\\"token punctuation\\\">,</span>\\n age<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'28'</span>\\n<span class=\\\"token punctuation\\\">}</span>\\nperson<span class=\\\"token punctuation\\\">[</span>expertise<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n years<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span>\\n interests<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'international'</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">'politics'</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">'internet'</span><span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>Với ES6 object key không nhất thiết phải là tên cố định, nó có thể là biến, đặt trong dấu <code>[]</code></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">var</span> expertise <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'journalism'</span>\\n<span class=\\\"token keyword\\\">var</span> person <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'Sharon'</span><span class=\\\"token punctuation\\\">,</span>\\n age<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'28'</span><span class=\\\"token punctuation\\\">,</span>\\n <span class=\\\"token punctuation\\\">[</span>expertise<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n  years<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span>\\n  interests<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'international'</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">'politics'</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">'internet'</span><span class=\\\"token punctuation\\\">]</span>\\n <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p><strong>Lưu ý</strong> không nên kết hợp sử dụng giữa cả 2 cách viết trên cùng lúc, vì sẽ sinh ra lỗi và đọc rất khó hiểu</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">var</span> expertise <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'journalism'</span>\\n<span class=\\\"token keyword\\\">var</span> journalism <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n years<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span>\\n interest<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'international'</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">'politics'</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">'internet'</span><span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">var</span> person <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'Sharon'</span><span class=\\\"token punctuation\\\">,</span>\\n age<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'28'</span><span class=\\\"token punctuation\\\">,</span>\\n <span class=\\\"token punctuation\\\">[</span>expertise<span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>Tình huống thường sử dụng đến computed property name khi muốn thêm một entity vào một object map sử dụng entity.id như là key. Thay vì có câu khai báo thứ 3 để thêm grocery vào groceries map, chúng ta có thể viết khai báo inline nó trong groceries luôn</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">var</span> grocery <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n id<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'bananas'</span><span class=\\\"token punctuation\\\">,</span>\\n name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'Bananas'</span><span class=\\\"token punctuation\\\">,</span>\\n units<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">6</span><span class=\\\"token punctuation\\\">,</span>\\n price<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">,</span>\\n currency<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'USD'</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">var</span> groceries <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n <span class=\\\"token punctuation\\\">[</span>grocery<span class=\\\"token punctuation\\\">.</span>id<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">:</span> grocery\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>Tình huống khác, khi có một hàm nhận một tham số truyền vào để tạo ra một đối tượng mới, đây là cách làm của ES5, tạo một object mới, khai báo các property động dựa vào tham số truyền vào, sau đó trả về object. Ví dụ hàm getEnvelope sẽ trả về type=\\\"error\\\" với description khi có lỗi, type=\\\"success\\\" + description khi mọi thứ ok</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">function</span> getEnvelope <span class=\\\"token punctuation\\\">(</span>type<span class=\\\"token punctuation\\\">,</span> description<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n <span class=\\\"token keyword\\\">var</span> envelope <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  data<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span>\\n <span class=\\\"token punctuation\\\">}</span>\\n envelope<span class=\\\"token punctuation\\\">[</span>type<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> description\\n <span class=\\\"token keyword\\\">return</span> envelope\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>Có thể viết bằng một dòng khai báo với computed property names</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">function</span> getEnvelope <span class=\\\"token punctuation\\\">(</span>type<span class=\\\"token punctuation\\\">,</span> description<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n  data<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">[</span>type<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">:</span> description\\n <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h2>Định nghĩa một phương thức</h2>\\nBình thường để định nghĩa một phương thức trong object\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">var</span> reserver <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">4</span>\\n<span class=\\\"token keyword\\\">var</span> emitter <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n emit<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>evenName<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n\\n <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n <span class=\\\"token keyword\\\">get</span> <span class=\\\"token function\\\">fuel</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> reserver\\n <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n <span class=\\\"token keyword\\\">set</span> <span class=\\\"token function\\\">fuel</span><span class=\\\"token punctuation\\\">(</span>value<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n  reserver <span class=\\\"token operator\\\">=</span> value\\n <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>Hàm <code>set</code> và <code>get</code> thì vẫn giữ như cũ, phương thức có thể khai bảo mà không cần từ khóa <code>function</code></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">var</span> reserver <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">4</span>\\n<span class=\\\"token keyword\\\">var</span> emitter <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n <span class=\\\"token keyword\\\">delete</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n   reserver <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span>\\n <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n <span class=\\\"token keyword\\\">get</span> <span class=\\\"token function\\\">fuel</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> reserver\\n <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n <span class=\\\"token keyword\\\">set</span> <span class=\\\"token function\\\">fuel</span><span class=\\\"token punctuation\\\">(</span>value<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n  reserver <span class=\\\"token operator\\\">=</span> value\\n <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\nemitter<span class=\\\"token punctuation\\\">.</span>fuel <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">10</span>\\nemitter<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">delete</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>Tức nhiên vẫn khai báo phương thức như bình thường được, cách khai bao mới này có vẻ hơi dễ lẫn lộn giữa phương thức và object, tất nhiên đây chỉ là thêm lựa chọn để viết chứ không khuyến khích viết theo kiểu này vì nhìn code không được tường minh.</p>\\n<p>Chương sau, <a href=\\\"https://luckyluu.wordpress.com/2016/11/16/chuong-1-es6-can-ban-phan-2/\\\">Arrow Function</a>, một trong nhưng phương thức mới siêu cool mà bạn sẽ sử dụng rất nhiều.</p>\",\"id\":\"C:/anluu/luckyluu/posts/2016-11-15-chuong-1-es6-can-ban/index.md absPath of file >>> MarkdownRemark\",\"timeToRead\":3,\"frontmatter\":{\"date\":\"2016-12-04T13:35:13.234Z\",\"path\":\"/2016-11-15-chuong-1-es6-can-ban\",\"tags\":[\"javascript\"],\"title\":\"ES6 Căn bản (phần 1) - Những nâng cấp cho Object\"}}}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/2017-01-10-nam-vung-5-khai-niem-sau-xem-nhu-master-react.json\n// module id = ./node_modules/json-loader/index.js!./.cache/json/2017-01-10-nam-vung-5-khai-niem-sau-xem-nhu-master-react.json\n// module chunks = 25"],"sourceRoot":""}