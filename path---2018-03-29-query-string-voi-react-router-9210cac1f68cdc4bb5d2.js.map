{"version":3,"sources":["webpack:///path---2018-03-29-query-string-voi-react-router-9210cac1f68cdc4bb5d2.js","webpack:///./.cache/json/2018-03-29-query-string-voi-react-router.json"],"names":["webpackJsonp","./node_modules/json-loader/index.js!./.cache/json/2018-03-29-query-string-voi-react-router.json","module","exports","data","markdownRemark","html","frontmatter","date","path","tags","title","desc","pathContext","prev","excerpt","id","timeToRead","next"],"mappings":"AAAAA,cAAc,KAERC,kGACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,g7HAA2iIC,aAAmDC,KAAA,iBAAAC,KAAA,4CAAAC,MAAA,sBAAAC,MAAA,gCAAAC,KAAA,6DAAoNC,aAAgBC,MAAQC,QAAA,8PAAAT,KAAA,mpWAAyiXU,GAAA,yGAAAC,WAAA,EAAAV,aAA+dC,KAAA,2BAAAC,KAAA,sCAAAC,MAAA,sBAAAC,MAAA,4BAAgJO,MAASH,QAAA,+PAAAT,KAAA,yrHAAAU,GAAA,sHAAAC,WAAA,EAAAV,aAA8qIC,KAAA,2BAAAC,KAAA,mDAAAC,MAAA,cAAAC,MAAA","file":"path---2018-03-29-query-string-voi-react-router-9210cac1f68cdc4bb5d2.js","sourcesContent":["webpackJsonp([56],{\n\n/***/ \"./node_modules/json-loader/index.js!./.cache/json/2018-03-29-query-string-voi-react-router.json\":\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p>Khi làm web, nếu chúng ta muốn truyền một thông tin gì đó quá URL, ta sẽ sử dụng query string, cái này ai làm web chắc cũng biết</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">http://luubinhan.github.io/list?sortBy=date&amp;sortOrder=desc</code></pre>\\n      </div>\\n<p>Cái đoạn sau dấu chấm hỏi gọi là query string <code class=\\\"language-text\\\">sortBy=date&amp;sortOrder=desc</code></p>\\n<p>Để tạo ra một đoạn <em>query string</em> như vậy ta sẽ sử dụng component <code class=\\\"language-text\\\">Link</code> của <em>react-router</em></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-jsx\\\"><code class=\\\"language-jsx\\\"><span class=\\\"token keyword\\\">let</span> queryParameters <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n    sortBy<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'date'</span><span class=\\\"token punctuation\\\">,</span>\\n    sortOrder<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'desc'</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>Link</span>\\n      <span class=\\\"token attr-name\\\">to</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token script-punctuation punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">{</span>\\n        pathname<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'/list'</span><span class=\\\"token punctuation\\\">,</span>\\n        query<span class=\\\"token punctuation\\\">:</span> queryParameters\\n      <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">}</span></span>\\n  <span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token constant\\\">CLICK</span> <span class=\\\"token constant\\\">ME</span><span class=\\\"token operator\\\">!</span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>Link</span><span class=\\\"token punctuation\\\">></span></span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>Nếu ta thiết đặt Route cho đường path <code class=\\\"language-text\\\">list</code> đến <code class=\\\"language-text\\\">ListComponent</code></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-jsx\\\"><code class=\\\"language-jsx\\\"><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>Route</span> <span class=\\\"token attr-name\\\">path</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>list<span class=\\\"token punctuation\\\">\\\"</span></span> <span class=\\\"token attr-name\\\">component</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token script-punctuation punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span>ListComponent<span class=\\\"token punctuation\\\">}</span></span> <span class=\\\"token punctuation\\\">/></span></span></code></pre>\\n      </div>\\n<p>thì bên trong <code class=\\\"language-text\\\">ListComponent</code> ta có thể truy xuất đến giá trị của query string này bằng <code class=\\\"language-text\\\">props.location</code></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-jsx\\\"><code class=\\\"language-jsx\\\"><span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span>location<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">;</span>\\n\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>location<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token comment\\\">// { sortBy: 'date', sortOrder: 'desc' }</span></code></pre>\\n      </div>\",\"frontmatter\":{\"date\":\"March 29, 2018\",\"path\":\"/2018-03-29-query-string-voi-react-router\",\"tags\":[\"javascript\",\"react\"],\"title\":\"Query String với React Router\",\"desc\":\"Cách sử dụng query string với React Router siêu căn bản\"}}},\"pathContext\":{\"prev\":{\"excerpt\":\"Xéeeeeeeeeet cái hàm sau Gọi một hàm A hàm A trả về Promise, thì hàm A là dạng hàm blocking hàm   là một hàm  . Dòng  A  sẽ đợi đến khi chạy xong hàm  . Hàm gọi là  blocking  khi mà khi chạy hàm này mấy thằng khác không chạy đồng thời với nó, ngược...\",\"html\":\"<p>Xéeeeeeeeeet cái hàm sau</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">asyncFunc</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Promise</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>resolve<span class=\\\"token punctuation\\\">,</span> reject<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'DONE'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">100</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token function\\\">asyncFunc</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>x <span class=\\\"token operator\\\">=></span> console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Result: '</span> <span class=\\\"token operator\\\">+</span> x<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// kết quả in ra</span>\\n<span class=\\\"token comment\\\">// Result: DONE</span></code></pre>\\n      </div>\\n<h2>Gọi một hàm A hàm A trả về Promise, thì hàm A là dạng hàm blocking</h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">asynFunc</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Promise</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>resolve<span class=\\\"token punctuation\\\">,</span> reject<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'DONE'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">100</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">async</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">main</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> x <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">await</span> <span class=\\\"token function\\\">asyncFunc</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// A</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Result: '</span> <span class=\\\"token operator\\\">+</span> x<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token comment\\\">// tương tự như</span>\\n    <span class=\\\"token comment\\\">// asyncFunc().then(x => console.log('Result: ' + x))</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token function\\\">main</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>hàm <code class=\\\"language-text\\\">main</code> là một hàm <code class=\\\"language-text\\\">async</code>. Dòng <em>A</em> sẽ đợi đến khi chạy xong hàm <code class=\\\"language-text\\\">asyncFunc()</code>.</p>\\n<p>Hàm gọi là <em>blocking</em> khi mà khi chạy hàm này mấy thằng khác không chạy đồng thời với nó, ngược lại <em>non-blocking</em> là hàm mà không can thiệp việc các hàm khác chạy cùng lúc với nó</p>\\n<h2><code class=\\\"language-text\\\">Promise</code> là một container để cưu mang giá trị trả về từ một <code class=\\\"language-text\\\">asynchronously</code></h2>\\n<p>Nếu hàm trả về <code class=\\\"language-text\\\">Promise</code> thì cái <code class=\\\"language-text\\\">Promise</code> này giống như một cái thùng chứa, hàm thực thi bên trong sẽ quăng kết quả trả về vào đó. Mô phỏng việc này bằng một <code class=\\\"language-text\\\">Array</code></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">asyncFunc</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> blank <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> blank<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'DONE'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">100</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">return</span> blank<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">const</span> blank <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">asyncFunc</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// đợi đến khi giá trị trả về được fill</span>\\n<span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> x <span class=\\\"token operator\\\">=</span> blank<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//A</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Result: '</span> <span class=\\\"token operator\\\">+</span> x<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">200</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>Tất nhiên với một <code class=\\\"language-text\\\">Promise</code> thực thụ không thể truy cập giá trị như dòng <em>A</em> (blank[0]), mà chúng ta sử dụng hàm <code class=\\\"language-text\\\">then()</code> và một <em>callback</em></p>\\n<h2><code class=\\\"language-text\\\">Promise</code> là một đối tượng tạo ra sự kiện</h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">asyncFunc</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> eventEmitter <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> success<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">//A</span>\\n        <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">const</span> handler <span class=\\\"token keyword\\\">of</span> eventEmitter<span class=\\\"token punctuation\\\">.</span>success<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token function\\\">handler</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'DONE'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">100</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">return</span> eventEmitter<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token function\\\">asyncFunc</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>success<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span>x <span class=\\\"token operator\\\">=></span> console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Result '</span> <span class=\\\"token operator\\\">+</span> x<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//B</span></code></pre>\\n      </div>\\n<p>Dòng <em>B</em> đăng ký lắng nghe sự kiện sau khi gọi hàm <code class=\\\"language-text\\\">asyncFunc()</code>. Kết quả trả về của <code class=\\\"language-text\\\">Promise</code> sẽ là một chuỗi event sau khi thực thi kèm với giá trị gì đấy ứng với từng event.</p>\",\"id\":\"E:/anluu/luckyluu/posts/2018-04-03-ba-cach-de-hieu-promise/index.md absPath of file >>> MarkdownRemark\",\"timeToRead\":2,\"frontmatter\":{\"date\":\"2018-04-03T13:35:13.234Z\",\"path\":\"/2018-04-03-ba-cach-de-hieu-promise\",\"tags\":[\"javascript\",\"react\"],\"title\":\"Ba cách để hiểu Promise\"}},\"next\":{\"excerpt\":\"Kéo thả các Element Bên trong tab Elements có thể kéo các element HTML và thả nó vào vị trí mới Reference đến element đang chọn trong console Để reference đến 1 element đang được chọn, gõ  , nếu đang load jquery thì có thể dùng  Gọi lại giá trị tính...\",\"html\":\"<h2>Kéo thả các Element</h2>\\n<p>Bên trong tab Elements có thể kéo các element HTML và thả nó vào vị trí mới</p>\\n<p><img src=\\\"https://flaviocopes.com/chrome-devtools-tips/drag-and-drop.gif\\\" alt=\\\"Kéo thả các Element\\\"></p>\\n<h2>Reference đến element đang chọn trong console</h2>\\n<p>Để reference đến 1 element đang được chọn, gõ <code class=\\\"language-text\\\">$0</code>, nếu đang load jquery thì có thể dùng <code class=\\\"language-text\\\">$($0)</code></p>\\n<p><img src=\\\"https://flaviocopes.com/chrome-devtools-tips/reference-elements.gif\\\" alt=\\\"Reference đến element đang chọn trong console\\\"></p>\\n<h2>Gọi lại giá trị tính toán lần trước trong console</h2>\\n<p><code class=\\\"language-text\\\">$_</code> để gọi lại giá trị tính toán lần trước</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">3 + 4\\n// = 7\\n$_ * 2\\n// = 14</code></pre>\\n      </div>\\n<p><img src=\\\"https://flaviocopes.com/chrome-devtools-tips/use-last-result.gif\\\" alt=\\\"Gọi lại giá trị tính toán lần trước trong console\\\"></p>\\n<h2>Xác định đoạn CSS được định nghĩa ở đâu</h2>\\n<p><code class=\\\"language-text\\\">cmd-click</code> (<code class=\\\"language-text\\\">ctrl-click</code> trong windows) vào property CSS trong tab Elements để nhảy ngay tới chổ định nghĩa</p>\\n<p><img src=\\\"https://flaviocopes.com/chrome-devtools-tips/find-where-css-defined.gif\\\" alt=\\\"Xác định đoạn CSS được định nghĩa ở đâu\\\"></p>\\n<h2>screenshot một element</h2>\\n<p>Chọn element + nhấn <code class=\\\"language-text\\\">cmd+shift+p</code> (<code class=\\\"language-text\\\">ctrl+shift+p</code> trong windows) để mở menu Command và chọn <strong>Capture node screenshot</strong></p>\\n<p><img src=\\\"https://flaviocopes.com/chrome-devtools-tips/screenshot-node.gif\\\" alt=\\\"screenshot một element\\\"></p>\\n<h2>Tìm element sử dụng CSS selectors</h2>\\n<p><code class=\\\"language-text\\\">ctrl+f</code> (<code class=\\\"language-text\\\">cmd+f</code> trong Mac) mở ô search, gõ đoạn css selector ở đây</p>\\n<p><img src=\\\"https://flaviocopes.com/chrome-devtools-tips/find-elements-css-selectors.gif\\\" alt=\\\"Tìm element sử dụng CSS selectors\\\"></p>\\n<h2>Shift-Enter trong console</h2>\\n<p>Để gõ đoạn code trên nhiều dòng trong console, ấn phím <code class=\\\"language-text\\\">shift-enter</code></p>\\n<p><img src=\\\"https://flaviocopes.com/chrome-devtools-tips/multiple-lines-commands.gif\\\" alt=\\\"Shift-Enter trong console\\\"></p>\\n<h2>Clear console</h2>\\n<p>Để clear console thường ta sẽ nhấn nút Clear ở trên cùng, hoặc bằng gõ <code class=\\\"language-text\\\">ctrl+l</code> (<code class=\\\"language-text\\\">cmd+k</code>)</p>\\n<h2><code class=\\\"language-text\\\">Go to</code> như trong sumblime text hay VSCode</h2>\\n<p>Trong tab Source</p>\\n<ul>\\n<li><code class=\\\"language-text\\\">ctrl+o</code> (cmd+o) để hiển thị tất cả file đang load</li>\\n<li><code class=\\\"language-text\\\">ctrl+shift+o</code> (cmd+shift+o) để hiển thị biểu tượng property, function hay là class trong file hiện tại</li>\\n<li><code class=\\\"language-text\\\">ctrl+g</code> để nhảy đến dòng</li>\\n</ul>\\n<h2>Watch Expression</h2>\\n<p>Thay vì phải viết đi viết lại biến hoặc expression trong lúc debug, thêm nó vào trong Watch Expression</p>\\n<p><img src=\\\"https://flaviocopes.com/chrome-devtools-tips/watch-expressions.gif\\\" alt=\\\"Watch Expression\\\"></p>\\n<h2>XHR/Fetch debugging</h2>\\n<p>Chỉ định khi nào dừng nếu send đi một XHR/Fetch request trong XHR/Fetch breakpoint panel</p>\\n<p><img src=\\\"https://flaviocopes.com/chrome-devtools-tips/xhr-fetch-breakpoints.png\\\"></p>\\n<h2>Debug khi DOM bị thay đổi</h2>\\n<p>Right click vào element -> chọn <strong>enable Break on Subtree Modifications</strong>, khi có đoạn script nào thay đổi element, debugger sẽ stop ngay lập tức</p>\\n<p><img src=\\\"https://flaviocopes.com/chrome-devtools-tips/break-subtree-modifications.png\\\" alt=\\\"Debug khi DOM bị thay đổi\\\"></p>\",\"id\":\"E:/anluu/luckyluu/posts/2018-03-28-mot-vai-tip-su-dung-chrome-dev-tools/index.md absPath of file >>> MarkdownRemark\",\"timeToRead\":1,\"frontmatter\":{\"date\":\"2018-03-28T13:35:13.234Z\",\"path\":\"/2018-03-28-mot-vai-tip-su-dung-chrome-dev-tools\",\"tags\":[\"javascript\"],\"title\":\"Một vài tip sử dụng Chrome Dev Tools\"}}}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---2018-03-29-query-string-voi-react-router-9210cac1f68cdc4bb5d2.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p>Khi làm web, nếu chúng ta muốn truyền một thông tin gì đó quá URL, ta sẽ sử dụng query string, cái này ai làm web chắc cũng biết</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">http://luubinhan.github.io/list?sortBy=date&amp;sortOrder=desc</code></pre>\\n      </div>\\n<p>Cái đoạn sau dấu chấm hỏi gọi là query string <code class=\\\"language-text\\\">sortBy=date&amp;sortOrder=desc</code></p>\\n<p>Để tạo ra một đoạn <em>query string</em> như vậy ta sẽ sử dụng component <code class=\\\"language-text\\\">Link</code> của <em>react-router</em></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-jsx\\\"><code class=\\\"language-jsx\\\"><span class=\\\"token keyword\\\">let</span> queryParameters <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n    sortBy<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'date'</span><span class=\\\"token punctuation\\\">,</span>\\n    sortOrder<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'desc'</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>Link</span>\\n      <span class=\\\"token attr-name\\\">to</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token script-punctuation punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">{</span>\\n        pathname<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'/list'</span><span class=\\\"token punctuation\\\">,</span>\\n        query<span class=\\\"token punctuation\\\">:</span> queryParameters\\n      <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">}</span></span>\\n  <span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token constant\\\">CLICK</span> <span class=\\\"token constant\\\">ME</span><span class=\\\"token operator\\\">!</span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>Link</span><span class=\\\"token punctuation\\\">></span></span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>Nếu ta thiết đặt Route cho đường path <code class=\\\"language-text\\\">list</code> đến <code class=\\\"language-text\\\">ListComponent</code></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-jsx\\\"><code class=\\\"language-jsx\\\"><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>Route</span> <span class=\\\"token attr-name\\\">path</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>list<span class=\\\"token punctuation\\\">\\\"</span></span> <span class=\\\"token attr-name\\\">component</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token script-punctuation punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span>ListComponent<span class=\\\"token punctuation\\\">}</span></span> <span class=\\\"token punctuation\\\">/></span></span></code></pre>\\n      </div>\\n<p>thì bên trong <code class=\\\"language-text\\\">ListComponent</code> ta có thể truy xuất đến giá trị của query string này bằng <code class=\\\"language-text\\\">props.location</code></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-jsx\\\"><code class=\\\"language-jsx\\\"><span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span>location<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">;</span>\\n\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>location<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token comment\\\">// { sortBy: 'date', sortOrder: 'desc' }</span></code></pre>\\n      </div>\",\"frontmatter\":{\"date\":\"March 29, 2018\",\"path\":\"/2018-03-29-query-string-voi-react-router\",\"tags\":[\"javascript\",\"react\"],\"title\":\"Query String với React Router\",\"desc\":\"Cách sử dụng query string với React Router siêu căn bản\"}}},\"pathContext\":{\"prev\":{\"excerpt\":\"Xéeeeeeeeeet cái hàm sau Gọi một hàm A hàm A trả về Promise, thì hàm A là dạng hàm blocking hàm   là một hàm  . Dòng  A  sẽ đợi đến khi chạy xong hàm  . Hàm gọi là  blocking  khi mà khi chạy hàm này mấy thằng khác không chạy đồng thời với nó, ngược...\",\"html\":\"<p>Xéeeeeeeeeet cái hàm sau</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">asyncFunc</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Promise</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>resolve<span class=\\\"token punctuation\\\">,</span> reject<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'DONE'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">100</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token function\\\">asyncFunc</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>x <span class=\\\"token operator\\\">=></span> console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Result: '</span> <span class=\\\"token operator\\\">+</span> x<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// kết quả in ra</span>\\n<span class=\\\"token comment\\\">// Result: DONE</span></code></pre>\\n      </div>\\n<h2>Gọi một hàm A hàm A trả về Promise, thì hàm A là dạng hàm blocking</h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">asynFunc</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Promise</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>resolve<span class=\\\"token punctuation\\\">,</span> reject<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'DONE'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">100</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">async</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">main</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> x <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">await</span> <span class=\\\"token function\\\">asyncFunc</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// A</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Result: '</span> <span class=\\\"token operator\\\">+</span> x<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token comment\\\">// tương tự như</span>\\n    <span class=\\\"token comment\\\">// asyncFunc().then(x => console.log('Result: ' + x))</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token function\\\">main</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>hàm <code class=\\\"language-text\\\">main</code> là một hàm <code class=\\\"language-text\\\">async</code>. Dòng <em>A</em> sẽ đợi đến khi chạy xong hàm <code class=\\\"language-text\\\">asyncFunc()</code>.</p>\\n<p>Hàm gọi là <em>blocking</em> khi mà khi chạy hàm này mấy thằng khác không chạy đồng thời với nó, ngược lại <em>non-blocking</em> là hàm mà không can thiệp việc các hàm khác chạy cùng lúc với nó</p>\\n<h2><code class=\\\"language-text\\\">Promise</code> là một container để cưu mang giá trị trả về từ một <code class=\\\"language-text\\\">asynchronously</code></h2>\\n<p>Nếu hàm trả về <code class=\\\"language-text\\\">Promise</code> thì cái <code class=\\\"language-text\\\">Promise</code> này giống như một cái thùng chứa, hàm thực thi bên trong sẽ quăng kết quả trả về vào đó. Mô phỏng việc này bằng một <code class=\\\"language-text\\\">Array</code></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">asyncFunc</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> blank <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> blank<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'DONE'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">100</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">return</span> blank<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">const</span> blank <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">asyncFunc</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// đợi đến khi giá trị trả về được fill</span>\\n<span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> x <span class=\\\"token operator\\\">=</span> blank<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//A</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Result: '</span> <span class=\\\"token operator\\\">+</span> x<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">200</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>Tất nhiên với một <code class=\\\"language-text\\\">Promise</code> thực thụ không thể truy cập giá trị như dòng <em>A</em> (blank[0]), mà chúng ta sử dụng hàm <code class=\\\"language-text\\\">then()</code> và một <em>callback</em></p>\\n<h2><code class=\\\"language-text\\\">Promise</code> là một đối tượng tạo ra sự kiện</h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">asyncFunc</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> eventEmitter <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> success<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">//A</span>\\n        <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">const</span> handler <span class=\\\"token keyword\\\">of</span> eventEmitter<span class=\\\"token punctuation\\\">.</span>success<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token function\\\">handler</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'DONE'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">100</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">return</span> eventEmitter<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token function\\\">asyncFunc</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>success<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span>x <span class=\\\"token operator\\\">=></span> console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Result '</span> <span class=\\\"token operator\\\">+</span> x<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//B</span></code></pre>\\n      </div>\\n<p>Dòng <em>B</em> đăng ký lắng nghe sự kiện sau khi gọi hàm <code class=\\\"language-text\\\">asyncFunc()</code>. Kết quả trả về của <code class=\\\"language-text\\\">Promise</code> sẽ là một chuỗi event sau khi thực thi kèm với giá trị gì đấy ứng với từng event.</p>\",\"id\":\"E:/anluu/luckyluu/posts/2018-04-03-ba-cach-de-hieu-promise/index.md absPath of file >>> MarkdownRemark\",\"timeToRead\":2,\"frontmatter\":{\"date\":\"2018-04-03T13:35:13.234Z\",\"path\":\"/2018-04-03-ba-cach-de-hieu-promise\",\"tags\":[\"javascript\",\"react\"],\"title\":\"Ba cách để hiểu Promise\"}},\"next\":{\"excerpt\":\"Kéo thả các Element Bên trong tab Elements có thể kéo các element HTML và thả nó vào vị trí mới Reference đến element đang chọn trong console Để reference đến 1 element đang được chọn, gõ  , nếu đang load jquery thì có thể dùng  Gọi lại giá trị tính...\",\"html\":\"<h2>Kéo thả các Element</h2>\\n<p>Bên trong tab Elements có thể kéo các element HTML và thả nó vào vị trí mới</p>\\n<p><img src=\\\"https://flaviocopes.com/chrome-devtools-tips/drag-and-drop.gif\\\" alt=\\\"Kéo thả các Element\\\"></p>\\n<h2>Reference đến element đang chọn trong console</h2>\\n<p>Để reference đến 1 element đang được chọn, gõ <code class=\\\"language-text\\\">$0</code>, nếu đang load jquery thì có thể dùng <code class=\\\"language-text\\\">$($0)</code></p>\\n<p><img src=\\\"https://flaviocopes.com/chrome-devtools-tips/reference-elements.gif\\\" alt=\\\"Reference đến element đang chọn trong console\\\"></p>\\n<h2>Gọi lại giá trị tính toán lần trước trong console</h2>\\n<p><code class=\\\"language-text\\\">$_</code> để gọi lại giá trị tính toán lần trước</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">3 + 4\\n// = 7\\n$_ * 2\\n// = 14</code></pre>\\n      </div>\\n<p><img src=\\\"https://flaviocopes.com/chrome-devtools-tips/use-last-result.gif\\\" alt=\\\"Gọi lại giá trị tính toán lần trước trong console\\\"></p>\\n<h2>Xác định đoạn CSS được định nghĩa ở đâu</h2>\\n<p><code class=\\\"language-text\\\">cmd-click</code> (<code class=\\\"language-text\\\">ctrl-click</code> trong windows) vào property CSS trong tab Elements để nhảy ngay tới chổ định nghĩa</p>\\n<p><img src=\\\"https://flaviocopes.com/chrome-devtools-tips/find-where-css-defined.gif\\\" alt=\\\"Xác định đoạn CSS được định nghĩa ở đâu\\\"></p>\\n<h2>screenshot một element</h2>\\n<p>Chọn element + nhấn <code class=\\\"language-text\\\">cmd+shift+p</code> (<code class=\\\"language-text\\\">ctrl+shift+p</code> trong windows) để mở menu Command và chọn <strong>Capture node screenshot</strong></p>\\n<p><img src=\\\"https://flaviocopes.com/chrome-devtools-tips/screenshot-node.gif\\\" alt=\\\"screenshot một element\\\"></p>\\n<h2>Tìm element sử dụng CSS selectors</h2>\\n<p><code class=\\\"language-text\\\">ctrl+f</code> (<code class=\\\"language-text\\\">cmd+f</code> trong Mac) mở ô search, gõ đoạn css selector ở đây</p>\\n<p><img src=\\\"https://flaviocopes.com/chrome-devtools-tips/find-elements-css-selectors.gif\\\" alt=\\\"Tìm element sử dụng CSS selectors\\\"></p>\\n<h2>Shift-Enter trong console</h2>\\n<p>Để gõ đoạn code trên nhiều dòng trong console, ấn phím <code class=\\\"language-text\\\">shift-enter</code></p>\\n<p><img src=\\\"https://flaviocopes.com/chrome-devtools-tips/multiple-lines-commands.gif\\\" alt=\\\"Shift-Enter trong console\\\"></p>\\n<h2>Clear console</h2>\\n<p>Để clear console thường ta sẽ nhấn nút Clear ở trên cùng, hoặc bằng gõ <code class=\\\"language-text\\\">ctrl+l</code> (<code class=\\\"language-text\\\">cmd+k</code>)</p>\\n<h2><code class=\\\"language-text\\\">Go to</code> như trong sumblime text hay VSCode</h2>\\n<p>Trong tab Source</p>\\n<ul>\\n<li><code class=\\\"language-text\\\">ctrl+o</code> (cmd+o) để hiển thị tất cả file đang load</li>\\n<li><code class=\\\"language-text\\\">ctrl+shift+o</code> (cmd+shift+o) để hiển thị biểu tượng property, function hay là class trong file hiện tại</li>\\n<li><code class=\\\"language-text\\\">ctrl+g</code> để nhảy đến dòng</li>\\n</ul>\\n<h2>Watch Expression</h2>\\n<p>Thay vì phải viết đi viết lại biến hoặc expression trong lúc debug, thêm nó vào trong Watch Expression</p>\\n<p><img src=\\\"https://flaviocopes.com/chrome-devtools-tips/watch-expressions.gif\\\" alt=\\\"Watch Expression\\\"></p>\\n<h2>XHR/Fetch debugging</h2>\\n<p>Chỉ định khi nào dừng nếu send đi một XHR/Fetch request trong XHR/Fetch breakpoint panel</p>\\n<p><img src=\\\"https://flaviocopes.com/chrome-devtools-tips/xhr-fetch-breakpoints.png\\\"></p>\\n<h2>Debug khi DOM bị thay đổi</h2>\\n<p>Right click vào element -> chọn <strong>enable Break on Subtree Modifications</strong>, khi có đoạn script nào thay đổi element, debugger sẽ stop ngay lập tức</p>\\n<p><img src=\\\"https://flaviocopes.com/chrome-devtools-tips/break-subtree-modifications.png\\\" alt=\\\"Debug khi DOM bị thay đổi\\\"></p>\",\"id\":\"E:/anluu/luckyluu/posts/2018-03-28-mot-vai-tip-su-dung-chrome-dev-tools/index.md absPath of file >>> MarkdownRemark\",\"timeToRead\":1,\"frontmatter\":{\"date\":\"2018-03-28T13:35:13.234Z\",\"path\":\"/2018-03-28-mot-vai-tip-su-dung-chrome-dev-tools\",\"tags\":[\"javascript\"],\"title\":\"Một vài tip sử dụng Chrome Dev Tools\"}}}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/2018-03-29-query-string-voi-react-router.json\n// module id = ./node_modules/json-loader/index.js!./.cache/json/2018-03-29-query-string-voi-react-router.json\n// module chunks = 56"],"sourceRoot":""}