{"version":3,"sources":["webpack:///path---2017-10-27-react-children-react-clone-element-ed8e0e804ff6243e3834.js","webpack:///./.cache/json/2017-10-27-react-children-react-clone-element.json"],"names":["webpackJsonp","./node_modules/json-loader/index.js!./.cache/json/2017-10-27-react-children-react-clone-element.json","module","exports","data","markdownRemark","html","frontmatter","date","path","tags","title","desc","pathContext","prev","next","excerpt","id","timeToRead"],"mappings":"AAAAA,cAAc,KAERC,uGACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,iyRAAmmSC,aAAsBC,KAAA,mBAAAC,KAAA,iDAAAC,MAAA,sBAAAC,MAAA,uCAAAC,KAAA,gEAAqOC,aAAgBC,MAAA,EAAAC,MAAqBC,QAAA,+PAAAV,KAAA,6tbAA42cW,GAAA,uGAAAC,WAAA,EAAAX,aAA2QC,KAAA,2BAAAC,KAAA,oCAAAC,MAAA,sBAAAC,MAAA","file":"path---2017-10-27-react-children-react-clone-element-ed8e0e804ff6243e3834.js","sourcesContent":["webpackJsonp([24],{\n\n/***/ \"./node_modules/json-loader/index.js!./.cache/json/2017-10-27-react-children-react-clone-element.json\":\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p>Hãy nghĩ ngay tới cặp đôi React.Children.map và React.cloneElement khi cần truyền <code>props</code> từ component cha xuống các component con mà <strong>KHÔNG cần gọi render component bên trong component cha</strong></p>\\n<p>Hơi mâu thuẫn vì không <code>render</code> component con vậy sao nó hiển thị, ví dụ đi</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> ComponentChaChu <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>children<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token operator\\\">&lt;</span>div<span class=\\\"token operator\\\">></span>\\n     <span class=\\\"token punctuation\\\">{</span>\\n        React<span class=\\\"token punctuation\\\">.</span>Children<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span>children<span class=\\\"token punctuation\\\">,</span> child <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token punctuation\\\">(</span>\\n            React<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">cloneElement</span><span class=\\\"token punctuation\\\">(</span>child<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span>\\n                style<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n                    backgroundColor<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'green'</span><span class=\\\"token punctuation\\\">,</span>\\n                    color<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'white'</span>\\n                <span class=\\\"token punctuation\\\">}</span>\\n            <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n     <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>div<span class=\\\"token operator\\\">></span>\\n<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> Luckyluu <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>title<span class=\\\"token punctuation\\\">,</span> posts<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token operator\\\">&lt;</span>div<span class=\\\"token operator\\\">></span>\\n        <span class=\\\"token operator\\\">&lt;</span>ComponentChaChu<span class=\\\"token operator\\\">></span>\\n            <span class=\\\"token operator\\\">&lt;</span>NavBar title<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>title<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n        <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>ComponentChaChu<span class=\\\"token operator\\\">></span>\\n        <span class=\\\"token punctuation\\\">{</span>\\n            posts<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span>post <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">(</span>\\n                <span class=\\\"token operator\\\">&lt;</span>Post key<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>post<span class=\\\"token punctuation\\\">.</span>id<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span>\\n                    <span class=\\\"token operator\\\">&lt;</span>ComponentChaChu<span class=\\\"token operator\\\">></span>\\n                        <span class=\\\"token operator\\\">&lt;</span>PostHeader <span class=\\\"token punctuation\\\">{</span><span class=\\\"token operator\\\">...</span>post<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span> \\n                    <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>ComponentChaChu<span class=\\\"token operator\\\">></span>\\n                    <span class=\\\"token operator\\\">&lt;</span>PostBody <span class=\\\"token punctuation\\\">{</span><span class=\\\"token operator\\\">...</span>post<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n                <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>Post<span class=\\\"token operator\\\">></span>\\n            <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>div<span class=\\\"token operator\\\">></span>\\n<span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>2 component con ở đây là <code>PostHeader</code> và <code>NavBar</code> có thể sử dụng ở bất kỳ đâu, còn <code>ComponentChaChu</code> có thể có bất kỳ đứa con nào, không cần biết sau này con nó là ai thì nó sẽ truyền hết tài sản là <code>backgroundColor</code> và <code>color</code> cho đứa con yêu dấu đó</p>\\n<p>Sẵn tiện thì nói luôn một số <code>function</code> khác của React.Children luôn</p>\\n<p><code>React.Children.forEach</code></p>\\n<p>Giống như <code>React.Children.map</code> nhưng không trả về gì hết</p>\\n<p><code>React.Children.count</code></p>\\n<p>Nhà có nhiêu đứa con ?</p>\\n<p><code>React.Children.toArray(children)</code></p>\\n<p>Convert component con về <code>array</code></p>\\n<p><code>React.Children.only</code></p>\\n<p>Để áp dụng chương trình kế hoạch hóa gia đình, mỗi component cha chỉ có <strong>1</strong> con duy nhất, quăng cái thông báo nếu có hơn số con này.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">BaBa</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">children</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>Nếu bắt buộc con thằng <code>BaBa</code> phải là <code>function</code></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code>BaBa<span class=\\\"token punctuation\\\">.</span>propTypes <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n    children<span class=\\\"token punctuation\\\">:</span> React<span class=\\\"token punctuation\\\">.</span>propTypes<span class=\\\"token punctuation\\\">.</span>func<span class=\\\"token punctuation\\\">.</span>isRequired\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>Nó log ra thông báo lỗi khi truyền vào con không phải là <code>function</code>, dev lười biến có thể 'cho qua' thông báo này. Nhưng khi mình bắt buộc kiểu này</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">BaBa</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">return</span> React<span class=\\\"token punctuation\\\">.</span>Children<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">only</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">children</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>Nếu không có con là app chết luôn, cho các anh dev không còn lười biếng, giống kiểu mấy người xa ko có con là không có được vây. ;)</p>\",\"frontmatter\":{\"date\":\"October 27, 2017\",\"path\":\"/2017-10-27-react-children-react-clone-element\",\"tags\":[\"javascript\",\"react\"],\"title\":\"React Children và React cloneElement\",\"desc\":\"Tìm hiểu cách sử dụng react Children và react cloneElement\"}}},\"pathContext\":{\"prev\":false,\"next\":{\"excerpt\":\"Để thực sự trở thành một master React, việc hiểu lifecycle của component là bắt buộc, vòng đời của một component được tính từ lúc nó được chèn vào trong DOM (tức là không kể giai đoạn   - có thể xem là giai đoạn thai nghén) đến lúc nó được remove ra...\",\"html\":\"<p><img src=\\\"https://cdn-images-1.medium.com/max/1600/1*u8hTumGAPQMYZIvfgQMfPA.jpeg\\\"></p>\\n<p>Để thực sự trở thành một master React, việc hiểu lifecycle của component là bắt buộc, vòng đời của một component được tính từ lúc nó được chèn vào trong DOM (tức là không kể giai đoạn <code>componentWillMount</code> - có thể xem là giai đoạn thai nghén) đến lúc nó được remove ra khỏi DOM.</p>\\n<p>Các phương thức của lifecycle là một dạng <code>hook</code> (giống như khái niệm <code>hook</code> trong wordpress), cho phép người lập trình can thiệp vào quá trình cập nhập UI với những thay đổi của <code>state</code> hoặc <code>props</code>.</p>\\n<p>Những phương thức bắt đầu với <code>componentWill</code> tức là cái <code>hook</code> này được đặt trước những xử lý của React, còn bắt đầu với <code>componentDid</code> thì chạy sau khi thực hiện các đoạn code xử lý của React.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token function\\\">componentEvent</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    componentWill<span class=\\\"token operator\\\">...</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// hook</span>\\n\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// React handle something</span>\\n    \\n    componentDid<span class=\\\"token operator\\\">...</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// hook</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h2>constructor</h2>\\n<p>Phương thức này sẽ được gọi khi component được khởi tạo, trước khi nó được <em>mount</em></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Clicker</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">constructor</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">super</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>handleClick <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>handleClick<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">bind</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n       clicks<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">0</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token function\\\">handleClick</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> \\n      clicks<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">.</span>clicks <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">//...</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h2>componentWillMount</h2>\\n<p>Chạy sau <code>constructor</code> trước khi component mount vô DOM bằng hàm <code>render</code></p>\\n<p>Lưu ý không nên gọi bất kỳ hàm nào có gọi <code>setState</code> trong <code>componentWillMount</code> vì chưa có DOM nào để tương tác.</p>\\n<h2>componentDidMount</h2>\\n<p>Component đã hiện hình, là lúc mà ta gọi AJAX, thêm sự kiện có tương tác với DOM, gọi <code>setState</code> ở đây sẽ trigger sự kiện re-render.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token function\\\">componetDidMount</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">fetch</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'https://gitconnected.com'</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>res<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n        user<span class=\\\"token punctuation\\\">:</span> res<span class=\\\"token punctuation\\\">.</span>user\\n      <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h2>componentWillReceiveProps</h2>\\n<p>Chạy khi component nhận được <code>props</code> mới từ component cha. Thời điểm thích hợp để kiểm tra và reset lại <code>state</code> có phụ thuộc vào giá trị <code>props</code></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token function\\\">componentWillReceiveProps</span><span class=\\\"token punctuation\\\">(</span>nextProps<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span>id <span class=\\\"token operator\\\">!==</span> nextProps<span class=\\\"token punctuation\\\">.</span>id<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n      feedContent<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h2>shouldComponentUpdate</h2>\\n<p>Có phương thức này để cải thiện performance của React, vì đôi lúc có những sự thay đổi <code>state</code> hoặc <code>props</code> nếu không muốn cập nhập lại UI có thể cho hàm này return và <code>false</code> (mặc định là return <code>true</code>), khi return <code>false</code> các hàm <code>componentWillUpdate</code>, <code>render</code>, <code>componentDidUpdate</code> sẽ không được gọi.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token function\\\">shouldComponentUpdate</span><span class=\\\"token punctuation\\\">(</span>nextProps<span class=\\\"token punctuation\\\">,</span> nextState<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n   <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span>clicks <span class=\\\"token operator\\\">!==</span> nextProps<span class=\\\"token punctuation\\\">.</span>clicks<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h2>componentWillUpdate</h2>\\n<p>Không có nhiều trường hợp sử dụng hook này, <strong>KHÔNG</strong> gọi <code>setState</code> ở đây, phần lớn các trường hợp điều có thể handle ở <code>componentWillReceiveProps</code></p>\\n<h2>componentDidUpdate</h2>\\n<p>Sau khi React cập nhập lại UI, hook này sẽ được gọi, nếu muốn chạy một animation gì đó cần tương tác với DOM thì đây chính là lúc thực thi</p>\\n<h2>componentWillUnmount</h2>\\n<p>Có thể sử dụng để remove các listener đã được add cho DOM</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token function\\\">componentWillUnmount</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  window<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">removeEventListener</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'resize'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>resizeEventHandler<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h2>componentDidCatch</h2>\\n<p>Cái này mới được add vào từ React 16, nếu một component nào đó bị lỗi nó sẽ không chết nguyên cái app nữa mà sẽ quăn lỗi ở đây, sử dụng để hiển thị lỗi lên UI</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">ErrorBoundary</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">constructor</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">super</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> hasError<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">false</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function\\\">componentDidCatch</span><span class=\\\"token punctuation\\\">(</span>error<span class=\\\"token punctuation\\\">,</span> info<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Display fallback UI</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> hasError<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// You can also log the error to an error reporting service</span>\\n    <span class=\\\"token function\\\">logErrorToMyService</span><span class=\\\"token punctuation\\\">(</span>error<span class=\\\"token punctuation\\\">,</span> info<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">.</span>hasError<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// You can render any custom fallback UI</span>\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token operator\\\">&lt;</span>h1<span class=\\\"token operator\\\">></span>Something went wrong<span class=\\\"token punctuation\\\">.</span><span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>h1<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span>children<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token operator\\\">&lt;</span>ErrorBoundary<span class=\\\"token operator\\\">></span>\\n  <span class=\\\"token operator\\\">&lt;</span>MyWidget <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>ErrorBoundary<span class=\\\"token operator\\\">></span>\\n</code></pre>\\n      </div>\",\"id\":\"E:/anluu/luckyluu/posts/2017-10-20-react-lifecycle-la-gi/index.md absPath of file >>> MarkdownRemark\",\"timeToRead\":3,\"frontmatter\":{\"date\":\"2017-10-20T13:35:13.234Z\",\"path\":\"/2017-10-20-react-lifecycle-la-gi\",\"tags\":[\"javascript\",\"react\"],\"title\":\"Giải thích React Lifecycle\"}}}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---2017-10-27-react-children-react-clone-element-ed8e0e804ff6243e3834.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p>Hãy nghĩ ngay tới cặp đôi React.Children.map và React.cloneElement khi cần truyền <code>props</code> từ component cha xuống các component con mà <strong>KHÔNG cần gọi render component bên trong component cha</strong></p>\\n<p>Hơi mâu thuẫn vì không <code>render</code> component con vậy sao nó hiển thị, ví dụ đi</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> ComponentChaChu <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>children<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token operator\\\">&lt;</span>div<span class=\\\"token operator\\\">></span>\\n     <span class=\\\"token punctuation\\\">{</span>\\n        React<span class=\\\"token punctuation\\\">.</span>Children<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span>children<span class=\\\"token punctuation\\\">,</span> child <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token punctuation\\\">(</span>\\n            React<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">cloneElement</span><span class=\\\"token punctuation\\\">(</span>child<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span>\\n                style<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n                    backgroundColor<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'green'</span><span class=\\\"token punctuation\\\">,</span>\\n                    color<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'white'</span>\\n                <span class=\\\"token punctuation\\\">}</span>\\n            <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n     <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>div<span class=\\\"token operator\\\">></span>\\n<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> Luckyluu <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>title<span class=\\\"token punctuation\\\">,</span> posts<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token operator\\\">&lt;</span>div<span class=\\\"token operator\\\">></span>\\n        <span class=\\\"token operator\\\">&lt;</span>ComponentChaChu<span class=\\\"token operator\\\">></span>\\n            <span class=\\\"token operator\\\">&lt;</span>NavBar title<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>title<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n        <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>ComponentChaChu<span class=\\\"token operator\\\">></span>\\n        <span class=\\\"token punctuation\\\">{</span>\\n            posts<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span>post <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">(</span>\\n                <span class=\\\"token operator\\\">&lt;</span>Post key<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>post<span class=\\\"token punctuation\\\">.</span>id<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span>\\n                    <span class=\\\"token operator\\\">&lt;</span>ComponentChaChu<span class=\\\"token operator\\\">></span>\\n                        <span class=\\\"token operator\\\">&lt;</span>PostHeader <span class=\\\"token punctuation\\\">{</span><span class=\\\"token operator\\\">...</span>post<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span> \\n                    <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>ComponentChaChu<span class=\\\"token operator\\\">></span>\\n                    <span class=\\\"token operator\\\">&lt;</span>PostBody <span class=\\\"token punctuation\\\">{</span><span class=\\\"token operator\\\">...</span>post<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n                <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>Post<span class=\\\"token operator\\\">></span>\\n            <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>div<span class=\\\"token operator\\\">></span>\\n<span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>2 component con ở đây là <code>PostHeader</code> và <code>NavBar</code> có thể sử dụng ở bất kỳ đâu, còn <code>ComponentChaChu</code> có thể có bất kỳ đứa con nào, không cần biết sau này con nó là ai thì nó sẽ truyền hết tài sản là <code>backgroundColor</code> và <code>color</code> cho đứa con yêu dấu đó</p>\\n<p>Sẵn tiện thì nói luôn một số <code>function</code> khác của React.Children luôn</p>\\n<p><code>React.Children.forEach</code></p>\\n<p>Giống như <code>React.Children.map</code> nhưng không trả về gì hết</p>\\n<p><code>React.Children.count</code></p>\\n<p>Nhà có nhiêu đứa con ?</p>\\n<p><code>React.Children.toArray(children)</code></p>\\n<p>Convert component con về <code>array</code></p>\\n<p><code>React.Children.only</code></p>\\n<p>Để áp dụng chương trình kế hoạch hóa gia đình, mỗi component cha chỉ có <strong>1</strong> con duy nhất, quăng cái thông báo nếu có hơn số con này.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">BaBa</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">children</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>Nếu bắt buộc con thằng <code>BaBa</code> phải là <code>function</code></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code>BaBa<span class=\\\"token punctuation\\\">.</span>propTypes <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n    children<span class=\\\"token punctuation\\\">:</span> React<span class=\\\"token punctuation\\\">.</span>propTypes<span class=\\\"token punctuation\\\">.</span>func<span class=\\\"token punctuation\\\">.</span>isRequired\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>Nó log ra thông báo lỗi khi truyền vào con không phải là <code>function</code>, dev lười biến có thể 'cho qua' thông báo này. Nhưng khi mình bắt buộc kiểu này</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">BaBa</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">return</span> React<span class=\\\"token punctuation\\\">.</span>Children<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">only</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">children</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>Nếu không có con là app chết luôn, cho các anh dev không còn lười biếng, giống kiểu mấy người xa ko có con là không có được vây. ;)</p>\",\"frontmatter\":{\"date\":\"October 27, 2017\",\"path\":\"/2017-10-27-react-children-react-clone-element\",\"tags\":[\"javascript\",\"react\"],\"title\":\"React Children và React cloneElement\",\"desc\":\"Tìm hiểu cách sử dụng react Children và react cloneElement\"}}},\"pathContext\":{\"prev\":false,\"next\":{\"excerpt\":\"Để thực sự trở thành một master React, việc hiểu lifecycle của component là bắt buộc, vòng đời của một component được tính từ lúc nó được chèn vào trong DOM (tức là không kể giai đoạn   - có thể xem là giai đoạn thai nghén) đến lúc nó được remove ra...\",\"html\":\"<p><img src=\\\"https://cdn-images-1.medium.com/max/1600/1*u8hTumGAPQMYZIvfgQMfPA.jpeg\\\"></p>\\n<p>Để thực sự trở thành một master React, việc hiểu lifecycle của component là bắt buộc, vòng đời của một component được tính từ lúc nó được chèn vào trong DOM (tức là không kể giai đoạn <code>componentWillMount</code> - có thể xem là giai đoạn thai nghén) đến lúc nó được remove ra khỏi DOM.</p>\\n<p>Các phương thức của lifecycle là một dạng <code>hook</code> (giống như khái niệm <code>hook</code> trong wordpress), cho phép người lập trình can thiệp vào quá trình cập nhập UI với những thay đổi của <code>state</code> hoặc <code>props</code>.</p>\\n<p>Những phương thức bắt đầu với <code>componentWill</code> tức là cái <code>hook</code> này được đặt trước những xử lý của React, còn bắt đầu với <code>componentDid</code> thì chạy sau khi thực hiện các đoạn code xử lý của React.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token function\\\">componentEvent</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    componentWill<span class=\\\"token operator\\\">...</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// hook</span>\\n\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// React handle something</span>\\n    \\n    componentDid<span class=\\\"token operator\\\">...</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// hook</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h2>constructor</h2>\\n<p>Phương thức này sẽ được gọi khi component được khởi tạo, trước khi nó được <em>mount</em></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Clicker</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">constructor</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">super</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>handleClick <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>handleClick<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">bind</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n       clicks<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">0</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token function\\\">handleClick</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> \\n      clicks<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">.</span>clicks <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">//...</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h2>componentWillMount</h2>\\n<p>Chạy sau <code>constructor</code> trước khi component mount vô DOM bằng hàm <code>render</code></p>\\n<p>Lưu ý không nên gọi bất kỳ hàm nào có gọi <code>setState</code> trong <code>componentWillMount</code> vì chưa có DOM nào để tương tác.</p>\\n<h2>componentDidMount</h2>\\n<p>Component đã hiện hình, là lúc mà ta gọi AJAX, thêm sự kiện có tương tác với DOM, gọi <code>setState</code> ở đây sẽ trigger sự kiện re-render.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token function\\\">componetDidMount</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">fetch</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'https://gitconnected.com'</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>res<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n        user<span class=\\\"token punctuation\\\">:</span> res<span class=\\\"token punctuation\\\">.</span>user\\n      <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h2>componentWillReceiveProps</h2>\\n<p>Chạy khi component nhận được <code>props</code> mới từ component cha. Thời điểm thích hợp để kiểm tra và reset lại <code>state</code> có phụ thuộc vào giá trị <code>props</code></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token function\\\">componentWillReceiveProps</span><span class=\\\"token punctuation\\\">(</span>nextProps<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span>id <span class=\\\"token operator\\\">!==</span> nextProps<span class=\\\"token punctuation\\\">.</span>id<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n      feedContent<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h2>shouldComponentUpdate</h2>\\n<p>Có phương thức này để cải thiện performance của React, vì đôi lúc có những sự thay đổi <code>state</code> hoặc <code>props</code> nếu không muốn cập nhập lại UI có thể cho hàm này return và <code>false</code> (mặc định là return <code>true</code>), khi return <code>false</code> các hàm <code>componentWillUpdate</code>, <code>render</code>, <code>componentDidUpdate</code> sẽ không được gọi.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token function\\\">shouldComponentUpdate</span><span class=\\\"token punctuation\\\">(</span>nextProps<span class=\\\"token punctuation\\\">,</span> nextState<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n   <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span>clicks <span class=\\\"token operator\\\">!==</span> nextProps<span class=\\\"token punctuation\\\">.</span>clicks<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h2>componentWillUpdate</h2>\\n<p>Không có nhiều trường hợp sử dụng hook này, <strong>KHÔNG</strong> gọi <code>setState</code> ở đây, phần lớn các trường hợp điều có thể handle ở <code>componentWillReceiveProps</code></p>\\n<h2>componentDidUpdate</h2>\\n<p>Sau khi React cập nhập lại UI, hook này sẽ được gọi, nếu muốn chạy một animation gì đó cần tương tác với DOM thì đây chính là lúc thực thi</p>\\n<h2>componentWillUnmount</h2>\\n<p>Có thể sử dụng để remove các listener đã được add cho DOM</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token function\\\">componentWillUnmount</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  window<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">removeEventListener</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'resize'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>resizeEventHandler<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h2>componentDidCatch</h2>\\n<p>Cái này mới được add vào từ React 16, nếu một component nào đó bị lỗi nó sẽ không chết nguyên cái app nữa mà sẽ quăn lỗi ở đây, sử dụng để hiển thị lỗi lên UI</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">ErrorBoundary</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">constructor</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">super</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> hasError<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">false</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function\\\">componentDidCatch</span><span class=\\\"token punctuation\\\">(</span>error<span class=\\\"token punctuation\\\">,</span> info<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Display fallback UI</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> hasError<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// You can also log the error to an error reporting service</span>\\n    <span class=\\\"token function\\\">logErrorToMyService</span><span class=\\\"token punctuation\\\">(</span>error<span class=\\\"token punctuation\\\">,</span> info<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">.</span>hasError<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// You can render any custom fallback UI</span>\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token operator\\\">&lt;</span>h1<span class=\\\"token operator\\\">></span>Something went wrong<span class=\\\"token punctuation\\\">.</span><span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>h1<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span>children<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token operator\\\">&lt;</span>ErrorBoundary<span class=\\\"token operator\\\">></span>\\n  <span class=\\\"token operator\\\">&lt;</span>MyWidget <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>ErrorBoundary<span class=\\\"token operator\\\">></span>\\n</code></pre>\\n      </div>\",\"id\":\"E:/anluu/luckyluu/posts/2017-10-20-react-lifecycle-la-gi/index.md absPath of file >>> MarkdownRemark\",\"timeToRead\":3,\"frontmatter\":{\"date\":\"2017-10-20T13:35:13.234Z\",\"path\":\"/2017-10-20-react-lifecycle-la-gi\",\"tags\":[\"javascript\",\"react\"],\"title\":\"Giải thích React Lifecycle\"}}}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/2017-10-27-react-children-react-clone-element.json\n// module id = ./node_modules/json-loader/index.js!./.cache/json/2017-10-27-react-children-react-clone-element.json\n// module chunks = 24"],"sourceRoot":""}