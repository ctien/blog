webpackJsonp([0x5b11d367c14b],{1290:function(n,s){n.exports={data:{markdownRemark:{html:'<!-- TOC -->\n<ul>\n<li><a href="#jwt-l%C3%A0-g%C3%AC">JWT là gì</a></li>\n<li><a href="#jwt-v%E1%BA%ADn-h%C3%A0nh-th%E1%BA%BF-n%C3%A0o">JWT vận hành thế nào</a></li>\n<li><a href="#authentication-s%E1%BB%AD-d%E1%BB%A5ng-k%E1%BA%BFt-h%E1%BB%A3p-v%E1%BB%9Bi-redux">Authentication sử dụng kết hợp với Redux</a></li>\n</ul>\n<!-- /TOC -->\n<h1 id="jwt-là-gì"><a href="#jwt-l%C3%A0-g%C3%AC" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>JWT là gì</h1>\n<p>JWT là một đoạn string dạng JSON đã được mã hóa và truyền qua header để làm nhiệm vụ authenticate. Bên cạnh secret key, cục JWT còn chứa một số thông tin khác được hash kèm trong JSON.</p>\n<h1 id="jwt-vận-hành-thế-nào"><a href="#jwt-v%E1%BA%ADn-h%C3%A0nh-th%E1%BA%BF-n%C3%A0o" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>JWT vận hành thế nào</h1>\n<p>Khi user đăng nhập thành công, server sẽ trả về một cục JWT, chúng ta lưu cục này lại trong <code class="language-text">localStorage</code> để sử dụng về sau. Khi muốn thực hiện một request nào đó, chẳng hạn gọi đến API để lấy dữ liệu, mà cần xác thực đã đăng nhập, ta gởi cái token này kèm trong header của request. Server kiểm trả token này và thực thi yêu cầu nếu kiểm tra thấy hợp lệ.</p>\n<p>Nội dung của header thường sẽ là</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">Authorization: Bearer eyJhbGciOiJIUzI1NiIsI </code></pre>\n      </div>\n<p>Hình minh họa sau mô tả cách chạy của quá trình này</p>\n<p><img src="https://cms-assets.tutsplus.com/uploads/users/1885/posts/30460/image/jwt-diagram.png"></p>\n<h1 id="authentication-sử-dụng-kết-hợp-với-redux"><a href="#authentication-s%E1%BB%AD-d%E1%BB%A5ng-k%E1%BA%BFt-h%E1%BB%A3p-v%E1%BB%9Bi-redux" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Authentication sử dụng kết hợp với Redux</h1>\n<p>Tạo Redux Store, ở đây chúng ta sẽ cần sử dụng tới middleware, để mỗi khi có một request đến API, thằng middleware này sẽ chèn thêm vào header đoạn authentication. Setup redux store với middleware</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> createStore<span class="token punctuation">,</span> applyMiddleware <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'redux\'</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Provider <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'react-redux\'</span>\n<span class="token keyword">import</span> thunkMiddleware <span class="token keyword">from</span> <span class="token string">\'redux-thunk\'</span>\n<span class="token keyword">import</span> quotesApp <span class="token keyword">from</span> <span class="token string">\'./reducers\'</span>\n<span class="token keyword">import</span> api <span class="token keyword">from</span> <span class="token string">\'./middleware/api\'</span>\n\n<span class="token keyword">let</span> createStoreWithMiddleware <span class="token operator">=</span> <span class="token function">applyMiddleware</span><span class="token punctuation">(</span>thunkMiddleware<span class="token punctuation">,</span> api<span class="token punctuation">)</span><span class="token punctuation">(</span>createStore<span class="token punctuation">)</span>\n\n<span class="token keyword">let</span> store <span class="token operator">=</span> <span class="token function">createStoreWithMiddleware</span><span class="token punctuation">(</span>quotesApp<span class="token punctuation">)</span>\n\n<span class="token keyword">let</span> rootElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">\'root\'</span><span class="token punctuation">)</span>\n\n<span class="token function">render</span><span class="token punctuation">(</span>\n  <span class="token operator">&lt;</span>Provider store<span class="token operator">=</span><span class="token punctuation">{</span>store<span class="token punctuation">}</span><span class="token operator">></span>\n    <span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">></span>\n  <span class="token operator">&lt;</span><span class="token operator">/</span>Provider<span class="token operator">></span><span class="token punctuation">,</span>\n  rootElement\n<span class="token punctuation">)</span></code></pre>\n      </div>\n<p>Component App chúng ta sẽ hiện thực nó như sau</p>\n<div class="gatsby-highlight">\n      <pre class="language-jsx"><code class="language-jsx"><span class="token comment">// containers/App.js</span>\n\n<span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component<span class="token punctuation">,</span> PropTypes <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'react\'</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> connect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'react-redux\'</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> loginUser<span class="token punctuation">,</span> fetchQuote<span class="token punctuation">,</span> fetchSecretQuote <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'../actions\'</span>\n<span class="token keyword">import</span> Login <span class="token keyword">from</span> <span class="token string">\'../components/Login\'</span>\n<span class="token keyword">import</span> Navbar <span class="token keyword">from</span> <span class="token string">\'../components/Navbar\'</span>\n<span class="token keyword">import</span> Quotes <span class="token keyword">from</span> <span class="token string">\'../components/Quotes\'</span>\n\n<span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> dispatch<span class="token punctuation">,</span> quote<span class="token punctuation">,</span> isAuthenticated<span class="token punctuation">,</span> errorMessage<span class="token punctuation">,</span> isSecretQuote <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Navbar</span>\n          <span class="token attr-name">isAuthenticated</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>isAuthenticated<span class="token punctuation">}</span></span>\n          <span class="token attr-name">errorMessage</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>errorMessage<span class="token punctuation">}</span></span>\n          <span class="token attr-name">dispatch</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>dispatch<span class="token punctuation">}</span></span>\n        <span class="token punctuation">/></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">\'</span>container<span class="token punctuation">\'</span></span><span class="token punctuation">></span></span>\n          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Quotes</span>\n            <span class="token attr-name">onQuoteClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">fetchQuote</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span>\n            <span class="token attr-name">onSecretQuoteClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">fetchSecretQuote</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span>\n            <span class="token attr-name">isAuthenticated</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>isAuthenticated<span class="token punctuation">}</span></span>\n            <span class="token attr-name">quote</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>quote<span class="token punctuation">}</span></span>\n            <span class="token attr-name">isSecretQuote</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>isSecretQuote<span class="token punctuation">}</span></span>\n          <span class="token punctuation">/></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n    <span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\nApp<span class="token punctuation">.</span>propTypes <span class="token operator">=</span> <span class="token punctuation">{</span>\n  dispatch<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span>func<span class="token punctuation">.</span>isRequired<span class="token punctuation">,</span>\n  quote<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span>string<span class="token punctuation">,</span>\n  isAuthenticated<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span>bool<span class="token punctuation">.</span>isRequired<span class="token punctuation">,</span>\n  errorMessage<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span>string<span class="token punctuation">,</span>\n  isSecretQuote<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span>bool<span class="token punctuation">.</span>isRequired\n<span class="token punctuation">}</span>\n\n<span class="token comment">// These props come from the application\'s</span>\n<span class="token comment">// state when it is started</span>\n<span class="token keyword">function</span> <span class="token function">mapStateToProps</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> quotes<span class="token punctuation">,</span> auth <span class="token punctuation">}</span> <span class="token operator">=</span> state\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> quote<span class="token punctuation">,</span> authenticated <span class="token punctuation">}</span> <span class="token operator">=</span> quotes\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> isAuthenticated<span class="token punctuation">,</span> errorMessage <span class="token punctuation">}</span> <span class="token operator">=</span> auth\n\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    quote<span class="token punctuation">,</span>\n    isSecretQuote<span class="token punctuation">:</span> authenticated<span class="token punctuation">,</span>\n    isAuthenticated<span class="token punctuation">,</span>\n    errorMessage\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">connect</span><span class="token punctuation">(</span>mapStateToProps<span class="token punctuation">)</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span></code></pre>\n      </div>\n<p>Action để gọi login</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token comment">// actions.js</span>\n\n<span class="token comment">// There are three possible states for our login</span>\n<span class="token comment">// process and we need actions for each of them</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">LOGIN_REQUEST</span> <span class="token operator">=</span> <span class="token string">\'LOGIN_REQUEST\'</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">LOGIN_SUCCESS</span> <span class="token operator">=</span> <span class="token string">\'LOGIN_SUCCESS\'</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">LOGIN_FAILURE</span> <span class="token operator">=</span> <span class="token string">\'LOGIN_FAILURE\'</span>\n\n<span class="token keyword">function</span> <span class="token function">requestLogin</span><span class="token punctuation">(</span>creds<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    type<span class="token punctuation">:</span> <span class="token constant">LOGIN_REQUEST</span><span class="token punctuation">,</span>\n    isFetching<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    isAuthenticated<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    creds\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">receiveLogin</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    type<span class="token punctuation">:</span> <span class="token constant">LOGIN_SUCCESS</span><span class="token punctuation">,</span>\n    isFetching<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    isAuthenticated<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    id_token<span class="token punctuation">:</span> user<span class="token punctuation">.</span>id_token\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">loginError</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    type<span class="token punctuation">:</span> <span class="token constant">LOGIN_FAILURE</span><span class="token punctuation">,</span>\n    isFetching<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    isAuthenticated<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    message\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// Calls the API to get a token and</span>\n<span class="token comment">// dispatches actions along the way</span>\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">loginUser</span><span class="token punctuation">(</span>creds<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n  <span class="token keyword">let</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>\n    method<span class="token punctuation">:</span> <span class="token string">\'POST\'</span><span class="token punctuation">,</span>\n    headers<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token string">\'Content-Type\'</span><span class="token punctuation">:</span><span class="token string">\'application/x-www-form-urlencoded\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    body<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`username=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>creds<span class="token punctuation">.</span>username<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&amp;password=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>creds<span class="token punctuation">.</span>password<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> dispatch <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token comment">// We dispatch requestLogin to kickoff the call to the API</span>\n    <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">requestLogin</span><span class="token punctuation">(</span>creds<span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n    <span class="token keyword">return</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">\'http://localhost:3001/sessions/create\'</span><span class="token punctuation">,</span> config<span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>response <span class="token operator">=></span>\n        response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>user <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span> user<span class="token punctuation">,</span> response <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n            <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">{</span> user<span class="token punctuation">,</span> response <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=></span>  <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>response<span class="token punctuation">.</span>ok<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token comment">// If there was a problem, we want to</span>\n          <span class="token comment">// dispatch the error condition</span>\n          <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">loginError</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span>\n          <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n          <span class="token comment">// If login was successful, set the token in local storage</span>\n          localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">\'id_token\'</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span>id_token<span class="token punctuation">)</span>\n          localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">\'id_token\'</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span>access_token<span class="token punctuation">)</span>\n          <span class="token comment">// Dispatch the success action</span>\n          <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">receiveLogin</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Error: "</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>Ở đây chúng ta cũng đã lưu token này lại nếu user đăng nhập thành công xuống <code class="language-text">localStorage</code>, đồng thời chúng ta cũng dispatch cái action <code class="language-text">receivedLogin</code>, việc lưu token này có thể lưu nó ở chổ nào đó khác, tuy nhiên không được lưu nó trong <code class="language-text">reducer</code>, vì nó có thể gây ra side effect.</p>\n<p>Còn việc logout user cũng tương tự, ta chỉ việc set <code class="language-text">isAuthenticated = false</code> và xóa token này đi</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token comment">// Logs the user out</span>\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">logoutUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> dispatch <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">requestLogout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    localStorage<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span><span class="token string">\'id_token\'</span><span class="token punctuation">)</span>\n    localStorage<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span><span class="token string">\'access_token\'</span><span class="token punctuation">)</span>\n    <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">receiveLogout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>reducer sẽ như sau</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> combineReducers <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'redux\'</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span>\n  <span class="token constant">LOGIN_REQUEST</span><span class="token punctuation">,</span> <span class="token constant">LOGIN_SUCCESS</span><span class="token punctuation">,</span> <span class="token constant">LOGIN_FAILURE</span><span class="token punctuation">,</span> <span class="token constant">LOGOUT_SUCCESS</span>\n<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'./actions\'</span>\n\n<span class="token comment">// The auth reducer. The starting state sets authentication</span>\n<span class="token comment">// based on a token being in local storage. In a real app,</span>\n<span class="token comment">// we would also want a util to check if the token is expired.</span>\n<span class="token keyword">function</span> <span class="token function">auth</span><span class="token punctuation">(</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>\n    isFetching<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    isAuthenticated<span class="token punctuation">:</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">\'id_token\'</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token punctuation">:</span> <span class="token boolean">false</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> action<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">case</span> <span class="token constant">LOGIN_REQUEST</span><span class="token punctuation">:</span>\n      <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> state<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n        isFetching<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n        isAuthenticated<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n        user<span class="token punctuation">:</span> action<span class="token punctuation">.</span>creds\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token keyword">case</span> <span class="token constant">LOGIN_SUCCESS</span><span class="token punctuation">:</span>\n      <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> state<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n        isFetching<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n        isAuthenticated<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n        errorMessage<span class="token punctuation">:</span> <span class="token string">\'\'</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token keyword">case</span> <span class="token constant">LOGIN_FAILURE</span><span class="token punctuation">:</span>\n      <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> state<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n        isFetching<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n        isAuthenticated<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n        errorMessage<span class="token punctuation">:</span> action<span class="token punctuation">.</span>message\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token keyword">case</span> <span class="token constant">LOGOUT_SUCCESS</span><span class="token punctuation">:</span>\n      <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> state<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n        isFetching<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n        isAuthenticated<span class="token punctuation">:</span> <span class="token boolean">false</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token keyword">default</span><span class="token punctuation">:</span>\n      <span class="token keyword">return</span> state\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// The quotes reducer</span>\n<span class="token keyword">function</span> <span class="token function">quotes</span><span class="token punctuation">(</span>state <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> action<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n    <span class="token keyword">default</span><span class="token punctuation">:</span>\n      <span class="token keyword">return</span> state\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// We combine the reducers here so that they</span>\n<span class="token comment">// can be left split apart above</span>\n<span class="token keyword">const</span> quotesApp <span class="token operator">=</span> <span class="token function">combineReducers</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  auth<span class="token punctuation">,</span>\n  quotes\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> quotesApp</code></pre>\n      </div>\n<p>Quay lại với API middleware, như đã nói trên, giờ mỗi khi send đi một request, trong middleware chúng ta sẽ chèn thêm giá trị JWT này vào header</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token comment">// middleware/api.js</span>\n\n<span class="token keyword">const</span> <span class="token constant">BASE_URL</span> <span class="token operator">=</span> <span class="token string">\'http://localhost:3001/api/\'</span>\n\n<span class="token keyword">function</span> <span class="token function">callApi</span><span class="token punctuation">(</span>endpoint<span class="token punctuation">,</span> authenticated<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n  <span class="token keyword">let</span> token <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">\'access_token\'</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token keyword">null</span>\n  <span class="token keyword">let</span> config <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n  <span class="token keyword">if</span><span class="token punctuation">(</span>authenticated<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      config <span class="token operator">=</span> <span class="token punctuation">{</span>\n        headers<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token string">\'Authorization\'</span><span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`Bearer </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>token<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span> <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token keyword">throw</span> <span class="token string">"No token saved!"</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token constant">BASE_URL</span> <span class="token operator">+</span> endpoint<span class="token punctuation">,</span> config<span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>response <span class="token operator">=></span>\n      response<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>text <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span> text<span class="token punctuation">,</span> response <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">{</span> text<span class="token punctuation">,</span> response <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>response<span class="token punctuation">.</span>ok<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n\n      <span class="token keyword">return</span> text\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">CALL_API</span> <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">\'Call API\'</span><span class="token punctuation">)</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> store <span class="token operator">=></span> next <span class="token operator">=></span> action <span class="token operator">=></span> <span class="token punctuation">{</span>\n\n  <span class="token keyword">const</span> callAPI <span class="token operator">=</span> action<span class="token punctuation">[</span><span class="token constant">CALL_API</span><span class="token punctuation">]</span>\n\n  <span class="token comment">// So the middleware doesn\'t get applied to every single action</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> callAPI <span class="token operator">===</span> <span class="token string">\'undefined\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token function">next</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">let</span> <span class="token punctuation">{</span> endpoint<span class="token punctuation">,</span> types<span class="token punctuation">,</span> authenticated <span class="token punctuation">}</span> <span class="token operator">=</span> callAPI\n\n  <span class="token keyword">const</span> <span class="token punctuation">[</span> requestType<span class="token punctuation">,</span> successType<span class="token punctuation">,</span> errorType <span class="token punctuation">]</span> <span class="token operator">=</span> types\n\n  <span class="token comment">// Passing the authenticated boolean back in our data will let us distinguish between normal and secret quotes</span>\n  <span class="token keyword">return</span> <span class="token function">callApi</span><span class="token punctuation">(</span>endpoint<span class="token punctuation">,</span> authenticated<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>\n    response <span class="token operator">=></span>\n      <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        response<span class="token punctuation">,</span>\n        authenticated<span class="token punctuation">,</span>\n        type<span class="token punctuation">:</span> successType\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    error <span class="token operator">=></span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      error<span class="token punctuation">:</span> error<span class="token punctuation">.</span>message <span class="token operator">||</span> <span class="token string">\'There was an error.\'</span><span class="token punctuation">,</span>\n      type<span class="token punctuation">:</span> errorType\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token comment">// actions.js</span>\n\n<span class="token comment">// The middleware to call the API for quotes</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token constant">CALL_API</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'./middleware/api\'</span>\n\n<span class="token operator">...</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">QUOTE_REQUEST</span> <span class="token operator">=</span> <span class="token string">\'QUOTE_REQUEST\'</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">QUOTE_SUCCESS</span> <span class="token operator">=</span> <span class="token string">\'QUOTE_SUCCESS\'</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">QUOTE_FAILURE</span> <span class="token operator">=</span> <span class="token string">\'QUOTE_FAILURE\'</span>\n\n<span class="token comment">// Uses the API middlware to get a quote</span>\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">fetchQuote</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">[</span><span class="token constant">CALL_API</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      endpoint<span class="token punctuation">:</span> <span class="token string">\'random-quote\'</span><span class="token punctuation">,</span>\n      types<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token constant">QUOTE_REQUEST</span><span class="token punctuation">,</span> <span class="token constant">QUOTE_SUCCESS</span><span class="token punctuation">,</span> <span class="token constant">QUOTE_FAILURE</span><span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// Same API middlware is used to get a</span>\n<span class="token comment">// secret quote, but we set authenticated</span>\n<span class="token comment">// to true so that the auth header is sent</span>\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">fetchSecretQuote</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">[</span><span class="token constant">CALL_API</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      endpoint<span class="token punctuation">:</span> <span class="token string">\'protected/random-quote\'</span><span class="token punctuation">,</span>\n      authenticated<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n      types<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token constant">QUOTE_REQUEST</span><span class="token punctuation">,</span> <span class="token constant">QUOTE_SUCCESS</span><span class="token punctuation">,</span> <span class="token constant">QUOTE_FAILURE</span><span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token operator">...</span>\n\nĐoạn code trên có sử dụng cú pháp <span class="token punctuation">[</span>computed property<span class="token punctuation">]</span><span class="token punctuation">(</span>https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>developer<span class="token punctuation">.</span>mozilla<span class="token punctuation">.</span>org<span class="token operator">/</span>en<span class="token operator">-</span><span class="token constant">US</span><span class="token operator">/</span>docs<span class="token operator">/</span>Web<span class="token operator">/</span>JavaScript<span class="token operator">/</span>Reference<span class="token operator">/</span>Operators<span class="token operator">/</span>Object_initializer#Computed_property_names<span class="token punctuation">)</span>\n\n<span class="token template-string"><span class="token string">`quotes`</span></span> reducer sẽ handle cái action trên\n\n<span class="token template-string"><span class="token string">``</span></span>`js\n<span class="token comment">// reducers.js</span>\n\n<span class="token operator">...</span>\n\n<span class="token keyword">import</span> <span class="token punctuation">{</span>\n  <span class="token constant">LOGIN_REQUEST</span><span class="token punctuation">,</span> <span class="token constant">LOGIN_SUCCESS</span><span class="token punctuation">,</span> <span class="token constant">LOGIN_FAILURE</span><span class="token punctuation">,</span> <span class="token constant">LOGOUT_SUCCESS</span><span class="token punctuation">,</span>\n  <span class="token constant">QUOTE_REQUEST</span><span class="token punctuation">,</span> <span class="token constant">QUOTE_SUCCESS</span><span class="token punctuation">,</span> <span class="token constant">QUOTE_FAILURE</span>\n<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'./actions\'</span>\n\n<span class="token operator">...</span>\n\n<span class="token comment">// The quotes reducer</span>\n<span class="token keyword">function</span> <span class="token function">quotes</span><span class="token punctuation">(</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>\n    isFetching<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    quote<span class="token punctuation">:</span> <span class="token string">\'\'</span><span class="token punctuation">,</span>\n    authenticated<span class="token punctuation">:</span> <span class="token boolean">false</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> action<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">case</span> <span class="token constant">QUOTE_REQUEST</span><span class="token punctuation">:</span>\n      <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> state<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n        isFetching<span class="token punctuation">:</span> <span class="token boolean">true</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token keyword">case</span> <span class="token constant">QUOTE_SUCCESS</span><span class="token punctuation">:</span>\n      <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> state<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n        isFetching<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n        quote<span class="token punctuation">:</span> action<span class="token punctuation">.</span>response<span class="token punctuation">,</span>\n        authenticated<span class="token punctuation">:</span> action<span class="token punctuation">.</span>authenticated <span class="token operator">||</span> <span class="token boolean">false</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token keyword">case</span> <span class="token constant">QUOTE_FAILURE</span><span class="token punctuation">:</span>\n      <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> state<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n        isFetching<span class="token punctuation">:</span> <span class="token boolean">false</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token keyword">default</span><span class="token punctuation">:</span>\n      <span class="token keyword">return</span> state\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token operator">...</span></code></pre>\n      </div>',
timeToRead:6,excerpt:"JWT là gì JWT vận hành thế nào Authentication sử dụng kết hợp với Redux JWT là gì JWT là một đoạn string dạng JSON đã được mã hóa và truyền…",frontmatter:{title:"Authentication với JWT",cover:"",date:"2018-03-14",category:null,tags:["javascript","react"],desc:"Giới thiệu JSON Web Tokens (JWT) và cách hiện thực"},fields:{slug:"/2018-03-14-huong-dan-react-authentication-voi-jwt-redux"}}},pathContext:{slug:"/2018-03-14-huong-dan-react-authentication-voi-jwt-redux",prev:{frontmatter:{title:"React Authentication với Amazon Cognito - Phần 1",desc:"Implement authentication 2 factor sử dụng React, React Router, Amazone Cognito",type:"post",category:null,tags:["javascript","react"]},fields:{slug:"/2018-03-16-huong-dan-react-authentication-phan-1"}},next:{frontmatter:{title:"Sync extensions của VSCode",desc:"Khi sử dụng VSCode chắc ai cũng cài thêm một mớ extensions, lỡ ngày nào cài lại máy, hay sử dùng máy công ty, máy ở nhà muốn VSCode sync mấy cái extentions hay sử dụng",type:"post",category:null,tags:["javascript"]},fields:{slug:"/2018-03-14-huong-dan-sync-addin-vscode"}}}}}});
//# sourceMappingURL=path---2018-03-14-huong-dan-react-authentication-voi-jwt-redux-22ef47e6d634268b3fa1.js.map