webpackJsonp([66],{"./node_modules/json-loader/index.js!./.cache/json/2018-03-14-react-authentication-voi-jwt-redux.json":function(n,s){n.exports={data:{markdownRemark:{html:'<h1>JWT là gì</h1>\n<p>JWT là một đoạn string dạng JSON đã được mã hóa và truyền qua header để làm nhiệm vụ authenticate. Bên cạnh secret key, cục JWT còn chứa một số thông tin khác được hash kèm trong JSON.</p>\n<h1>JWT vận hành thế nào</h1>\n<p>Khi user đăng nhập thành công, server sẽ trả về một cục JWT, chúng ta lưu cục này lại trong <code>localStorage</code> để sử dụng về sau. Khi muốn thực hiện một request nào đó, chẳng hạn gọi đến API để lấy dữ liệu, mà cần xác thực đã đăng nhập, ta gởi cái token này kèm trong header của request. Server kiểm trả token này và thực thi yêu cầu nếu kiểm tra thấy hợp lệ.</p>\n<p>Nội dung của header thường sẽ là</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>Authorization: Bearer eyJhbGciOiJIUzI1NiIsI </code></pre>\n      </div>\n<p>Hình minh họa sau mô tả cách chạy của quá trình này</p>\n<p><img src="https://cms-assets.tutsplus.com/uploads/users/1885/posts/30460/image/jwt-diagram.png"></p>\n<h1>Authentication sử dụng kết hợp với Redux</h1>\n<p>Tạo Redux Store, ở đây chúng ta sẽ cần sử dụng tới middleware, để mỗi khi có một request đến API, thằng middleware này sẽ chèn thêm vào header đoạn authentication. Setup redux store với middleware</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createStore<span class="token punctuation">,</span> applyMiddleware <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'redux\'</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Provider <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'react-redux\'</span>\n<span class="token keyword">import</span> thunkMiddleware <span class="token keyword">from</span> <span class="token string">\'redux-thunk\'</span>\n<span class="token keyword">import</span> quotesApp <span class="token keyword">from</span> <span class="token string">\'./reducers\'</span>\n<span class="token keyword">import</span> api <span class="token keyword">from</span> <span class="token string">\'./middleware/api\'</span>\n\n<span class="token keyword">let</span> createStoreWithMiddleware <span class="token operator">=</span> <span class="token function">applyMiddleware</span><span class="token punctuation">(</span>thunkMiddleware<span class="token punctuation">,</span> api<span class="token punctuation">)</span><span class="token punctuation">(</span>createStore<span class="token punctuation">)</span>\n\n<span class="token keyword">let</span> store <span class="token operator">=</span> <span class="token function">createStoreWithMiddleware</span><span class="token punctuation">(</span>quotesApp<span class="token punctuation">)</span>\n\n<span class="token keyword">let</span> rootElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">\'root\'</span><span class="token punctuation">)</span>\n\n<span class="token function">render</span><span class="token punctuation">(</span>\n  <span class="token operator">&lt;</span>Provider store<span class="token operator">=</span><span class="token punctuation">{</span>store<span class="token punctuation">}</span><span class="token operator">></span>\n    <span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">></span>\n  <span class="token operator">&lt;</span><span class="token operator">/</span>Provider<span class="token operator">></span><span class="token punctuation">,</span>\n  rootElement\n<span class="token punctuation">)</span>\n</code></pre>\n      </div>\n<p>Component App chúng ta sẽ hiện thực nó như sau</p>\n<div class="gatsby-highlight">\n      <pre class="language-jsx"><code><span class="token comment" spellcheck="true">// containers/App.js</span>\n\n<span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component<span class="token punctuation">,</span> PropTypes <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'react\'</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> connect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'react-redux\'</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> loginUser<span class="token punctuation">,</span> fetchQuote<span class="token punctuation">,</span> fetchSecretQuote <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'../actions\'</span>\n<span class="token keyword">import</span> Login <span class="token keyword">from</span> <span class="token string">\'../components/Login\'</span>\n<span class="token keyword">import</span> Navbar <span class="token keyword">from</span> <span class="token string">\'../components/Navbar\'</span>\n<span class="token keyword">import</span> Quotes <span class="token keyword">from</span> <span class="token string">\'../components/Quotes\'</span>\n\n<span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> dispatch<span class="token punctuation">,</span> quote<span class="token punctuation">,</span> isAuthenticated<span class="token punctuation">,</span> errorMessage<span class="token punctuation">,</span> isSecretQuote <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Navbar</span>\n          <span class="token attr-name">isAuthenticated</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>isAuthenticated<span class="token punctuation">}</span></span>\n          <span class="token attr-name">errorMessage</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>errorMessage<span class="token punctuation">}</span></span>\n          <span class="token attr-name">dispatch</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>dispatch<span class="token punctuation">}</span></span>\n        <span class="token punctuation">/></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">\'</span>container<span class="token punctuation">\'</span></span><span class="token punctuation">></span></span>\n          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Quotes</span>\n            <span class="token attr-name">onQuoteClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">fetchQuote</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span>\n            <span class="token attr-name">onSecretQuoteClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">fetchSecretQuote</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span>\n            <span class="token attr-name">isAuthenticated</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>isAuthenticated<span class="token punctuation">}</span></span>\n            <span class="token attr-name">quote</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>quote<span class="token punctuation">}</span></span>\n            <span class="token attr-name">isSecretQuote</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>isSecretQuote<span class="token punctuation">}</span></span>\n          <span class="token punctuation">/></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n    <span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\nApp<span class="token punctuation">.</span>propTypes <span class="token operator">=</span> <span class="token punctuation">{</span>\n  dispatch<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span>func<span class="token punctuation">.</span>isRequired<span class="token punctuation">,</span>\n  quote<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span>string<span class="token punctuation">,</span>\n  isAuthenticated<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span>bool<span class="token punctuation">.</span>isRequired<span class="token punctuation">,</span>\n  errorMessage<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span>string<span class="token punctuation">,</span>\n  isSecretQuote<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span>bool<span class="token punctuation">.</span>isRequired\n<span class="token punctuation">}</span>\n\n<span class="token comment" spellcheck="true">// These props come from the application\'s</span>\n<span class="token comment" spellcheck="true">// state when it is started</span>\n<span class="token keyword">function</span> <span class="token function">mapStateToProps</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> quotes<span class="token punctuation">,</span> auth <span class="token punctuation">}</span> <span class="token operator">=</span> state\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> quote<span class="token punctuation">,</span> authenticated <span class="token punctuation">}</span> <span class="token operator">=</span> quotes\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> isAuthenticated<span class="token punctuation">,</span> errorMessage <span class="token punctuation">}</span> <span class="token operator">=</span> auth\n\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    quote<span class="token punctuation">,</span>\n    isSecretQuote<span class="token punctuation">:</span> authenticated<span class="token punctuation">,</span>\n    isAuthenticated<span class="token punctuation">,</span>\n    errorMessage\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">connect</span><span class="token punctuation">(</span>mapStateToProps<span class="token punctuation">)</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span>\n</code></pre>\n      </div>\n<p>Action để gọi login</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token comment" spellcheck="true">// actions.js</span>\n\n<span class="token comment" spellcheck="true">// There are three possible states for our login</span>\n<span class="token comment" spellcheck="true">// process and we need actions for each of them</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> LOGIN_REQUEST <span class="token operator">=</span> <span class="token string">\'LOGIN_REQUEST\'</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> LOGIN_SUCCESS <span class="token operator">=</span> <span class="token string">\'LOGIN_SUCCESS\'</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> LOGIN_FAILURE <span class="token operator">=</span> <span class="token string">\'LOGIN_FAILURE\'</span>\n\n<span class="token keyword">function</span> <span class="token function">requestLogin</span><span class="token punctuation">(</span>creds<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    type<span class="token punctuation">:</span> LOGIN_REQUEST<span class="token punctuation">,</span>\n    isFetching<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    isAuthenticated<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    creds\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">receiveLogin</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    type<span class="token punctuation">:</span> LOGIN_SUCCESS<span class="token punctuation">,</span>\n    isFetching<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    isAuthenticated<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    id_token<span class="token punctuation">:</span> user<span class="token punctuation">.</span>id_token\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">loginError</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    type<span class="token punctuation">:</span> LOGIN_FAILURE<span class="token punctuation">,</span>\n    isFetching<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    isAuthenticated<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    message\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment" spellcheck="true">// Calls the API to get a token and</span>\n<span class="token comment" spellcheck="true">// dispatches actions along the way</span>\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">loginUser</span><span class="token punctuation">(</span>creds<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n  <span class="token keyword">let</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>\n    method<span class="token punctuation">:</span> <span class="token string">\'POST\'</span><span class="token punctuation">,</span>\n    headers<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token string">\'Content-Type\'</span><span class="token punctuation">:</span><span class="token string">\'application/x-www-form-urlencoded\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    body<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`username=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>creds<span class="token punctuation">.</span>username<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&amp;password=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>creds<span class="token punctuation">.</span>password<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> dispatch <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n    <span class="token comment" spellcheck="true">// We dispatch requestLogin to kickoff the call to the API</span>\n    <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">requestLogin</span><span class="token punctuation">(</span>creds<span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n    <span class="token keyword">return</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">\'http://localhost:3001/sessions/create\'</span><span class="token punctuation">,</span> config<span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>response <span class="token operator">=</span><span class="token operator">></span>\n        response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>user <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span> user<span class="token punctuation">,</span> response <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n            <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">{</span> user<span class="token punctuation">,</span> response <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>  <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>response<span class="token punctuation">.</span>ok<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token comment" spellcheck="true">// If there was a problem, we want to</span>\n          <span class="token comment" spellcheck="true">// dispatch the error condition</span>\n          <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">loginError</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span>\n          <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n          <span class="token comment" spellcheck="true">// If login was successful, set the token in local storage</span>\n          localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">\'id_token\'</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span>id_token<span class="token punctuation">)</span>\n          localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">\'id_token\'</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span>access_token<span class="token punctuation">)</span>\n          <span class="token comment" spellcheck="true">// Dispatch the success action</span>\n          <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">receiveLogin</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Error: "</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>Ở đây chúng ta cũng đã lưu token này lại nếu user đăng nhập thành công xuống <code>localStorage</code>, đồng thời chúng ta cũng dispatch cái action <code>receivedLogin</code>, việc lưu token này có thể lưu nó ở chổ nào đó khác, tuy nhiên không được lưu nó trong <code>reducer</code>, vì nó có thể gây ra side effect.</p>\n<p>Còn việc logout user cũng tương tự, ta chỉ việc set <code>isAuthenticated = false</code> và xóa token này đi</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token comment" spellcheck="true">// Logs the user out</span>\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">logoutUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> dispatch <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n    <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">requestLogout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    localStorage<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span><span class="token string">\'id_token\'</span><span class="token punctuation">)</span>\n    localStorage<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span><span class="token string">\'access_token\'</span><span class="token punctuation">)</span>\n    <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">receiveLogout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>reducer sẽ như sau</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> combineReducers <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'redux\'</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span>\n  LOGIN_REQUEST<span class="token punctuation">,</span> LOGIN_SUCCESS<span class="token punctuation">,</span> LOGIN_FAILURE<span class="token punctuation">,</span> LOGOUT_SUCCESS\n<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'./actions\'</span>\n\n<span class="token comment" spellcheck="true">// The auth reducer. The starting state sets authentication</span>\n<span class="token comment" spellcheck="true">// based on a token being in local storage. In a real app,</span>\n<span class="token comment" spellcheck="true">// we would also want a util to check if the token is expired.</span>\n<span class="token keyword">function</span> <span class="token function">auth</span><span class="token punctuation">(</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>\n    isFetching<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    isAuthenticated<span class="token punctuation">:</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">\'id_token\'</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token punctuation">:</span> <span class="token boolean">false</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> action<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">case</span> LOGIN_REQUEST<span class="token punctuation">:</span>\n      <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> state<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n        isFetching<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n        isAuthenticated<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n        user<span class="token punctuation">:</span> action<span class="token punctuation">.</span>creds\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token keyword">case</span> LOGIN_SUCCESS<span class="token punctuation">:</span>\n      <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> state<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n        isFetching<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n        isAuthenticated<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n        errorMessage<span class="token punctuation">:</span> <span class="token string">\'\'</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token keyword">case</span> LOGIN_FAILURE<span class="token punctuation">:</span>\n      <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> state<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n        isFetching<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n        isAuthenticated<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n        errorMessage<span class="token punctuation">:</span> action<span class="token punctuation">.</span>message\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token keyword">case</span> LOGOUT_SUCCESS<span class="token punctuation">:</span>\n      <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> state<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n        isFetching<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n        isAuthenticated<span class="token punctuation">:</span> <span class="token boolean">false</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token keyword">default</span><span class="token punctuation">:</span>\n      <span class="token keyword">return</span> state\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment" spellcheck="true">// The quotes reducer</span>\n<span class="token keyword">function</span> <span class="token function">quotes</span><span class="token punctuation">(</span>state <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> action<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n    <span class="token keyword">default</span><span class="token punctuation">:</span>\n      <span class="token keyword">return</span> state\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment" spellcheck="true">// We combine the reducers here so that they</span>\n<span class="token comment" spellcheck="true">// can be left split apart above</span>\n<span class="token keyword">const</span> quotesApp <span class="token operator">=</span> <span class="token function">combineReducers</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  auth<span class="token punctuation">,</span>\n  quotes\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> quotesApp\n</code></pre>\n      </div>\n<p>Quay lại với API middleware, như đã nói trên, giờ mỗi khi send đi một request, trong middleware chúng ta sẽ chèn thêm giá trị JWT này vào header</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token comment" spellcheck="true">// middleware/api.js</span>\n\n<span class="token keyword">const</span> BASE_URL <span class="token operator">=</span> <span class="token string">\'http://localhost:3001/api/\'</span>\n\n<span class="token keyword">function</span> <span class="token function">callApi</span><span class="token punctuation">(</span>endpoint<span class="token punctuation">,</span> authenticated<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n  <span class="token keyword">let</span> token <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">\'access_token\'</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token keyword">null</span>\n  <span class="token keyword">let</span> config <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n  <span class="token keyword">if</span><span class="token punctuation">(</span>authenticated<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      config <span class="token operator">=</span> <span class="token punctuation">{</span>\n        headers<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token string">\'Authorization\'</span><span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`Bearer </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>token<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span> <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token keyword">throw</span> <span class="token string">"No token saved!"</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> <span class="token function">fetch</span><span class="token punctuation">(</span>BASE_URL <span class="token operator">+</span> endpoint<span class="token punctuation">,</span> config<span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>response <span class="token operator">=</span><span class="token operator">></span>\n      response<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>text <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span> text<span class="token punctuation">,</span> response <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">{</span> text<span class="token punctuation">,</span> response <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>response<span class="token punctuation">.</span>ok<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n\n      <span class="token keyword">return</span> text\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> CALL_API <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">\'Call API\'</span><span class="token punctuation">)</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> store <span class="token operator">=</span><span class="token operator">></span> next <span class="token operator">=</span><span class="token operator">></span> action <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n\n  <span class="token keyword">const</span> callAPI <span class="token operator">=</span> action<span class="token punctuation">[</span>CALL_API<span class="token punctuation">]</span>\n\n  <span class="token comment" spellcheck="true">// So the middleware doesn\'t get applied to every single action</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> callAPI <span class="token operator">===</span> <span class="token string">\'undefined\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token function">next</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">let</span> <span class="token punctuation">{</span> endpoint<span class="token punctuation">,</span> types<span class="token punctuation">,</span> authenticated <span class="token punctuation">}</span> <span class="token operator">=</span> callAPI\n\n  <span class="token keyword">const</span> <span class="token punctuation">[</span> requestType<span class="token punctuation">,</span> successType<span class="token punctuation">,</span> errorType <span class="token punctuation">]</span> <span class="token operator">=</span> types\n\n  <span class="token comment" spellcheck="true">// Passing the authenticated boolean back in our data will let us distinguish between normal and secret quotes</span>\n  <span class="token keyword">return</span> <span class="token function">callApi</span><span class="token punctuation">(</span>endpoint<span class="token punctuation">,</span> authenticated<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>\n    response <span class="token operator">=</span><span class="token operator">></span>\n      <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        response<span class="token punctuation">,</span>\n        authenticated<span class="token punctuation">,</span>\n        type<span class="token punctuation">:</span> successType\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    error <span class="token operator">=</span><span class="token operator">></span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      error<span class="token punctuation">:</span> error<span class="token punctuation">.</span>message <span class="token operator">||</span> <span class="token string">\'There was an error.\'</span><span class="token punctuation">,</span>\n      type<span class="token punctuation">:</span> errorType\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token comment" spellcheck="true">// actions.js</span>\n\n<span class="token comment" spellcheck="true">// The middleware to call the API for quotes</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> CALL_API <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'./middleware/api\'</span>\n\n<span class="token operator">...</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> QUOTE_REQUEST <span class="token operator">=</span> <span class="token string">\'QUOTE_REQUEST\'</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> QUOTE_SUCCESS <span class="token operator">=</span> <span class="token string">\'QUOTE_SUCCESS\'</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> QUOTE_FAILURE <span class="token operator">=</span> <span class="token string">\'QUOTE_FAILURE\'</span>\n\n<span class="token comment" spellcheck="true">// Uses the API middlware to get a quote</span>\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">fetchQuote</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">[</span>CALL_API<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      endpoint<span class="token punctuation">:</span> <span class="token string">\'random-quote\'</span><span class="token punctuation">,</span>\n      types<span class="token punctuation">:</span> <span class="token punctuation">[</span>QUOTE_REQUEST<span class="token punctuation">,</span> QUOTE_SUCCESS<span class="token punctuation">,</span> QUOTE_FAILURE<span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment" spellcheck="true">// Same API middlware is used to get a</span>\n<span class="token comment" spellcheck="true">// secret quote, but we set authenticated</span>\n<span class="token comment" spellcheck="true">// to true so that the auth header is sent</span>\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">fetchSecretQuote</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">[</span>CALL_API<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      endpoint<span class="token punctuation">:</span> <span class="token string">\'protected/random-quote\'</span><span class="token punctuation">,</span>\n      authenticated<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n      types<span class="token punctuation">:</span> <span class="token punctuation">[</span>QUOTE_REQUEST<span class="token punctuation">,</span> QUOTE_SUCCESS<span class="token punctuation">,</span> QUOTE_FAILURE<span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token operator">...</span>\n\nĐoạn code trên có sử dụng cú pháp <span class="token punctuation">[</span>computed property<span class="token punctuation">]</span><span class="token punctuation">(</span>https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>developer<span class="token punctuation">.</span>mozilla<span class="token punctuation">.</span>org<span class="token operator">/</span>en<span class="token operator">-</span>US<span class="token operator">/</span>docs<span class="token operator">/</span>Web<span class="token operator">/</span>JavaScript<span class="token operator">/</span>Reference<span class="token operator">/</span>Operators<span class="token operator">/</span>Object_initializer#Computed_property_names<span class="token punctuation">)</span>\n\n<span class="token template-string"><span class="token string">`quotes`</span></span> reducer sẽ handle cái action trên\n\n<span class="token template-string"><span class="token string">``</span></span>`js\n<span class="token comment" spellcheck="true">// reducers.js</span>\n\n<span class="token operator">...</span>\n\n<span class="token keyword">import</span> <span class="token punctuation">{</span>\n  LOGIN_REQUEST<span class="token punctuation">,</span> LOGIN_SUCCESS<span class="token punctuation">,</span> LOGIN_FAILURE<span class="token punctuation">,</span> LOGOUT_SUCCESS<span class="token punctuation">,</span>\n  QUOTE_REQUEST<span class="token punctuation">,</span> QUOTE_SUCCESS<span class="token punctuation">,</span> QUOTE_FAILURE\n<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'./actions\'</span>\n\n<span class="token operator">...</span>\n\n<span class="token comment" spellcheck="true">// The quotes reducer</span>\n<span class="token keyword">function</span> <span class="token function">quotes</span><span class="token punctuation">(</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>\n    isFetching<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    quote<span class="token punctuation">:</span> <span class="token string">\'\'</span><span class="token punctuation">,</span>\n    authenticated<span class="token punctuation">:</span> <span class="token boolean">false</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> action<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">case</span> QUOTE_REQUEST<span class="token punctuation">:</span>\n      <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> state<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n        isFetching<span class="token punctuation">:</span> <span class="token boolean">true</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token keyword">case</span> QUOTE_SUCCESS<span class="token punctuation">:</span>\n      <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> state<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n        isFetching<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n        quote<span class="token punctuation">:</span> action<span class="token punctuation">.</span>response<span class="token punctuation">,</span>\n        authenticated<span class="token punctuation">:</span> action<span class="token punctuation">.</span>authenticated <span class="token operator">||</span> <span class="token boolean">false</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token keyword">case</span> QUOTE_FAILURE<span class="token punctuation">:</span>\n      <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> state<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n        isFetching<span class="token punctuation">:</span> <span class="token boolean">false</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token keyword">default</span><span class="token punctuation">:</span>\n      <span class="token keyword">return</span> state\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token operator">...</span>\n</code></pre>\n      </div>',
frontmatter:{date:"March 14, 2018",path:"/2018-03-14-react-authentication-voi-jwt-redux",tags:["javascript","react"],title:"Authentication với JWT",desc:"Giới thiệu JSON Web Tokens (JWT) và cách hiện thực"}}},pathContext:{prev:{excerpt:"Trong demo chúng ta sẽ sử dụng Create React App Glamor React Router Amazon Cognito để authentication AWS amplify để tương tác với AWS Services Setup Khởi tạo project và các thư viện sẽ sử dụng Cài AWSMobile CLI Khởi tạo config AWS IAM Nó sẽ tạo...",html:'<p>Trong demo chúng ta sẽ sử dụng</p>\n<ul>\n<li>Create React App</li>\n<li>Glamor</li>\n<li>React Router</li>\n<li>Amazon Cognito để authentication</li>\n<li>AWS amplify để tương tác với AWS Services</li>\n</ul>\n<h2>Setup</h2>\n<p>Khởi tạo project và các thư viện sẽ sử dụng</p>\n<div class="gatsby-highlight">\n      <pre class="language-vim"><code>create<span class="token operator">-</span>react<span class="token operator">-</span>app react<span class="token operator">-</span>auth\n<span class="token keyword">cd</span> react<span class="token operator">-</span>auth\n\nnpm i react<span class="token operator">-</span>router<span class="token operator">-</span>dom glamor <span class="token operator">-</span><span class="token operator">-</span>save\n</code></pre>\n      </div>\n<p>Cài AWSMobile CLI</p>\n<div class="gatsby-highlight">\n      <pre class="language-vim"><code>npm i <span class="token operator">-</span>g awsmobile<span class="token operator">-</span>cli\n</code></pre>\n      </div>\n<p>Khởi tạo config AWS IAM</p>\n<div class="gatsby-highlight">\n      <pre class="language-vim"><code>awsmobile configure\nawsmobile init\n</code></pre>\n      </div>\n<p>Nó sẽ tạo project Mobile Hub và file aws-exports.js trong thư mục src. Tiếp theo, thêm user-signin và deploy các config mới</p>\n<div class="gatsby-highlight">\n      <pre class="language-vim"><code>awsmobile user<span class="token operator">-</span>signin enable\nawsmobile push\n</code></pre>\n      </div>\n<p><code>awsmobile user-signin enable</code> sẽ bật Amazon Congito trong project với các thiết đặt mặc định, bao gồm 2 factor authentication với SMS (sẽ thêm TOTP sau). Nếu muôn can thiệp các thiệt đặt, vào trực tiếp <a href="https://signin.aws.amazon.com/signin?redirect_uri=https%253A%252F%252Fconsole.aws.amazon.com%252Fcognito%252Fhome%253Fregion%253Dus-east-1%2526state%253DhashArgs%2523%2526isauthcode%253Dtrue&#x26;client_id=arn%253Aaws%253Aiam%253A%253A015428540659%253Auser%252Fcognito&#x26;forceMobileApp=0">Amazon Cognito</a> để chỉnh</p>\n<h1>Màn hình đăng ký</h1>\n<p><img src="https://cdn-images-1.medium.com/max/800/1*U_Oa4dWFeIqJ9TPJFx9lmQ.jpeg"></p>\n<p>Để tương tác với Amazon Cognito, chúng ta sẽ sử các hàm trong class <code>Auth</code> từ thư viện <code>aws-amplify</code>:</p>\n<p><code>signUp</code> - tạo user mới</p>\n<div class="gatsby-highlight">\n      <pre class="language-typescript"><code><span class="token function">signUp</span><span class="token punctuation">(</span>username<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> password<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> attributes<span class="token operator">?</span><span class="token punctuation">:</span> object<span class="token punctuation">)</span>\n</code></pre>\n      </div>\n<p><code>confirmSignUp</code> - để xác nhận đăng ký thành công</p>\n<div class="gatsby-highlight">\n      <pre class="language-typescript"><code><span class="token function">confirmSignUp</span><span class="token punctuation">(</span>username<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> authenticationCode<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span>\n</code></pre>\n      </div>\n<p><code>signIn</code> - đăng nhập</p>\n<div class="gatsby-highlight">\n      <pre class="language-typescript"><code><span class="token function">signIn</span><span class="token punctuation">(</span>username<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> password<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span>\n</code></pre>\n      </div>\n<p><code>confirmSignIn</code> - xác nhận đăng nhập</p>\n<div class="gatsby-highlight">\n      <pre class="language-typescript"><code><span class="token function">confirmSignIn</span><span class="token punctuation">(</span>user<span class="token punctuation">:</span> object<span class="token punctuation">,</span> authenticationCode<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span>\n</code></pre>\n      </div>\n<p>Trong file root của project, thường là <code>index.js</code> </p>\n<div class="gatsby-highlight">\n      <pre class="language-jsx"><code><span class="token comment" spellcheck="true">// một số import khác</span>\n<span class="token comment" spellcheck="true">// </span>\n<span class="token keyword">import</span> config <span class="token keyword">from</span> <span class="token string">\'./aws-exports\'</span>\n<span class="token keyword">import</span> Amplify <span class="token keyword">from</span> <span class="token string">\'aws-amplify\'</span>\n\nAmplify<span class="token punctuation">.</span><span class="token function">configure</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>\n\nReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>App</span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">\'root\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token function">registerServiceWorker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>Screen <code>SignUp.js</code></p>\n<div class="gatsby-highlight">\n      <pre class="language-jsx"><code><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">\'react\'</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> css <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'glamor\'</span>\n\n<span class="token keyword">class</span> <span class="token class-name">SignUp</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>\n  state <span class="token operator">=</span> <span class="token punctuation">{</span>\n    username<span class="token punctuation">:</span> <span class="token string">\'\'</span><span class="token punctuation">,</span>\n    password<span class="token punctuation">:</span> <span class="token string">\'\'</span><span class="token punctuation">,</span>\n    email<span class="token punctuation">:</span> <span class="token string">\'\'</span><span class="token punctuation">,</span>\n    phone_number<span class="token punctuation">:</span> <span class="token string">\'\'</span><span class="token punctuation">,</span>\n    authCode<span class="token punctuation">:</span> <span class="token string">\'\'</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>\n      <span class="token operator">&lt;</span>div <span class="token punctuation">{</span><span class="token operator">...</span><span class="token function">css</span><span class="token punctuation">(</span>styles<span class="token punctuation">.</span>container<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>SignUp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n    <span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> styles <span class="token operator">=</span> <span class="token punctuation">{</span>\n  container<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    display<span class="token punctuation">:</span> <span class="token string">\'flex\'</span><span class="token punctuation">,</span>\n    flexDirection<span class="token punctuation">:</span> <span class="token string">\'column\'</span><span class="token punctuation">,</span>\n    alignItems<span class="token punctuation">:</span> <span class="token string">\'center\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>Flow sẽ như thế này, sau khi user cung cấp các thông tin trong form signup, chúng ta gọi đến phương thức <code>signUp</code>, user sẽ nhận được một mã code để verify quá SMS, user điền mã code này vào form verify, chúng ta verify cái mã code này bằng phương thức \'confirmSignUp\'</p>\n<p><img src="https://cdn-images-1.medium.com/max/1000/1*Z1sFmf-KG7iiHG_-VMieQw.jpeg"></p>\n<div class="gatsby-highlight">\n      <pre class="language-jsx"><code><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">\'react\'</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> css <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'glamor\'</span>\n\n<span class="token keyword">class</span> <span class="token class-name">SignUp</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>\n  state <span class="token operator">=</span> <span class="token punctuation">{</span>\n    username<span class="token punctuation">:</span> <span class="token string">\'\'</span><span class="token punctuation">,</span>\n    password<span class="token punctuation">:</span> <span class="token string">\'\'</span><span class="token punctuation">,</span>\n    email<span class="token punctuation">:</span> <span class="token string">\'\'</span><span class="token punctuation">,</span>\n    phone_number<span class="token punctuation">:</span> <span class="token string">\'\'</span><span class="token punctuation">,</span>\n    authCode<span class="token punctuation">:</span> <span class="token string">\'\'</span>\n  <span class="token punctuation">}</span>\n  onChange <span class="token operator">=</span> <span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">:</span> value <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>\n      <span class="token operator">&lt;</span>div <span class="token punctuation">{</span><span class="token operator">...</span><span class="token function">css</span><span class="token punctuation">(</span>styles<span class="token punctuation">.</span>container<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>Sign Up<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>\n        <span class="token operator">&lt;</span>input\n          <span class="token punctuation">{</span><span class="token operator">...</span><span class="token function">css</span><span class="token punctuation">(</span>styles<span class="token punctuation">.</span>input<span class="token punctuation">)</span><span class="token punctuation">}</span>\n          placeholder<span class="token operator">=</span><span class="token string">\'Username\'</span>\n          onChange<span class="token operator">=</span><span class="token punctuation">{</span>evt <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">onChange</span><span class="token punctuation">(</span><span class="token string">\'username\'</span><span class="token punctuation">,</span> evt<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span>\n        <span class="token operator">/</span><span class="token operator">></span>\n        <span class="token operator">&lt;</span>input\n          <span class="token punctuation">{</span><span class="token operator">...</span><span class="token function">css</span><span class="token punctuation">(</span>styles<span class="token punctuation">.</span>input<span class="token punctuation">)</span><span class="token punctuation">}</span>\n          placeholder<span class="token operator">=</span><span class="token string">\'Password\'</span>\n          type<span class="token operator">=</span><span class="token string">\'password\'</span>\n          onChange<span class="token operator">=</span><span class="token punctuation">{</span>evt <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">onChange</span><span class="token punctuation">(</span><span class="token string">\'password\'</span><span class="token punctuation">,</span> evt<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span>\n        <span class="token operator">/</span><span class="token operator">></span>\n        <span class="token operator">&lt;</span>input\n          <span class="token punctuation">{</span><span class="token operator">...</span><span class="token function">css</span><span class="token punctuation">(</span>styles<span class="token punctuation">.</span>input<span class="token punctuation">)</span><span class="token punctuation">}</span>\n          placeholder<span class="token operator">=</span><span class="token string">\'Email\'</span>\n          onChange<span class="token operator">=</span><span class="token punctuation">{</span>evt <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">onChange</span><span class="token punctuation">(</span><span class="token string">\'email\'</span><span class="token punctuation">,</span> evt<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span>\n        <span class="token operator">/</span><span class="token operator">></span>\n        <span class="token operator">&lt;</span>input\n          <span class="token punctuation">{</span><span class="token operator">...</span><span class="token function">css</span><span class="token punctuation">(</span>styles<span class="token punctuation">.</span>input<span class="token punctuation">)</span><span class="token punctuation">}</span>\n          placeholder<span class="token operator">=</span><span class="token string">\'Phone Number\'</span>\n          onChange<span class="token operator">=</span><span class="token punctuation">{</span>evt <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">onChange</span><span class="token punctuation">(</span><span class="token string">\'phone_number\'</span><span class="token punctuation">,</span> evt<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span>\n        <span class="token operator">/</span><span class="token operator">></span>\n        <span class="token operator">&lt;</span>div <span class="token punctuation">{</span><span class="token operator">...</span><span class="token function">css</span><span class="token punctuation">(</span>styles<span class="token punctuation">.</span>button<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span>\n          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>Sign Up<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n        \n        <span class="token operator">&lt;</span>input\n          <span class="token punctuation">{</span><span class="token operator">...</span><span class="token function">css</span><span class="token punctuation">(</span>styles<span class="token punctuation">.</span>input<span class="token punctuation">)</span><span class="token punctuation">}</span>\n          placeholder<span class="token operator">=</span><span class="token string">\'Authentication Code\'</span>\n          onChange<span class="token operator">=</span><span class="token punctuation">{</span>evt <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">onChange</span><span class="token punctuation">(</span><span class="token string">\'authCode\'</span><span class="token punctuation">,</span> evt<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span>\n        <span class="token operator">/</span><span class="token operator">></span>\n        <span class="token operator">&lt;</span>div <span class="token punctuation">{</span><span class="token operator">...</span><span class="token function">css</span><span class="token punctuation">(</span>styles<span class="token punctuation">.</span>button<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span>\n          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>Confirm Sign Up<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n        \n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n    <span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> styles <span class="token operator">=</span> <span class="token punctuation">{</span>\n  container<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    display<span class="token punctuation">:</span> <span class="token string">\'flex\'</span><span class="token punctuation">,</span>\n    flexDirection<span class="token punctuation">:</span> <span class="token string">\'column\'</span><span class="token punctuation">,</span>\n    alignItems<span class="token punctuation">:</span> <span class="token string">\'center\'</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  button<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    width<span class="token punctuation">:</span> <span class="token string">\'170px\'</span><span class="token punctuation">,</span>\n    padding<span class="token punctuation">:</span> <span class="token string">\'10px 0px\'</span><span class="token punctuation">,</span>\n    backgroundColor<span class="token punctuation">:</span> <span class="token string">\'#ddd\'</span><span class="token punctuation">,</span>\n    cursor<span class="token punctuation">:</span> <span class="token string">\'pointer\'</span><span class="token punctuation">,</span>\n    borderRadius<span class="token punctuation">:</span> <span class="token string">\'3px\'</span><span class="token punctuation">,</span>\n    <span class="token string">\':hover\'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      backgroundColor<span class="token punctuation">:</span> <span class="token string">\'#ededed\'</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  input<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    height<span class="token punctuation">:</span> <span class="token number">40</span><span class="token punctuation">,</span>\n    marginBottom<span class="token punctuation">:</span> <span class="token string">\'10px\'</span><span class="token punctuation">,</span>\n    border<span class="token punctuation">:</span> <span class="token string">\'none\'</span><span class="token punctuation">,</span>\n    outline<span class="token punctuation">:</span> <span class="token string">\'none\'</span><span class="token punctuation">,</span>\n    borderBottom<span class="token punctuation">:</span> <span class="token string">\'2px solid #4CAF50\'</span><span class="token punctuation">,</span>\n    fontSize<span class="token punctuation">:</span> <span class="token string">\'16px\'</span><span class="token punctuation">,</span>\n    <span class="token string">\'::placeholder\'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      color<span class="token punctuation">:</span> <span class="token string">\'rgba(0, 0, 0, .3)\'</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> SignUp\n</code></pre>\n      </div>\n<p>Xong cái UI, giờ ta sử dụng 2 phương thức class <code>Auth</code></p>\n<div class="gatsby-highlight">\n      <pre class="language-jsx"><code><span class="token comment" spellcheck="true">// previous imports omitted</span>\n\n  <span class="token keyword">import</span> <span class="token punctuation">{</span> Auth <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'aws-amplify\'</span>\n\n  <span class="token comment" spellcheck="true">// previously shown code omitted</span>\n  signUp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> username<span class="token punctuation">,</span> password<span class="token punctuation">,</span> email<span class="token punctuation">,</span> phone_number <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state\n    Auth<span class="token punctuation">.</span><span class="token function">signUp</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      username<span class="token punctuation">,</span>\n      password<span class="token punctuation">,</span>\n      attributes<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        email<span class="token punctuation">,</span>\n        phone_number\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'successful sign up!\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'error signing up: \'</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  confirmSignUp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n    Auth<span class="token punctuation">.</span><span class="token function">confirmSignUp</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>username<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>authCode<span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'successful confirm sign up!\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'error confirming signing up: \'</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment" spellcheck="true">// </span>\n    <span class="token comment" spellcheck="true">// here we need to update the buttons to attach class methods to onClick event</span>\n    <span class="token operator">&lt;</span>div <span class="token punctuation">{</span><span class="token operator">...</span><span class="token function">css</span><span class="token punctuation">(</span>styles<span class="token punctuation">.</span>button<span class="token punctuation">)</span><span class="token punctuation">}</span> onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>signUp<span class="token punctuation">}</span><span class="token operator">></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>Sign Up<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n\n    <span class="token operator">&lt;</span>input\n      <span class="token punctuation">{</span><span class="token operator">...</span><span class="token function">css</span><span class="token punctuation">(</span>styles<span class="token punctuation">.</span>input<span class="token punctuation">)</span><span class="token punctuation">}</span>\n      placeholder<span class="token operator">=</span><span class="token string">\'Authentication Code\'</span>\n      onChange<span class="token operator">=</span><span class="token punctuation">{</span>evt <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">onChange</span><span class="token punctuation">(</span><span class="token string">\'authCode\'</span><span class="token punctuation">,</span> evt<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span>\n    <span class="token operator">/</span><span class="token operator">></span>\n    <span class="token operator">&lt;</span>div <span class="token punctuation">{</span><span class="token operator">...</span><span class="token function">css</span><span class="token punctuation">(</span>styles<span class="token punctuation">.</span>button<span class="token punctuation">)</span><span class="token punctuation">}</span> onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>confirmSignUp<span class="token punctuation">}</span><span class="token operator">></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>Confirm Sign Up<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n  <span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>Cuối cùng import và sử dụng component trong <code>App.js</code></p>\n<div class="gatsby-highlight">\n      <pre class="language-jsx"><code><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> logo <span class="token keyword">from</span> <span class="token string">\'./logo.svg\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token string">\'./App.css\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">import</span> SignUp <span class="token keyword">from</span> <span class="token string">\'./SignUp\'</span>\n\n<span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>App<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>App-header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>logo<span class="token punctuation">}</span></span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>App-logo<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logo<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>\n          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>App-title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Welcome to React<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>SignUp</span> <span class="token punctuation">/></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>Các thông tin của user sẽ được lại trong \'Manage your User Pools\', vào Amazon Coginito dashboard, chọn ứng dụng đã setup, chọn mục \'Users and Settings\'</p>\n<p><img src="https://cdn-images-1.medium.com/max/1000/1*XQfNfYhaGlkD0wxEPtr8bQ.jpeg"></p>\n<h1>Sign In</h1>\n<p>Sign in thì cũng tương tự như signup, chúng ta sử dụng <code>Auth.signIn(username, password)</code>, trả về object nếu thành công, sau đó nó sẽ gởi SMS tới user với code xác nhận lần nữa, verify bằng <code>confirmSignIn</code></p>\n<div class="gatsby-highlight">\n      <pre class="language-jsx"><code><span class="token function">signIn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  Auth<span class="token punctuation">.</span><span class="token function">signIn</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>username<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>password<span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>user <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> user <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'error signing in! :\'</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token function">confirmSignIn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  Auth<span class="token punctuation">.</span><span class="token function">confirmSignIn</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>user<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>authCode<span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>userData <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'userdata: \'</span><span class="token punctuation">,</span> userData<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'error confirming sign in!: \'</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>User data nằm trong cục dữ liệu trả về sau khi gọi hàm <code>confirmSignIn</code></p>\n<p><img src="https://cdn-images-1.medium.com/max/800/1*yBT-_MdRPCIj5KN3PnyFmw.png"></p>\n<p>Có rất nhiều cách để lấy thông tin user đang đăng nhập, có thể dùng <code>Auth.currentAuthenticatedUser()</code> là dễ nhất, toàn bộ API có thể tham khảo <a href="https://aws.github.io/aws-amplify/api/classes/authclass.html">ở đây</a></p>\n<p>Kết thúc phần 1 ở đây, phần 2 tiếp tục với Routing và TOTP để có thể làm Google Authenticator.</p>\n<hr>\n<p>Bài dịch từ tác giả Nader Dabit trên HackerNoon</p>',
id:"C:/xampp/htdocs/luckyluu/posts/2018-03-16-react-authentication-phan-1/index.md absPath of file >>> MarkdownRemark",timeToRead:5,frontmatter:{date:"2018-03-16T13:35:13.234Z",path:"/2018-03-16-react-authentication-phan-1",tags:["javascript","react"],title:"React Authentication với Amazon Cognito - Phần 1"}},next:{excerpt:"Tài khoản Github, danh sách extension sẽ được lưu lên gist Cài thêm extentions tên là Settings Sync - tác giả Shan Khan. Tạo access token trên Github Đăng nhập vào tài khoản Github, vào trang Settings / Developer settings / Personal access tokens...",html:'<ul>\n<li>Tài khoản Github, danh sách extension sẽ được lưu lên gist</li>\n<li>Cài thêm extentions tên là Settings Sync - tác giả Shan Khan.</li>\n</ul>\n<h1>Tạo access token trên Github</h1>\n<p>Đăng nhập vào tài khoản Github, vào trang Settings / Developer settings / Personal access tokens / Generate New Token</p>\n<p><img src="https://shanalikhan.github.io/img/github1.PNG"></p>\n<p>Nhập tên và cấp quyền tạo gist cho token này</p>\n<p><img src="https://shanalikhan.github.io/img/github2.PNG"></p>\n<p>Sau khi tạo xong, nhớ lưu lại token này ở đâu đó</p>\n<p><img src="https://shanalikhan.github.io/img/github3.PNG"></p>\n<h1>Upload những thiết đặt, extensions đã cài cho VSCode</h1>\n<p>Dùng phím tắt <code>Shift + Alt + U</code> hoặc search từ command Palette, search từ sync</p>\n<p>Nó sẽ yêu cầu nhập giá trị token vừa mới tạo</p>\n<p><img src="https://shanalikhan.github.io/img/upload1.png"></p>\n<p>Sau khi upload thành công, nó sẽ trả về gist id, <strong>nhớ copy</strong> và lưu lại giá trị gist Id này để sử dụng trên máy khác.</p>\n<h1>Download các thiết từ gist về</h1>\n<p>Dùng phím tắt <code>Shift + Alt + D</code>, hoặc gọi từ command palette</p>\n<p>Nó sẽ yêu cầu nhập lại token và gist id đã tạo, điền vào, xong!\n<img src="https://shanalikhan.github.io/img/upload1.png">\n<img src="https://shanalikhan.github.io/img/download2.png">\n<img src="https://shanalikhan.github.io/img/download3.png"></p>',id:"C:/xampp/htdocs/luckyluu/posts/2018-03-14-sync-addin-vscode/index.md absPath of file >>> MarkdownRemark",timeToRead:1,frontmatter:{date:"2018-03-14T13:35:13.234Z",path:"/2018-03-14-sync-addin-vscode",tags:["javascript"],title:"Sync extensions của VSCode"}}}}}});
//# sourceMappingURL=path---2018-03-14-react-authentication-voi-jwt-redux-8c940796382bbff6574b.js.map