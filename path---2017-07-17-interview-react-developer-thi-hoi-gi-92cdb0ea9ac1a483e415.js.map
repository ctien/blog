{"version":3,"sources":["webpack:///path---2017-07-17-interview-react-developer-thi-hoi-gi-92cdb0ea9ac1a483e415.js","webpack:///./.cache/json/2017-07-17-interview-react-developer-thi-hoi-gi.json"],"names":["webpackJsonp","./node_modules/json-loader/index.js!./.cache/json/2017-07-17-interview-react-developer-thi-hoi-gi.json","module","exports","data","markdownRemark","html","frontmatter","date","path","tags","title","desc","pathContext","prev","next","excerpt","id","timeToRead"],"mappings":"AAAAA,cAAc,KAERC,yGACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,86RAA4zRC,aAAoYC,KAAA,gBAAAC,KAAA,mDAAAC,MAAA,sBAAAC,MAAA,wCAAAC,KAAA,sFAA2PC,aAAgBC,MAAA,EAAAC,MAAqBC,QAAA,+PAAAV,KAAA,41BAAAW,GAAA,gIAAAC,WAAA,EAAAX,aAAixCC,KAAA,2BAAAC,KAAA,6DAAAC,MAAA,cAAAC,MAAA","file":"path---2017-07-17-interview-react-developer-thi-hoi-gi-92cdb0ea9ac1a483e415.js","sourcesContent":["webpackJsonp([22],{\n\n/***/ \"./node_modules/json-loader/index.js!./.cache/json/2017-07-17-interview-react-developer-thi-hoi-gi.json\":\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h2>Chuyện gì xảy ra khi gọi setSate?</h2>\\n<p>Đầu tiên, object được truyền trong <code>setState</code> sẽ được merge với state hiện tại của component, dựa trên sự thay đổi của object này, UI được update với state mới. Để làm được chuyện này, React sẽ dựng một cây React Element mới, so sánh sự khác nhau của cây element mới và cây element trước đó, React biết được chính xác chỉ cần update phần UI nào đã bị thay đổi.</p>\\n<h2>Sự khác nhau giữa Element và Component trong React?</h2>\\n<p>React Element ám chỉ những gì thấy trên màn hình.</p>\\n<p>React component là một function hoặc class có hoặc không có input và sẽ trả về một React element.</p>\\n<h2>Khi nào thì sử dụng Class Component và Functional Component</h2>\\n<p>Nếu component có state và các phương thức của lifecycle, sử dụng <strong>Class Component</strong>, ngược lại dùng <strong>functional component</strong></p>\\n<h2>Refs trong React dùng để làm gì</h2>\\n<p>Refs cho phép access trực tiếp đến DOM element hoặc một instance của component</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-html\\\"><code><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>input</span> <span class=\\\"token attr-name\\\">type</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>text<span class=\\\"token punctuation\\\">\\\"</span></span> <span class=\\\"token punctuation\\\">/></span></span> this.input = input} />\\n</code></pre>\\n      </div>\\n<h2>Keys trong React là gì</h2>\\n<p>Keys giúp React theo dõi sự thay đổi của một item trong list</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">.</span>todoItems<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span> <span class=\\\"token punctuation\\\">(</span>task<span class=\\\"token punctuation\\\">,</span> uid<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span>\\n    <span class=\\\"token operator\\\">&lt;</span>ul<span class=\\\"token operator\\\">></span>\\n      <span class=\\\"token operator\\\">&lt;</span>li<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">{</span>task<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>li<span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>ul<span class=\\\"token operator\\\">></span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h2>Sự khác nhau giữa controlled component và uncontrolled component</h2>\\n<p>Controlled component là component React control dữ liệu dựa trên state và props, uncontrolled component là component mà dữ liệu được handle bởi DOM</p>\\n<h4>Controlled Component</h4>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-html\\\"><code><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>input</span> <span class=\\\"token attr-name\\\">type</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">'</span>text<span class=\\\"token punctuation\\\">'</span></span> <span class=\\\"token attr-name\\\">value</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span>{this.state.username}</span> <span class=\\\"token attr-name\\\">onChange</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span>{this.updateUsername}</span> <span class=\\\"token punctuation\\\">/></span></span>\\n</code></pre>\\n      </div>\\n<h4>Uncontrolled Component</h4>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-html\\\"><code>&lt;input type='text' ref={(input) => this.input = input} />\\n</code></pre>\\n      </div>\\n<h2>Để gọi AJAX, sự dụng sự kiện nào của lifecycle?</h2>\\n<p><code>componentDidMount</code> , lý do ko sử dụng <code>componentWillMount</code> vì React  có thể gọi componentWillMount nhiều lần nếu cần thiết, thứ 2 không thể chắc chắn AJAX luôn gọi thành công, nếu gơi vào trường hợp đó câu lệnh <code>setState</code> sẽ chạy trên unmounted component.</p>\\n<h2>shouldComponentUpdate dùng để làm gì</h2>\\n<p><code>shouldComponentUpdate</code> cho phép can thiệp quá trình update UI của component và các component con của nó.</p>\\n<h2>Build Product bằng cách nào?</h2>\\n<p>Sử dụng phương thức DefinePlugin của Webpack để set <code>NODE_ENV = production</code>. Quá trình build production sẽ bỏ hết những đoạn như validate propType, cảnh báo này nọ, minify code, remove comments.</p>\\n<h2>Tại sao nên sử dụng React.Children.map() thay vì props.children.map()</h2>\\n<p>props.children chưa chắc lúc nào cũng là array. Ví dụ</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-html\\\"><code><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>Parent</span><span class=\\\"token punctuation\\\">></span></span> <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>h1</span><span class=\\\"token punctuation\\\">></span></span>Welcome.<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>h1</span><span class=\\\"token punctuation\\\">></span></span> <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>Parent</span><span class=\\\"token punctuation\\\">></span></span>\\n</code></pre>\\n      </div>\\n<p>Nếu sử dụng props.children.map trong Parent sẽ bị lỗi vì props.children là một object không phải array.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-html\\\"><code><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>Parent</span><span class=\\\"token punctuation\\\">></span></span>\\n\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>h1</span><span class=\\\"token punctuation\\\">></span></span>Welcome.<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>h1</span><span class=\\\"token punctuation\\\">></span></span>\\n\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>h2</span><span class=\\\"token punctuation\\\">></span></span>props.children will now be an array<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>h2</span><span class=\\\"token punctuation\\\">></span></span>\\n\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>Parent</span><span class=\\\"token punctuation\\\">></span></span>\\n</code></pre>\\n      </div>\\n<p>React.Children.map cho phép props.children là array hoặc object đều được.</p>\\n<h2>Events được xử lý trong React như thế nào?</h2>\\n<p>Các hàm xử lý event trong React sẽ được truyền vào một instance của SyntheticEvent, SyntheticEvent cũng giống như những native event bình thường của Browser trừ việc nó có thể làm việc trên tất cả các trình duyệt.</p>\\n<p>React không attach event vô các child node, mà sẽ lắng nghe tất cả các event sử dụng 1 event listener duy nhất, Với mục đích là để tăng performance và React không cần phải update lại event listener khi update DOM.</p>\\n<h2>Sự khác nhau giữa createElement và cloneElement</h2>\\n<p><code>createElement</code> là để tạo element, <code>cloneElement</code> copy element và đưa vào các props mới.</p>\\n<h2>Argument thứ 2 của setState dùng để làm gì</h2>\\n<p>callback function, function sẽ chạy sau khi <code>component</code> được <code>render</code> lại với state mới.</p>\\n<p>setState là một phương thức bất đồng bộ (asynchronous)</p>\\n<h2>Đoạn code sau sai ở chổ nào</h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>prevState<span class=\\\"token punctuation\\\">,</span> props<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token punctuation\\\">{</span>\\n\\n <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span> streak<span class=\\\"token punctuation\\\">:</span> prevState<span class=\\\"token punctuation\\\">.</span>streak <span class=\\\"token operator\\\">+</span> props<span class=\\\"token punctuation\\\">.</span>count <span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>Không sai gì cả, ít người biết rằng khi setState có thể truyền vào previous state.</p>\\n<p>Nguồn</p>\\n<blockquote>\\n<blockquote>\\n<p><a href=\\\"https://tylermcginnis.com/react-interview-questions/\\\">https://tylermcginnis.com/react-interview-questions/</a></p>\\n</blockquote>\\n</blockquote>\",\"frontmatter\":{\"date\":\"July 17, 2017\",\"path\":\"/2017-07-17-interview-react-developer-thi-hoi-gi\",\"tags\":[\"javascript\",\"react\"],\"title\":\"Interview React Developer thì hỏi gì?\",\"desc\":\"Một vài câu hỏi để kiểm tra mức độ am hiểu react của một lập trình viên frontend\"}}},\"pathContext\":{\"prev\":false,\"next\":{\"excerpt\":\"Làm front end được kha khá năm, đứng trung gian giữa anh developer và anh designer, được tiếp xúc với rất nhiều designer từ cao cấp tới mới ra trường, mình có thể khẳng định là những ảnh designer dù là tự học hay được đào tạo bài bảng qua trường lớp...\",\"html\":\"<p>Làm front end được kha khá năm, đứng trung gian giữa anh developer và anh designer, được tiếp xúc với rất nhiều designer từ cao cấp tới mới ra trường, mình có thể khẳng định là những ảnh designer dù là tự học hay được đào tạo bài bảng qua trường lớp, mỗi anh điều có một kiểu làm việc rất riêng, trong giới designer, đặc biệt là web design, sẽ chẳng anh nào đi theo một cái guide chung nào cả, khác hẳng với developer, nơi mà mọi thứ luôn được chuẩn hóa từng ngày, một anh developer mới vào công ty được thẩy vô trong một cái dự án bự tổ chảng, sau vài ngày training những \\\"luật lệ\\\" được đề ra từ lớp người đi trước là ảnh có thể follow theo và bắt đầu làm việc với một cách mượt mà. Ở góc độ của một người đứng giữa, mình luôn cho rằng anh developer luôn luôn là người nên đặt ra các luật lệ mà anh designer phải tuân theo, chứ không phải ngược lại.</p>\",\"id\":\"C:/anluu/luckyluu/posts/2017-03-06-thoi-dai-cua-pixel-effect-design-da-het-tu-lau/index.md absPath of file >>> MarkdownRemark\",\"timeToRead\":1,\"frontmatter\":{\"date\":\"2017-03-06T13:35:13.234Z\",\"path\":\"/2017-03-06-thoi-dai-cua-pixel-effect-design-da-het-tu-lau\",\"tags\":[\"javascript\"],\"title\":\"Thời đại của Pixel Perfect Design đã hết từ lâu\"}}}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---2017-07-17-interview-react-developer-thi-hoi-gi-92cdb0ea9ac1a483e415.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h2>Chuyện gì xảy ra khi gọi setSate?</h2>\\n<p>Đầu tiên, object được truyền trong <code>setState</code> sẽ được merge với state hiện tại của component, dựa trên sự thay đổi của object này, UI được update với state mới. Để làm được chuyện này, React sẽ dựng một cây React Element mới, so sánh sự khác nhau của cây element mới và cây element trước đó, React biết được chính xác chỉ cần update phần UI nào đã bị thay đổi.</p>\\n<h2>Sự khác nhau giữa Element và Component trong React?</h2>\\n<p>React Element ám chỉ những gì thấy trên màn hình.</p>\\n<p>React component là một function hoặc class có hoặc không có input và sẽ trả về một React element.</p>\\n<h2>Khi nào thì sử dụng Class Component và Functional Component</h2>\\n<p>Nếu component có state và các phương thức của lifecycle, sử dụng <strong>Class Component</strong>, ngược lại dùng <strong>functional component</strong></p>\\n<h2>Refs trong React dùng để làm gì</h2>\\n<p>Refs cho phép access trực tiếp đến DOM element hoặc một instance của component</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-html\\\"><code><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>input</span> <span class=\\\"token attr-name\\\">type</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>text<span class=\\\"token punctuation\\\">\\\"</span></span> <span class=\\\"token punctuation\\\">/></span></span> this.input = input} />\\n</code></pre>\\n      </div>\\n<h2>Keys trong React là gì</h2>\\n<p>Keys giúp React theo dõi sự thay đổi của một item trong list</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">.</span>todoItems<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span> <span class=\\\"token punctuation\\\">(</span>task<span class=\\\"token punctuation\\\">,</span> uid<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span>\\n    <span class=\\\"token operator\\\">&lt;</span>ul<span class=\\\"token operator\\\">></span>\\n      <span class=\\\"token operator\\\">&lt;</span>li<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">{</span>task<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>li<span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>ul<span class=\\\"token operator\\\">></span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h2>Sự khác nhau giữa controlled component và uncontrolled component</h2>\\n<p>Controlled component là component React control dữ liệu dựa trên state và props, uncontrolled component là component mà dữ liệu được handle bởi DOM</p>\\n<h4>Controlled Component</h4>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-html\\\"><code><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>input</span> <span class=\\\"token attr-name\\\">type</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">'</span>text<span class=\\\"token punctuation\\\">'</span></span> <span class=\\\"token attr-name\\\">value</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span>{this.state.username}</span> <span class=\\\"token attr-name\\\">onChange</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span>{this.updateUsername}</span> <span class=\\\"token punctuation\\\">/></span></span>\\n</code></pre>\\n      </div>\\n<h4>Uncontrolled Component</h4>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-html\\\"><code>&lt;input type='text' ref={(input) => this.input = input} />\\n</code></pre>\\n      </div>\\n<h2>Để gọi AJAX, sự dụng sự kiện nào của lifecycle?</h2>\\n<p><code>componentDidMount</code> , lý do ko sử dụng <code>componentWillMount</code> vì React  có thể gọi componentWillMount nhiều lần nếu cần thiết, thứ 2 không thể chắc chắn AJAX luôn gọi thành công, nếu gơi vào trường hợp đó câu lệnh <code>setState</code> sẽ chạy trên unmounted component.</p>\\n<h2>shouldComponentUpdate dùng để làm gì</h2>\\n<p><code>shouldComponentUpdate</code> cho phép can thiệp quá trình update UI của component và các component con của nó.</p>\\n<h2>Build Product bằng cách nào?</h2>\\n<p>Sử dụng phương thức DefinePlugin của Webpack để set <code>NODE_ENV = production</code>. Quá trình build production sẽ bỏ hết những đoạn như validate propType, cảnh báo này nọ, minify code, remove comments.</p>\\n<h2>Tại sao nên sử dụng React.Children.map() thay vì props.children.map()</h2>\\n<p>props.children chưa chắc lúc nào cũng là array. Ví dụ</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-html\\\"><code><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>Parent</span><span class=\\\"token punctuation\\\">></span></span> <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>h1</span><span class=\\\"token punctuation\\\">></span></span>Welcome.<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>h1</span><span class=\\\"token punctuation\\\">></span></span> <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>Parent</span><span class=\\\"token punctuation\\\">></span></span>\\n</code></pre>\\n      </div>\\n<p>Nếu sử dụng props.children.map trong Parent sẽ bị lỗi vì props.children là một object không phải array.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-html\\\"><code><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>Parent</span><span class=\\\"token punctuation\\\">></span></span>\\n\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>h1</span><span class=\\\"token punctuation\\\">></span></span>Welcome.<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>h1</span><span class=\\\"token punctuation\\\">></span></span>\\n\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>h2</span><span class=\\\"token punctuation\\\">></span></span>props.children will now be an array<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>h2</span><span class=\\\"token punctuation\\\">></span></span>\\n\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>Parent</span><span class=\\\"token punctuation\\\">></span></span>\\n</code></pre>\\n      </div>\\n<p>React.Children.map cho phép props.children là array hoặc object đều được.</p>\\n<h2>Events được xử lý trong React như thế nào?</h2>\\n<p>Các hàm xử lý event trong React sẽ được truyền vào một instance của SyntheticEvent, SyntheticEvent cũng giống như những native event bình thường của Browser trừ việc nó có thể làm việc trên tất cả các trình duyệt.</p>\\n<p>React không attach event vô các child node, mà sẽ lắng nghe tất cả các event sử dụng 1 event listener duy nhất, Với mục đích là để tăng performance và React không cần phải update lại event listener khi update DOM.</p>\\n<h2>Sự khác nhau giữa createElement và cloneElement</h2>\\n<p><code>createElement</code> là để tạo element, <code>cloneElement</code> copy element và đưa vào các props mới.</p>\\n<h2>Argument thứ 2 của setState dùng để làm gì</h2>\\n<p>callback function, function sẽ chạy sau khi <code>component</code> được <code>render</code> lại với state mới.</p>\\n<p>setState là một phương thức bất đồng bộ (asynchronous)</p>\\n<h2>Đoạn code sau sai ở chổ nào</h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>prevState<span class=\\\"token punctuation\\\">,</span> props<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token punctuation\\\">{</span>\\n\\n <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span> streak<span class=\\\"token punctuation\\\">:</span> prevState<span class=\\\"token punctuation\\\">.</span>streak <span class=\\\"token operator\\\">+</span> props<span class=\\\"token punctuation\\\">.</span>count <span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>Không sai gì cả, ít người biết rằng khi setState có thể truyền vào previous state.</p>\\n<p>Nguồn</p>\\n<blockquote>\\n<blockquote>\\n<p><a href=\\\"https://tylermcginnis.com/react-interview-questions/\\\">https://tylermcginnis.com/react-interview-questions/</a></p>\\n</blockquote>\\n</blockquote>\",\"frontmatter\":{\"date\":\"July 17, 2017\",\"path\":\"/2017-07-17-interview-react-developer-thi-hoi-gi\",\"tags\":[\"javascript\",\"react\"],\"title\":\"Interview React Developer thì hỏi gì?\",\"desc\":\"Một vài câu hỏi để kiểm tra mức độ am hiểu react của một lập trình viên frontend\"}}},\"pathContext\":{\"prev\":false,\"next\":{\"excerpt\":\"Làm front end được kha khá năm, đứng trung gian giữa anh developer và anh designer, được tiếp xúc với rất nhiều designer từ cao cấp tới mới ra trường, mình có thể khẳng định là những ảnh designer dù là tự học hay được đào tạo bài bảng qua trường lớp...\",\"html\":\"<p>Làm front end được kha khá năm, đứng trung gian giữa anh developer và anh designer, được tiếp xúc với rất nhiều designer từ cao cấp tới mới ra trường, mình có thể khẳng định là những ảnh designer dù là tự học hay được đào tạo bài bảng qua trường lớp, mỗi anh điều có một kiểu làm việc rất riêng, trong giới designer, đặc biệt là web design, sẽ chẳng anh nào đi theo một cái guide chung nào cả, khác hẳng với developer, nơi mà mọi thứ luôn được chuẩn hóa từng ngày, một anh developer mới vào công ty được thẩy vô trong một cái dự án bự tổ chảng, sau vài ngày training những \\\"luật lệ\\\" được đề ra từ lớp người đi trước là ảnh có thể follow theo và bắt đầu làm việc với một cách mượt mà. Ở góc độ của một người đứng giữa, mình luôn cho rằng anh developer luôn luôn là người nên đặt ra các luật lệ mà anh designer phải tuân theo, chứ không phải ngược lại.</p>\",\"id\":\"C:/anluu/luckyluu/posts/2017-03-06-thoi-dai-cua-pixel-effect-design-da-het-tu-lau/index.md absPath of file >>> MarkdownRemark\",\"timeToRead\":1,\"frontmatter\":{\"date\":\"2017-03-06T13:35:13.234Z\",\"path\":\"/2017-03-06-thoi-dai-cua-pixel-effect-design-da-het-tu-lau\",\"tags\":[\"javascript\"],\"title\":\"Thời đại của Pixel Perfect Design đã hết từ lâu\"}}}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/2017-07-17-interview-react-developer-thi-hoi-gi.json\n// module id = ./node_modules/json-loader/index.js!./.cache/json/2017-07-17-interview-react-developer-thi-hoi-gi.json\n// module chunks = 22"],"sourceRoot":""}