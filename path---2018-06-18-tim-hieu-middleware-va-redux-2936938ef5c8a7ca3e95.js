webpackJsonp([33],{"./node_modules/json-loader/index.js!./.cache/json/2018-06-18-tim-hieu-middleware-va-redux.json":function(n,s){n.exports={data:{markdownRemark:{html:'<h2>Middleware là gì</h2>\n<p>Nghe tên thì hơi phức tạp nhưng thực sự nó đơn giản lắm, nó là một hàm sẽ modify và được gọi trước khi action được dispatch.</p>\n<p>Mô phỏng quá trình hoạt động không có middleware</p>\n<p><img src="https://viblo.asia/uploads/5c72ff3e-859a-457a-ae11-e1392baa90af.gif"></p>\n<p>và khi áp dụng middleware</p>\n<p><img src="https://viblo.asia/uploads/8ff8bd43-308a-47da-b382-891adae237d2.gif"></p>\n<h2>Tại sao và tại sao</h2>\n<p>Trong thế giới của Rect, Redux là lựa chọn được ưa chuộng để có một container chứa chỉ chứa state. Ý tưởng chính của redux là tất cả những logic của app thì đưa vào <strong>reducers</strong>, là những function nhận vào 1 <code>state</code>, 1 <code>action</code> và trả về <code>state</code> mới. <strong>Reducers</strong> buộc phải là <em>pure function</em> không phụ thuộc và chỉnh sửa global state, để mà dễ test, dể refactor, performance tốt hơn.</p>\n<p>Thí dụ 1 redux store lưu giá trị counter</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">import</span> redux <span class="token keyword">from</span> <span class="token string">\'redux\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> counter <span class="token operator">=</span> <span class="token punctuation">(</span>state <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> action<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n    <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">case</span> <span class="token string">\'INCREMENT\'</span><span class="token punctuation">:</span>\n            <span class="token keyword">return</span> state <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> state<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> store <span class="token operator">=</span> redux<span class="token punctuation">.</span><span class="token function">createStore</span><span class="token punctuation">(</span>counter<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>Nếu để ý chúng ta có thể thấy redux có 2 ràng buộc</p>\n<ol>\n<li><strong>Reducers</strong> PHẢI là hàm sync, trả về <code>state</code> mới</li>\n<li>Do không được thay đổi global state, reducers không được sử dụng những hàm như <code>setInterval()</code></li>\n</ol>\n<p>Thí dụ chúng ta làm một cái app để bấm thời gian, sau khi user bấm stop hiển thị giá trị thời gian đã chạy và sau đó lưu lại trên server bằng HTTP request. Chuyện gì sẽ xảy ra khi ta đang muốn quăng một hàm chạy async?</p>\n<p>Reducer của chúng ta cần listen 3 actions:</p>\n<ol>\n<li><code>START_TIMER</code>, khi bắt đầu tính thời gian</li>\n<li><code>STICK</code>, khi ta thay đổi giá trị hiện tại</li>\n<li><code>STOP_TIMER</code> khi chúng ta không nhận được action <code>TICK</code> nào nữa</li>\n</ol>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">const</span> stopWatch <span class="token operator">=</span> <span class="token punctuation">(</span>state <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> action<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n    <span class="token keyword">switch</span><span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">case</span> <span class="token string">\'START_TIMMER\'</span><span class="token punctuation">:</span>\n            <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> state<span class="token punctuation">,</span> <span class="token punctuation">{</span>startTime<span class="token punctuation">:</span> action<span class="token punctuation">.</span>currentTime<span class="token punctuation">,</span> elapsed<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n        <span class="token keyword">case</span> <span class="token string">\'TICK\'</span><span class="token punctuation">:</span>\n            <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> state<span class="token punctuation">,</span> <span class="token punctuation">{</span>elapsed<span class="token punctuation">:</span> action<span class="token punctuation">.</span>currentTime <span class="token operator">-</span> state<span class="token punctuation">.</span>startTime<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">case</span> <span class="token string">\'STOP_TIMER\'</span><span class="token punctuation">:</span>\n            <span class="token keyword">return</span> state<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> state<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> store <span class="token operator">=</span> redux<span class="token punctuation">.</span><span class="token function">createStore</span><span class="token punctuation">(</span>stopWatch<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>Khi user click button start, chúng ta dispatch event <code>START_TIMER</code>, khi user click stop, ta dispatch <code>STOP_TIMMER</code></p>\n<p>Vấn đề là làm sao dispatch <code>TICK</code>, nếu chúng ta gọi <code>setInterval()</code> trong <code>START_TIMER</code> thì lúc đó chúng ta đã thay đổi global state và vi phạm best practices của redux. Chổ thích hợp nhất để dispatch <code>TICK</code> là ở middleware</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">const</span> timerMiddleware <span class="token operator">=</span> store <span class="token operator">=</span><span class="token operator">></span> next <span class="token operator">=</span><span class="token operator">></span> action <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">\'START_TIMER\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        action<span class="token punctuation">.</span>interval <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token punctuation">:</span> <span class="token string">\'TICK\'</span><span class="token punctuation">,</span> currentTime<span class="token punctuation">:</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">\'STOP_TIMER\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">clearInterval</span><span class="token punctuation">(</span>action<span class="token punctuation">.</span>interval<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">next</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> stopWatch <span class="token operator">=</span> <span class="token punctuation">(</span>state <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> action<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n  <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">case</span> <span class="token string">\'START_TIMER\'</span><span class="token punctuation">:</span>\n      <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> state<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n        startTime<span class="token punctuation">:</span> action<span class="token punctuation">.</span>currentTime<span class="token punctuation">,</span>\n        elapsed<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n        interval<span class="token punctuation">:</span> action<span class="token punctuation">.</span>interval\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">case</span> <span class="token string">\'TICK\'</span><span class="token punctuation">:</span>\n      <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> state<span class="token punctuation">,</span> <span class="token punctuation">{</span> elapsed<span class="token punctuation">:</span> action<span class="token punctuation">.</span>currentTime <span class="token operator">-</span> state<span class="token punctuation">.</span>startTime <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">case</span> <span class="token string">\'STOP_TIMER\'</span><span class="token punctuation">:</span>\n      <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> state<span class="token punctuation">,</span> <span class="token punctuation">{</span> interval<span class="token punctuation">:</span> <span class="token keyword">null</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> state<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> middleware <span class="token operator">=</span> redux<span class="token punctuation">.</span><span class="token function">applyMiddleware</span><span class="token punctuation">(</span>timerMiddleware<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> store <span class="token operator">=</span> redux<span class="token punctuation">.</span><span class="token function">createStore</span><span class="token punctuation">(</span>stopWatch<span class="token punctuation">,</span> middleware<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>Syntax của redux middleware là điều cần phải bàn tới: 1 middleware function là 1 function return 1 function return 1 function. Nhất đầu ghê chưa. Thật ra đang dùng currying function trong javascript (<a href="https://luubinhan.github.io/blog/2018-03-02-gioi-thieu-higher-order-component-trong-react">đọc cà-ri function ở đây</a>). Function đầu tiên nhận vào <code>store</code> làm parameter, function thứ 2 sẽ nhận function <code>next</code> làm parameter, và function thứ 3 nhận dispatch <code>action</code> làm parameter. <code>store</code> và <code>action</code> là giá trị store và dispatch action hiện tại. Chiếc đũa thuần kỳ ở đây chính là function <code>next</code>, bạn có thể gọi nó là "sau khi middleware chạy xong, truyền cái cái action này cho middleware kế tiếp". Nói cách khác, middleware có thể là hàm async.</p>\n<p>Tiếp theo chúng ta sẽ lưu giá trị sau khi user click stop lên server.</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">const</span> promiseMiddleware <span class="token operator">=</span> store <span class="token operator">=</span><span class="token operator">></span> next <span class="token operator">=</span><span class="token operator">></span> action <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n    <span class="token comment" spellcheck="true">// kiểm tra payload nếu là promise thì đợi nó resolve</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>payload <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> action<span class="token punctuation">.</span>payload<span class="token punctuation">.</span>then <span class="token operator">===</span> <span class="token string">\'function\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        action<span class="token punctuation">.</span>payload<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>\n            res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> action<span class="token punctuation">.</span>payload <span class="token operator">=</span> res<span class="token punctuation">;</span> <span class="token function">next</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n            err <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> action<span class="token punctuation">.</span>error <span class="token operator">=</span> err<span class="token punctuation">;</span> <span class="token function">next</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n        <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token function">next</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> middleware <span class="token operator">=</span> redux<span class="token punctuation">.</span><span class="token function">applyMiddleware</span><span class="token punctuation">(</span>timerMiddleware<span class="token punctuation">,</span> promiseMiddleware<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> store <span class="token operator">=</span> redux<span class="token punctuation">.</span><span class="token function">createStore</span><span class="token punctuation">(</span>stopWatch<span class="token punctuation">,</span> middleware<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>Khi gởi lên một HTTP request, chúng ta sẽ gởi request này ở dạng <code>promise</code>, <code>promiseMiddelware</code> sẽ đứng đợi promise này có giá trị trả về thì mới gọi <code>next(action)</code></p>\n<p>Ta sẽ gởi lên server bằng <code>axios</code></p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">\'axios\'</span><span class="token punctuation">;</span>\n\nstore<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token punctuation">:</span> <span class="token string">\'SAVE_TIME\'</span><span class="token punctuation">,</span> payload<span class="token punctuation">:</span> axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">\'/save\'</span><span class="token punctuation">,</span> store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>Reducer listen <code>SAVE_TIME</code></p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">const</span> stopwatch <span class="token operator">=</span> <span class="token punctuation">(</span>state <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> action<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n  <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">case</span> <span class="token string">\'START_TIMER\'</span><span class="token punctuation">:</span>\n      <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> state<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n        startTime<span class="token punctuation">:</span> action<span class="token punctuation">.</span>currentTime<span class="token punctuation">,</span>\n        elapsed<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n        interval<span class="token punctuation">:</span> action<span class="token punctuation">.</span>interval\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">case</span> <span class="token string">\'TICK\'</span><span class="token punctuation">:</span>\n      <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> state<span class="token punctuation">,</span> <span class="token punctuation">{</span> elapsed<span class="token punctuation">:</span> action<span class="token punctuation">.</span>currentTime <span class="token operator">-</span> state<span class="token punctuation">.</span>startTime <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">case</span> <span class="token string">\'STOP_TIMER\'</span><span class="token punctuation">:</span>\n      <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> state<span class="token punctuation">,</span> <span class="token punctuation">{</span> interval<span class="token punctuation">:</span> <span class="token keyword">null</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">case</span> <span class="token string">\'SAVE_TIME\'</span><span class="token punctuation">:</span>\n      <span class="token comment" spellcheck="true">// If there was an error, set the error property on the state</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> state<span class="token punctuation">,</span> <span class="token punctuation">{</span> error<span class="token punctuation">:</span> action<span class="token punctuation">.</span>error <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      <span class="token comment" spellcheck="true">// Otherwise, clear all the timer state</span>\n      <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> state<span class="token punctuation">,</span> <span class="token punctuation">{</span> startTime<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> elapsed<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> error<span class="token punctuation">:</span> <span class="token keyword">null</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> state<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<h2>Một số ứng dụng của Middleware</h2>\n<h3>Loging</h3>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">const</span> loggerMiddleware <span class="token operator">=</span> store <span class="token operator">=</span><span class="token operator">></span> next <span class="token operator">=</span><span class="token operator">></span> action <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">next</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<h3>Đợi user confirm</h3>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">const</span> confirmationMiddleware <span class="token operator">=</span> store <span class="token operator">=</span><span class="token operator">></span> next <span class="token operator">=</span><span class="token operator">></span> action <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>shouldConfirm<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">confirm</span><span class="token punctuation">(</span><span class="token string">\'Are you sure?\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token function">next</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token function">next</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<h2>Một số lựa chọn</h2>\n<p>Một số thư viện để làm việc với middleware cho Redux rất phổ biến có thể tham khảo là <code>redux-thunk</code>, <code>redux-saga</code>, <code>redux-observable</code></p>\n<p><a href="https://www.codementor.io/vkarpov/beginner-s-guide-to-redux-middleware-du107uyud">Link bài gốc của tác giả Vkarpov</a></p>\n<p>Tham khảo thêm:</p>\n<ul>\n<li><a href="https://github.com/gothinkster/react-redux-realworld-example-app/blob/master/src/middleware.js">Realworld example sử dụng redux, middleware</a></li>\n<li><a href="https://medium.com/@meagle/understanding-87566abcfb7a">Tìm hiểu Middleware của tác giả Mark</a></li>\n<li><a href="https://redux.js.org/api-reference/applymiddleware">applyMiddleware</a></li>\n</ul>',frontmatter:{date:"June 18, 2018",path:"/2018-06-18-tim-hieu-middleware-va-redux",tags:["react","redux","javascript","middleware"],title:"Sử dụng Middleware với Redux dành cho người mới bắt đầu",desc:"Nếu đã nắm rõ redux, bước tiếp theo phải tìm hiểu là middleware"}}},pathContext:{prev:{excerpt:"Tổng hợp lại để nhớ về middleware, nó là 1 function nhận vào storeInstance \n=> functionToCallWithAnActionThatWillSendItToTheNextMiddleware \n=> actionThatDispatchWasCalledWith \n=> valueToUseAsTheReturnValueOfTheDispatchCall Được viết với dạng syntax...",html:'<p>Tổng hợp lại để nhớ về middleware, nó là 1 function nhận vào</p>\n<p>storeInstance\n=> functionToCallWithAnActionThatWillSendItToTheNextMiddleware\n=> actionThatDispatchWasCalledWith\n=> valueToUseAsTheReturnValueOfTheDispatchCall</p>\n<p>Được viết với dạng syntax</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>store => next => action => result</code></pre>\n      </div>\n<p>Sau đấy được sử dụng bằng cách truyền vào như một tham số cho hàm <code>applyMiddleware</code></p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">const</span> middlewares <span class="token operator">=</span> <span class="token function">applyMiddleware</span><span class="token punctuation">(</span>middleware1<span class="token punctuation">,</span> middleware2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span>reducers<span class="token punctuation">,</span> initState<span class="token punctuation">,</span> middlewares<span class="token punctuation">)</span>\n</code></pre>\n      </div>\n<p>Middleware đơn giản nhất là một function éo làm gì cả, nó chỉ forward cái action đến middleware kế tiếp</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">const</span> middleware <span class="token operator">=</span> store <span class="token operator">=</span><span class="token operator">></span> next <span class="token operator">=</span><span class="token operator">></span> action <span class="token operator">=</span><span class="token operator">></span> <span class="token function">next</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span>\n</code></pre>\n      </div>\n<h2>Đóng gói các phương thức gọi API</h2>\n<p>Nếu API của chúng ta cần authentication token, thay vì trên mỗi action creatỏ chúng ta lấy token (có thể từ <code>store.getState</code> hoặc <code>sessionStorage</code>), rồi truyền tham số này vào trước khi gọi api, chúng ta dùng middleware để làm chuyện đó sẽ tốt hơn</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">const</span> fetch <span class="token operator">=</span> <span class="token punctuation">(</span>url<span class="token punctuation">,</span> params<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n    type<span class="token punctuation">:</span> <span class="token string">\'FETCH\'</span><span class="token punctuation">,</span>\n    url<span class="token punctuation">,</span>\n    params<span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> fetchMiddleware <span class="token operator">=</span> fetchImplementation <span class="token operator">=</span><span class="token operator">></span> store <span class="token operator">=</span><span class="token operator">></span> next <span class="token operator">=</span><span class="token operator">></span> action <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">\'FETCH\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> <span class="token punctuation">{</span>url<span class="token punctuation">,</span> params<span class="token punctuation">}</span> <span class="token operator">=</span> action<span class="token punctuation">;</span>\n        <span class="token keyword">const</span> token <span class="token operator">=</span> store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>token<span class="token punctuation">;</span>\n        _<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>params<span class="token punctuation">,</span> <span class="token string">\'headers.token\'</span><span class="token punctuation">,</span> token<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> <span class="token function">fetchImplementation</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token function">next</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> middleware <span class="token operator">=</span> <span class="token function">applyMiddleware</span><span class="token punctuation">(</span><span class="token function">fetchMiddleware</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>fetch<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span>reducers<span class="token punctuation">,</span> middleware<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment" spellcheck="true">// vi du goi action</span>\n<span class="token keyword">const</span> getUser <span class="token operator">=</span> id <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>dispatch<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`http://api.website.com/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">{</span>method<span class="token punctuation">:</span> <span class="token string">\'GET\'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>Thằng middleware <code>fetchMiddleware</code> khi túm được <code>action.type</code> tên là <strong>FETCH</strong> nó sẽ thực hiện việc gởi một HTTP request và trả về 1 <code>promise</code></p>\n<p>Ở đây để làm cho ví dụ đơn giản chúng ta không implement cái <code>fetchImplementation</code> mà đang hard code thằng này sử dụng <code>window.fetch</code></p>\n<h2>localStorage và Cookies</h2>\n<p>Ứng dụng nào cũng sẽ cần lưu thông tin user, có thể là <em>authentication token</em> hoặc đường dẫn lần trước user truy cập. Chúng ta sẽ sử dụng middleware để lưu trạng thái này xuống <code>localStorage</code> hoặc <em>cookies</em>.</p>\n<p>Nếu chúng ta gọi <code>getState</code> trước khi gọi <code>next(action)</code>, chúng ta sẽ có <strong>before state</strong> trước khi action đến tay <code>reducer</code>, nếu chúng ta gọi nó sau <code>next(action)</code>, chúng ta có <strong>after state</strong> sau khi reducer xử lý. Dựa vào <strong>before state</strong> và <strong>after state</strong> này chúng ta có thể thay đổi đúng cái đã bị thay đổi</p>\n<p>Ví dụ lưu authentication token xuống <code>localStorage</code></p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">const</span> middleware <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> store <span class="token operator">=</span><span class="token operator">></span> next <span class="token operator">=</span><span class="token operator">></span> action <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n    <span class="token comment" spellcheck="true">// lấy before state và after state</span>\n    <span class="token keyword">const</span> previousToken <span class="token operator">=</span> store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>token<span class="token punctuation">;</span>\n    <span class="token function">next</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> nextToken <span class="token operator">=</span> store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>token<span class="token punctuation">;</span>\n\n    <span class="token comment" spellcheck="true">// thay đổi</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>nextToken <span class="token operator">!==</span> previousToken<span class="token punctuation">)</span> localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">\'token\'</span><span class="token punctuation">,</span> nextToken<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment" spellcheck="true">// lấy init state từ localStorage</span>\n<span class="token keyword">const</span> token <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">\'token\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> initState <span class="token operator">=</span> token\n    <span class="token operator">?</span> _<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>defaultState<span class="token punctuation">,</span> <span class="token string">\'token\'</span><span class="token punctuation">,</span> token<span class="token punctuation">)</span>\n    <span class="token punctuation">:</span> defaultState<span class="token punctuation">;</span>\n<span class="token keyword">const</span> middleware <span class="token operator">=</span> <span class="token function">applyMiddleware</span><span class="token punctuation">(</span><span class="token function">middleware</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span>reducers<span class="token punctuation">,</span> initialState<span class="token punctuation">,</span> middlewares<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<h2>Theo dõi file</h2>\n<p>Ví dụ trong ứng dụng ta có state là <code>activeFiles</code>, là một mảng file bạn muốn theo dõi thay đổi. Khi file thay đổi, chúng ta muốn <code>dispatch</code> 1 action</p>\n<p>Sử dụng tương tự như trên</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">const</span> middleware <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> store <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> fileWatcher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    fileWatcher<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">\'file-changed\'</span><span class="token punctuation">,</span> filename <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n        store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token punctuation">:</span> <span class="token string">\'FILE_CHANGED\'</span><span class="token punctuation">,</span> filename <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment" spellcheck="true">// Make sure we\'re watching files that may be included in the store\'s initial state</span>\n    <span class="token keyword">const</span> initialFiles <span class="token operator">=</span> store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>activeFiles<span class="token punctuation">;</span>\n    fileWatcher<span class="token punctuation">.</span><span class="token function">watchFiles</span><span class="token punctuation">(</span>initialFiles<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">return</span> next <span class="token operator">=</span><span class="token operator">></span> action <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n        <span class="token comment" spellcheck="true">// Get the state before and after the action was performed</span>\n        <span class="token keyword">const</span> previousFiles <span class="token operator">=</span> store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>activeFiles<span class="token punctuation">;</span>\n        <span class="token function">next</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">const</span> nextFiles <span class="token operator">=</span> store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>activeFiles<span class="token punctuation">;</span>\n\n        <span class="token comment" spellcheck="true">// See what changed before and after</span>\n        <span class="token keyword">const</span> filesToUnwatch <span class="token operator">=</span> _<span class="token punctuation">.</span><span class="token function">difference</span><span class="token punctuation">(</span>previousFiles<span class="token punctuation">,</span> nextFiles<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">const</span> filesToWatch <span class="token operator">=</span> _<span class="token punctuation">.</span><span class="token function">difference</span><span class="token punctuation">(</span>nextFiles<span class="token punctuation">,</span> previousFiles<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment" spellcheck="true">// Respond to changes</span>\n        fileWatcher<span class="token punctuation">.</span><span class="token function">unwatchFiles</span><span class="token punctuation">(</span>filesToUnwatch<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        fileWatcher<span class="token punctuation">.</span><span class="token function">watchFiles</span><span class="token punctuation">(</span>filesToWatch<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>Ở đây thì nó không phụ thuộc action: vô tư tạo vô số action nếu muốn thay đổi giá trị active files, chúng ta không cần thay đổi logic trong middleware.</p>\n<p>Về mặt kỹ thuật, ví vụ trên có thể viết lại bằng cách sử dụng <code>store.subscribe</code>. Tuy nhiên tiếp cận vấn đề liên quan tới side-effect của middleware phụ thuộc vào action bằng middleware là tốt nhất</p>\n<h2>Trình nghe nhạc</h2>\n<p>Rất giống như ví vụ trên. Khác biệt quan trọng là: sự thay đổi của <code>state</code> có thể xảy ra từ middleware hoặc từ những nguồn khác.</p>\n<p>Giờ chúng ta có <code>state</code> là <code>isPlaying</code> và <code>currentTime</code>. Chúng ta sẽ giữ đúng khái niệm "single source of truth" của redux, middleware sẽ đảm nhiệm việc giữ giá rị state này. Nếu action thay đổi <code>isPlaying</code> từ <code>false</code> sang <code>true</code>, thì ta play nhạc, nếu action thay đổi <code>currentTime</code> chúng ta sẽ phát đến đúng thời gian đó.</p>\n<p>Để cho chính xác, trong middleware chúng ta adjust một chút để khi <code>isPlaying</code> chuyển sang <code>false</code>, chúng ta thay đổi luôn <code>currentTime</code>. Cái ngày cực kỳ quan trọng vì chúng ta không muốn cứ mỗi khi <code>currentTime</code> mà thay đổi thì chúng ta lại phát đúng đến thời điểm đó. Thêm parameter <code>origin</code> trong action để làm đối số kiểm tra</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">const</span> middleware <span class="token operator">=</span> musicPlayer <span class="token operator">=</span><span class="token operator">></span> store <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> playbackOrigin <span class="token operator">=</span> <span class="token string">\'playbackOrigin\'</span><span class="token punctuation">;</span>\n\n    musicPlayer<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">\'current-time-changed\'</span><span class="token punctuation">,</span> currentTime <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n        store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token punctuation">:</span> <span class="token string">\'SET_CURRENT_TIME\'</span><span class="token punctuation">,</span> origin<span class="token punctuation">:</span> playbackOrigin<span class="token punctuation">,</span> currentTime <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    musicPlayer<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">\'playback-finished\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n        store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token punctuation">:</span> <span class="token string">\'STOP_PLAYING\'</span><span class="token punctuation">,</span> origin<span class="token punctuation">:</span> playbackOrigin <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">const</span> initState <span class="token operator">=</span> store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>initState<span class="token punctuation">.</span>isPlaying<span class="token punctuation">)</span> musicPlayer<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    musicPlayer<span class="token punctuation">.</span><span class="token function">seek</span><span class="token punctuation">(</span>initState<span class="token punctuation">.</span>currentTime<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">return</span> next <span class="token operator">=</span><span class="token operator">></span> action <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> <span class="token punctuation">{</span> isPlaying<span class="token punctuation">:</span> wasPlaying<span class="token punctuation">,</span> currentTime<span class="token punctuation">:</span> previousTime <span class="token punctuation">}</span> <span class="token operator">=</span> store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">next</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">const</span> <span class="token punctuation">{</span> isPlaying<span class="token punctuation">:</span> isPlaying<span class="token punctuation">,</span> currentTime<span class="token punctuation">:</span> nextTime <span class="token punctuation">}</span> <span class="token operator">=</span> store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment" spellcheck="true">// không dispatch action với các action từ player</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>origin <span class="token operator">===</span> playbackOrigin<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>wasPlaying <span class="token operator">&amp;&amp;</span> isPlaying<span class="token punctuation">)</span> musicPlayer<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>wasPlaying <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>isPlaying<span class="token punctuation">)</span> musicPlayer<span class="token punctuation">.</span><span class="token function">pause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>previousTime <span class="token operator">!==</span> nextTime<span class="token punctuation">)</span> musicPlayer<span class="token punctuation">.</span><span class="token function">seek</span><span class="token punctuation">(</span>nextTime<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>Miễn là làm đúng cái middleware này, chúng ta sẽ không bao giờ dính mấy con bug kiểu như nút Play thì đang cho thấy ở trạng thái Pause trong khi đang phát rầm rầm.</p>\n<p><a href="https://medium.com/@jacobp100/you-arent-using-redux-middleware-enough-94ffe991e6">Link bài gốc của tác giả Jacob Parker</a></p>',
id:"C:/xampp/htdocs/luckyluu/posts/2018-06-21-mot-so-ung-dung-cua-middleware/index.md absPath of file >>> MarkdownRemark",timeToRead:5,frontmatter:{date:"2018-06-21T13:35:13.234Z",path:"/2018-06-21-mot-so-ung-dung-cua-middleware",tags:["react","redux","javascript","middleware"],title:"Một số ứng dụng của middleware"}},next:{excerpt:"Tổ chức thư mục Nếu init project bằng  create-react-app , chúng ta sẽ có sẵn những thư mục và file cơ bản nhất:  .gitinore ,  package.json ,  README.md ,  yarn.lock , thư mục  public  và  src Chúng ta sẽ chỉ tập trung vào thư mục  src  và khoog quan...",html:'<h2>Tổ chức thư mục</h2>\n<p>Nếu init project bằng <strong>create-react-app</strong>, chúng ta sẽ có sẵn những thư mục và file cơ bản nhất: <em>.gitinore</em>, <em>package.json</em>, <em>README.md</em>, <em>yarn.lock</em>, thư mục <strong>public</strong> và <strong>src</strong></p>\n<p><img src="https://cdn-images-1.medium.com/max/1600/1*eXN1LlNnuZmosJ7n7EsJ-Q.png"></p>\n<p>Chúng ta sẽ chỉ tập trung vào thư mục <strong>src</strong> và khoog quan tâm tới những file và thư mục ở khác.</p>\n<h2>Containers và Components</h2>\n<p>Bên trong thư mục <strong>src</strong> chúng ta sẽ tạo thêm 2 thư mục là <strong>components</strong> và <strong>containers</strong></p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>src\n├─ components // chứa components làm nhiệm vụ render \n└─ containers // các component xử lý logic</code></pre>\n      </div>\n<p>Nếu là theo cách này có một vài chổ không hợp lý</p>\n<ul>\n<li>Rất là khó để phân biệt và tách biệt 100% giữa container và presentational component, chắc chắn trong team sẽ có người là lên "em thấy cái này là container chứ sao lại là presentational được", kiểu như vậy.</li>\n<li>Cho phép 2 component có cùng tên với nhau, trong toàn bộ project mỗi component chỉ nên là duy nhất, tránh confuse trách nhiệm của mỗi bên.</li>\n<li>Tốn công, việc tách container ở một thư mục, presentationial ở thư mục khác, rất là phiền nếu muốn bay qua bay lại giữa 2 thư mục.</li>\n</ul>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>src\n└─ User\n  ├─ components\n  └─ containers</code></pre>\n      </div>\n<p>Cách này thì sao? Có thể giải quyết được vấn đề bay qua bay lại ở trên, nhưng nếu có 100 cái components chung ta tiếp tục ngụp lặn trong cả trăm thư mục components containers ở khắp mọi nơi.</p>\n<p>Theo tác giả chúng ta nên dẹp luôn khái niệm container và presentational luôn, tất cả chúng ta cần là 2 thư mục <strong>components</strong> và <strong>screens</strong></p>\n<h2>Tác và nhóm code lại với nhau</h2>\n<p>Bên trong thư mục <em>components</em> chúng ta group files theo module/tính năng.</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>src\n└─ components\n  └─ User\n    ├─ Form.jsx\n    └─ List.jsx</code></pre>\n      </div>\n<p>Khi component là kết hợp của nhiều component lại ta gom các file components vào 1 thư mục. Thí dụ nếu có thêm file <code>Form.css</code> ta sẽ làm như sau</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>src\n└─ components\n  └─ User\n    ├─ Form\n    │ ├─ Form.jsx\n    │ └─ Form.css\n    └─ List.jsx</code></pre>\n      </div>\n<h2>UI Components</h2>\n<p>Bên trong thư mục <strong>components</strong> ta có thể có thêm thư mục <strong>UI</strong>, trong đây sẽ chứa các component dạng generic. Thế nào là component generic? là những component dạng giống như những React UI Components của Sematic UI, Office Fabric UI, Reactrap.</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>src\n└─ components\n  └─ UI</code></pre>\n      </div>\n<h2>Đặt tên components</h2>\n<p>Chúng ta đã bàn về cách sắp xếp thư mục và chia các component ra dạng module. Giờ còn câu hỏi là đặt tên nó sao?</p>\n<p>Như đã nói ở trên tên của mỗi component nên là duy nhất và gợi hình, đọc xong có thể hình dung được component đó dùng để làm gì. Việc này cũng rất có lợi trong lúc debug bằng React Dev Tools.</p>\n<p>Pattern để đặt tên component <strong>đường dẫn-tên file</strong>. Thí dụ component ở file <code>components/User/List.jsx</code> thì đặt là <code>UserList</code></p>\n<p>Nếu <code>components/User/Form/Form.jsx</code> thì không cần đặt là <code>UserFormForm</code>, chỉ cần gọi nó là <code>UserForm</code> trong trường hợp tên file cùng tên với thư mục chứa nó.</p>\n<p>Lợi ích của việc đặt tên như vậy là giúp chúng ta navigate đến file đó rất nhanh, đa phần các editor \'xịn\' đều có thể dùng fuzzy search</p>\n<p><img src="https://cdn-images-1.medium.com/max/1600/1*vZO9Ci9a_lrfi2yTP9OiMA.png"></p>\n<p>Tránh lặp lại tên, ngày xưa khi mới bắt đầu chúng ta thường đặt tên file rất là đầy đủ chuẩn không cần chỉnh, tuy nhiên việc này làm cho lúc <code>import</code> rất dài dòng, đường dẫn dài cả cây số. Trong trường hợp ở trên do <code>Form</code> đang nằm trong <code>User</code> thì ta biết ngay là <code>FormUser</code> rồi, không nên đặt tên file là <code>FormUser</code></p>\n<div class="gatsby-highlight">\n      <pre class="language-jsx"><code><span class="token keyword">import</span> ScreenUserForm <span class="token keyword">from</span> <span class="token string">\'./screens/User/UserForm\'</span><span class="token punctuation">;</span>\n\n<span class="token comment" spellcheck="true">// đấu với</span>\n\n<span class="token keyword">import</span> ScreenUserForm <span class="token keyword">from</span> <span class="token string">\'./screens/User/Form\'</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>Nếu ví dụ trên chưa đủ thuyết phục, hãy xem tiếp thêm một ví dụ khách</p>\n<div class="gatsby-highlight">\n      <pre class="language-jsx"><code><span class="token keyword">import</span> MediaPlanViewChannel <span class="token keyword">from</span> <span class="token string">\'/MediaPlan/MediaPlanView/MediaPlanViewChannel.jsx\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">import</span> MediaPlanViewChannel <span class="token keyword">from</span> <span class="token string">\'./MediaPlan/View/Channel\'</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<h2>Screens</h2>\n<p>Nãy có nói thư mục <strong>screen</strong> mà chưa giải thích, screens sẽ nơi chứa là những components được map vào cho <code>route</code>, như screen để tạo user mới, reset password, đăng nhập. Screen không nên chứa logic gì cả, 1 functional component, chúng ta sẽ đưa screen vào một thư mục hẳn hoi để dễ mapping đúng với structure của <code>route</code> chứ chúng ta không theo module</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>src\n├─ components \n└─ screens\n  └─ User\n    ├─ Form.jsx\n    └─ List.jsx</code></pre>\n      </div>\n<p>Chúng ta có file <code>Route.jsx</code></p>\n<div class="gatsby-highlight">\n      <pre class="language-jsx"><code><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Router <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'react-router\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Redirect<span class="token punctuation">,</span> Route<span class="token punctuation">,</span> Switch <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'react-router-dom\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">import</span> ScreensUserForm <span class="token keyword">from</span> <span class="token string">\'./User/Form\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> ScreensUserList <span class="token keyword">from</span> <span class="token string">\'./User/List\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> ScreensRoot <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Router</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Switch</span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/user/list<span class="token punctuation">"</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>ScreensUserList<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/user/create<span class="token punctuation">"</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>ScreensUserForm<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/user/:id<span class="token punctuation">"</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>ScreensUserForm<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Switch</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Router</span><span class="token punctuation">></span></span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> ScreensRoot<span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>Bằng cách này chỉ cần nhìn url ta có thể trace được đang dùng component ở thư mục nào</p>\n<p>Về tên gọi của component trong thư mục screen này,\nnếu <code>scr/screens/User/List.jsx</code> thì đặt tên là <code>ScreensUserList</code>;</p>\n<p>Nếu bạn để ý thì sẽ thấy 2 route <code>create</code> và <code>edit</code> đang cùng được render cùng 1 component <code>ScreensUserForm</code>, cái này implement cũng dể thôi</p>\n<div class="gatsby-highlight">\n      <pre class="language-jsx"><code><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> UserForm <span class="token keyword">from</span> <span class="token string">\'../../components/User/Form/Form\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> ScreensUserForm <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> match<span class="token punctuation">:</span> <span class="token punctuation">{</span> params <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>\n      <span class="token punctuation">{</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token operator">!</span>params<span class="token punctuation">.</span>id <span class="token operator">?</span> <span class="token string">\'Create\'</span> <span class="token punctuation">:</span> <span class="token string">\'Update\'</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">}</span> User\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>UserForm</span> <span class="token attr-name">id</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>params<span class="token punctuation">.</span>id<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> ScreensUserForm<span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>Thư mục cuối cùng có như sau</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>src\n├─ components \n│  ├─ User\n│  │ ├─ Form\n│  │ │ ├─ Form.jsx\n│  │ │ └─ Form.css\n│  │ └─ List.jsx\n│  └─ UI \n│\n└─ screens\n  ├─ User\n  │ ├─ Form.jsx\n  │ └─ List.jsx\n  └─ Root.jsx</code></pre>\n      </div>\n<h2>Kết luận</h2>\n<p>Trong bài này tác giả sẽ chỉ đề tập trung vào project sử dụng React, chưa đề cặp tới Redux, bài sau có.</p>\n<p>Nếu thích thì có thể cảm ơn và follow tác giả để có thêm nhiều bài viết hay ho khác.</p>\n<p><a href="https://hackernoon.com/structuring-projects-and-naming-components-in-react-1261b6e18d76">Link bài gốc của Vinicius Dacal</a></p>',id:"C:/xampp/htdocs/luckyluu/posts/2018-06-18-luan-ban-ve-cach-to-chuc-thu-muc-dat-ten/index.md absPath of file >>> MarkdownRemark",timeToRead:5,frontmatter:{date:"2018-06-18T13:35:13.234Z",path:"/2018-06-18-luan-ban-ve-cach-to-chuc-thu-muc-dat-ten",tags:["react","javascript"],title:"Tiếp tục luận bàn về cách tổ chức thư mục, đặt tên component trong React"}}}}}});
//# sourceMappingURL=path---2018-06-18-tim-hieu-middleware-va-redux-2936938ef5c8a7ca3e95.js.map