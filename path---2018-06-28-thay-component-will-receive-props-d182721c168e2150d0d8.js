webpackJsonp([31],{"./node_modules/json-loader/index.js!./.cache/json/2018-06-28-thay-component-will-receive-props.json":function(n,s){n.exports={data:{markdownRemark:{html:'<p>Cụ thể <code class="language-text">getDerivedStateFromProps</code> sẽ được dùng để thay cho <code class="language-text">componentWillReceiveProps</code>, giờ nó cũng đã trở thành <code class="language-text">UNSAFE_componentWillReceiveProps</code></p>\n<p>Hàm <code class="language-text">getDerivedStateFromProps</code> là một phương thức <code class="language-text">static</code> sẽ chạy khi component nhận được <em>props</em> và đã được khởi tạo. Bởi vì nó là một phương thức <code class="language-text">static</code> nên không thể sử dụng <code class="language-text">this</code> bên trong phương thức này hoặc truy cập tới các phương thức khác. Không giống với <code class="language-text">componentWillReceiveProps</code> chúng ta không dùng được <code class="language-text">this.setState</code>, nếu muốn cập nhập lại <code class="language-text">state</code> nào đó ta trả về một object hoặc <code class="language-text">null</code> nếu không muốn update state nào cả</p>\n<p>Code sử dụng <code class="language-text">componentWillReceiveProps</code> trước đây</p>\n<div class="gatsby-highlight">\n      <pre class="language-jsx"><code class="language-jsx"><span class="token function">componentWillReceiveProps</span><span class="token punctuation">(</span>nextProps<span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword">if</span><span class="token punctuation">(</span>nextProps<span class="token punctuation">.</span>someValue <span class="token operator">!==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>someValue<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token comment">//Perform some operation</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>someState<span class="token punctuation">:</span> someValue <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">classMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>Giờ code lại bằng <code class="language-text">getDerivedStateFromProps</code></p>\n<div class="gatsby-highlight">\n      <pre class="language-jsx"><code class="language-jsx"><span class="token comment">// mục tiêu xử lý ở hàm này là những return giá trị state sẽ bị thay đổi khi prop thay đổi</span>\n<span class="token keyword">static</span> <span class="token function">getDerivedStateFromProps</span><span class="token punctuation">(</span>nextProps<span class="token punctuation">,</span> prevState<span class="token punctuation">)</span><span class="token punctuation">{</span>\n   <span class="token keyword">if</span> <span class="token punctuation">(</span>nextProps<span class="token punctuation">.</span>path <span class="token operator">!==</span> prevState<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">{</span>\n     <span class="token keyword">return</span> <span class="token punctuation">{</span> path<span class="token punctuation">:</span> nextProps<span class="token punctuation">.</span>path <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// ở đây chúng ta sẽ set state</span>\n<span class="token function">componentDidUpdate</span><span class="token punctuation">(</span>prevProps<span class="token punctuation">,</span> prevState<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>prevState<span class="token punctuation">.</span>path <span class="token operator">!==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>path<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// Thục hiện update state</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">classMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>Hàm <code class="language-text">getDerivedStateFromProps</code> sẽ nhận vào 2 params <code class="language-text">nextProps</code> và <code class="language-text">prevState</code>. Chúng ta cần lưu giá trị của <em>props</em> <code class="language-text">path</code> vào <em>state</em> là <code class="language-text">path</code>, thực hiện kiểm tra ở đây nếu thấy khác nhau thì return lại object <code class="language-text">{path: nextProps.path}</code>, khi đó ở <code class="language-text">componentDidUpdate</code> giá trị của <code class="language-text">prevState.path</code> sẽ khác với giá trị <code class="language-text">this.state.path</code> ví <code class="language-text">this.state.path</code> đã được set lại ở <code class="language-text">getDerivedStateFromProps</code> trước đó</p>\n<p>Cảm ơn bạn đã đọc hết bài viết</p>\n<p><a href="https://hackernoon.com/replacing-componentwillreceiveprops-with-getderivedstatefromprops-c3956f7ce607">Link bài viết của tác giả Amanshu Kataria</a></p>',frontmatter:{date:"June 28, 2018",path:"/2018-06-28-thay-component-will-receive-props",tags:["react","javascript"],title:"Thay componentWillReceiveProps với getDerivedStateFromProps",desc:"Từ bản release React 16.3, các phương thức lifecycle có thay chút ít, một số không còn được khuyến khích sử dụng và thay thế bằng một phương thức khác"}}},pathContext:{prev:{excerpt:"Lưu ý quan trọng JS modules được hổ trợ bởi các trình duyệt XỊN, hàng cùi mía của Microsoft thì chưa support JS Modules là gì JS modules hay còn gọi là ES modules, ECMAcript modules là một tính năng quan trọng mới của của javascript, trước đây chúng...",html:'<blockquote>\n<p>Lưu ý quan trọng JS modules được hổ trợ bởi các trình duyệt XỊN, hàng cùi mía của Microsoft thì chưa support</p>\n</blockquote>\n<h2>JS Modules là gì</h2>\n<p>JS modules hay còn gọi là ES modules, ECMAcript modules là một tính năng quan trọng mới của của javascript, trước đây chúng ta sử dụng CommonJS trong Node.js hay AMD để có thể sử dụng tính năng này trước thời đại. Các thư viện này nó làm gì? nó cho phép chúng ta <code class="language-text">import</code> và <code class="language-text">export</code> cái chúng ta muốn</p>\n<p>Và giờ javascript trong tương lai không xa chúng ta sẽ không cần những thư viện này nữa vì có hổ trợ sẵn.</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token comment">// file lib.mjs</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">repeat</span> <span class="token operator">=</span> string <span class="token operator">=></span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>string<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>string<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">;</span>\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">shout</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>string<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">!`</span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>Chúng ta <code class="language-text">import</code> nó từ file khác</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token comment">// file main.mjs</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span>repeat<span class="token punctuation">,</span> shout<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'./lib.mjs\'</span><span class="token punctuation">;</span>\n<span class="token function">repeat</span><span class="token punctuation">(</span><span class="token string">\'hello\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// -> \'hello hello\'</span>\n\n<span class="token function">shout</span><span class="token punctuation">(</span><span class="token string">\'Modules in action\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// -> \'MODULES IN ACTIONS!\'</span></code></pre>\n      </div>\n<p>Module file như vậy sẽ có một vài điểm cần lưu ý</p>\n<ul>\n<li><code class="language-text">strict mode</code> bật mặt định</li>\n<li>Kiểu viết comment như trong HTML không sử dụng được</li>\n</ul>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token comment">// Không sử dụng được đâu</span>\n<span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token constant">TODO</span><span class="token punctuation">:</span> Rename x to y<span class="token punctuation">.</span>\n<span class="token comment">// Viêt comment bình thường thôi</span>\n<span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span> <span class="token comment">// TODO: Rename x to y.</span></code></pre>\n      </div>\n<ul>\n<li>lexical top-level scope, nghĩa là nếu khởi tạo biến <code class="language-text">var foo = 28</code> bên trong module không tạo một biến global tên <code class="language-text">foo</code>, chúng ta không access được <code class="language-text">window.foo</code></li>\n<li>Chỉ có thể sử dụng <code class="language-text">import</code> và <code class="language-text">export</code> trong file <code class="language-text">.mjs</code>, file thường ko xài được.</li>\n</ul>\n<h2>Sử dụng trên trình duyệt</h2>\n<p>Để <strong>báo</strong> với trình duyệt chúng ta đang load 1 file module js</p>\n<div class="gatsby-highlight">\n      <pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>module<span class="token punctuation">"</span></span> <span class="token attr-name">scr</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>main.mjs<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">nomodule</span> <span class="token attr-name">scr</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fallback.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre>\n      </div>\n<p>Ở đây ngoài việc biết được trình duyệt đang mở có hổ trợ module ko, chúng ta cũng có thể đoán được là nó có hổ trợ js mới không như arrow function, async - await</p>\n<p>Một điều tuyệt vời khác của <code class="language-text">type=&quot;module&quot;</code> là mặc dù chúng ta add thêm bao nhiêu tag tùy thích nhưng nó sẽ chỉ load 1 file nếu giống nhau, ngược lại với js thường</p>\n<div class="gatsby-highlight">\n      <pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classic.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classic.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n<span class="token comment">&lt;!-- classic.js executes multiple times. --></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>module<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>module.mjs<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>module<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>module.mjs<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>module<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">import</span> <span class="token string">\'./module.mjs\'</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n<span class="token comment">&lt;!-- module.mjs executes only once. --></span></code></pre>\n      </div>\n<h2>Lưu ý về extention</h2>\n<p>Ở trên chúng ta sử dụng file extention là <code class="language-text">.mjs</code>, đây chỉ là một quy ước để dễ phân biệt, trên web nếu javascript được served bằng MIME type \'text/javascript\' thì gần như là như nhau, sự phân biệt thực sự được đánh dấu bằng <code class="language-text">type=&quot;module&quot;</code> trên thẻ <code class="language-text">script</code></p>\n<h2>Module mặc định là load defer</h2>\n<p>JS bình thường sẽ block HTML parser khi nó chưa load xong, trừ khi chúng ta thêm attribute là <code class="language-text">defer</code> trên tag script, khi là module, tính năng <code class="language-text">defer</code> là mặc định <code class="language-text">true</code></p>\n<p><a href="https://developers.google.com/web/fundamentals/primers/modules">Link bài gốc</a></p>',id:"E:/anluu/luckyluu/posts/2018-07-02-javascript-modules-tren-web/index.md absPath of file >>> MarkdownRemark",timeToRead:3,frontmatter:{date:"2018-07-00T13:35:13.234Z",path:"2018-07-02-javascript-modules-tren-web",tags:["javascript"],title:"Sử dụng javascript modules trên web"}},next:{excerpt:"console.log, console.error, console.warn và console.info Đây là những phương thức được sử dụng nhiều nhất. Có thể truyền vào 1 hoặc nhiều parameter, mỗi parameter trường vào sẽ được hiển thị về kết quả ở dạng string và cách nhau bằng khoảng trắng...",html:'<h1>console.log, console.error, console.warn và console.info</h1>\n<p>Đây là những phương thức được sử dụng nhiều nhất. Có thể truyền vào 1 hoặc nhiều parameter, mỗi parameter trường vào sẽ được hiển thị về kết quả ở dạng string và cách nhau bằng khoảng trắng, trong trường hợp là object hay array thì nó hiện thị dạng cây</p>\n<p><img src="https://cdn-images-1.medium.com/max/1600/1*1Zh9s1-XCx27o6FAKGb5Hg.png"></p>\n<h1>console.group</h1>\n<p>Phương thức này cho phép nhóm các câu <code class="language-text">console.log</code> vào trong một group có thể collapse. Syntax rất đơn giản, đặt các câu console.log  vào giữa cặp <code class="language-text">console.group(&#39;ten-group&#39;)</code> và <code class="language-text">console.groupEnd()</code></p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">doSomething</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token string">\'doSomething Proifle\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> _data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'evauating data: \'</span><span class="token punctuation">,</span> _data<span class="token punctuation">)</span>\n  <span class="token keyword">const</span> _fullName <span class="token operator">=</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>obj<span class="token punctuation">.</span>firstName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>obj<span class="token punctuation">.</span>lastName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'fullName: \'</span><span class="token punctuation">,</span> _fullName<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> _id <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'id: \'</span><span class="token punctuation">,</span> _id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  console<span class="token punctuation">.</span><span class="token function">groupEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">{</span>firstName<span class="token punctuation">:</span> <span class="token string">\'An\'</span><span class="token punctuation">,</span> <span class="token string">\'lastName\'</span><span class="token punctuation">:</span> <span class="token string">\'Luu\'</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>\n      </div>\n<p>Kết quả</p>\n<p><img src="https://cdn-images-1.medium.com/max/1600/1*PWOoWRhG9lWjhU4z6qFCOQ.png"></p>\n<h1>console.table</h1>\n<p>Từ khi biết đến <code class="language-text">console.table</code> cuộc đời tui bước sang trang mới! Hiển thị JSON bên trong console.log thì kinh dị lắm, với <code class="language-text">console.table</code> sẽ hiển thị mảng dữ liệu trong table cực dể dòm</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">const</span> typeOfConsole <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">\'log\'</span><span class="token punctuation">,</span> type<span class="token punctuation">:</span> <span class="token string">\'standard\'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">\'info\'</span><span class="token punctuation">,</span> type<span class="token punctuation">:</span> <span class="token string">\'standard\'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">\'table\'</span><span class="token punctuation">,</span> type<span class="token punctuation">:</span> <span class="token string">\'WOW\'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">table</span><span class="token punctuation">(</span>typeOfConsole<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> mySocial <span class="token operator">=</span> <span class="token punctuation">{</span>\n  facebook<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  linkedIn<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  flickr<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  instagram<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  VKontaktebadoo<span class="token punctuation">:</span> <span class="token boolean">false</span>\n<span class="token punctuation">}</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">table</span><span class="token punctuation">(</span>mySocial<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">\'Socials\'</span><span class="token punctuation">,</span> <span class="token string">\'I an account\'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre>\n      </div>\n<p>Thế này thì sao</p>\n<p><img src="https://cdn-images-1.medium.com/max/1600/1*Fb2VQtATz3uCH2hw6yVB-w.png"></p>\n<h1>console.count, console.time, console.timeEnd</h1>\n<p>Vũ khí cần thiết để debug, <code class="language-text">console.count</code> trả về số lần và thời gian hàm <code class="language-text">count()</code> đượcg gọi.</p>\n<p>Truyền vào tên cho <code class="language-text">console.time</code>, gọi <code class="language-text">console.timeEnd</code> để dừng thời gian và hiển thị kết quả, đặt đoạn code cần đo thời gian chạy giữa 2 hàm này</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">\'total\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">\'init arr\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">\'init arr\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> _type <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">\'even\'</span> <span class="token punctuation">:</span> <span class="token string">\'odd\'</span><span class="token punctuation">;</span>\n  console<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>_type <span class="token operator">+</span> <span class="token string">\'added\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">\'total\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>Kết quả</p>\n<p><img src="https://cdn-images-1.medium.com/max/1600/1*Fc8jI1oaCE57aB-baawGaw.png"></p>\n<h1>console.trace và console.assert</h1>\n<p>Cả hai hàm này sẽ in ra một đoạn thông báo kèm với dòng code thứ mấy trong file. Tưởng tượng chúng ta tạo một thư viện js và muốn thông báo đến user lỗi xuất hiện ở đâu. Khác biệt của <code class="language-text">console.assert</code> khác với <code class="language-text">console.trace</code> là nó chỉ in kết quả nếu điều kiện để kiểm tra trả về <code class="language-text">false</code></p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">lesserThan</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">assert</span><span class="token punctuation">(</span> a <span class="token operator">&lt;</span> b<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">\'message\'</span><span class="token punctuation">:</span> <span class="token string">\'a is not lesser than b\'</span><span class="token punctuation">,</span>  <span class="token string">\'a\'</span><span class="token punctuation">:</span> a<span class="token punctuation">,</span> <span class="token string">\'b\'</span><span class="token punctuation">:</span> b<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  \n<span class="token punctuation">}</span>\n<span class="token function">lesserThan</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">\'End\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p><img src="https://cdn-images-1.medium.com/max/1600/1*oeGhwHWJ0JALyKZMJq_inw.png"></p>\n<h1>Xóa hết console</h1>\n<p>Nếu chúng đang sử dụng webpack, nếu muốn xóa hết toàn bộ các chổ có console trong lúc build production thì dễ ợt, dùng uglifyjs-webpack-plugin</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">const</span> UglifyJsPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'uglifyjs-webpack-plugin\'</span><span class="token punctuation">)</span>\n<span class="token keyword">var</span> debug <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">!==</span> <span class="token string">"production"</span><span class="token punctuation">;</span>\n\n<span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\noptimization<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        minimizer<span class="token punctuation">:</span> <span class="token operator">!</span>debug <span class="token operator">?</span> <span class="token punctuation">[</span>\n            <span class="token keyword">new</span> <span class="token class-name">UglifyJsPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n                <span class="token comment">// Compression specific options</span>\n                uglifyOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n                    <span class="token comment">// Eliminate comments</span>\n                    comments<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n                    compress<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n                       <span class="token comment">// remove warnings</span>\n                       warnings<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n                       <span class="token comment">// Drop console statements</span>\n                       drop_console<span class="token punctuation">:</span> <span class="token boolean">true</span>\n                    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n                <span class="token punctuation">}</span>\n           <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>Cảm ơn bạn đã đọc hết bài viết</p>\n<p><a href="https://medium.freecodecamp.org/how-you-can-improve-your-workflow-using-the-javascript-console-bdd7823a9472">Link bài viết gốc của tác giả Riccardo Canella</a></p>',
id:"E:/anluu/luckyluu/posts/2018-06-24-lam-viec-voi-console-trong-javascript/index.md absPath of file >>> MarkdownRemark",timeToRead:2,frontmatter:{date:"2018-06-24T13:35:13.234Z",path:"/2018-06-24-lam-viec-voi-console-trong-javascript",tags:["javascript"],title:"Làm việc với console trong javascript"}}}}}});
//# sourceMappingURL=path---2018-06-28-thay-component-will-receive-props-d182721c168e2150d0d8.js.map