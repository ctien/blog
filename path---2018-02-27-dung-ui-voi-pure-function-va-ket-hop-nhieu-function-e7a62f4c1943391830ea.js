webpackJsonp([68],{"./node_modules/json-loader/index.js!./.cache/json/2018-02-27-dung-ui-voi-pure-function-va-ket-hop-nhieu-function.json":function(n,a){n.exports={data:{markdownRemark:{html:'<p>Khai báo component <code class="language-text">ProfilePic</code>, <code class="language-text">ProfileLink</code>, <code class="language-text">Avatar</code> bằng cách bình thường</p>\n<div class="gatsby-highlight">\n      <pre class="language-jsx"><code class="language-jsx"><span class="token keyword">const</span> ProfilePic <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createClass</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  render<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token string">\'https://photo.fb.com/\'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>username\'<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>\n    <span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>\n      </div>\n<div class="gatsby-highlight">\n      <pre class="language-jsx"><code class="language-jsx"><span class="token keyword">const</span> ProfileLink <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createClass</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  render<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n   <span class="token keyword">return</span> <span class="token punctuation">(</span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token string">\'https://www.fb.com/\'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>username<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n        <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>username<span class="token punctuation">}</span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>\n    <span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>\n      </div>\n<div class="gatsby-highlight">\n      <pre class="language-jsx"><code class="language-jsx"><span class="token keyword">const</span> Avatar <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createClass</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  render<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ProfilePic</span> <span class="token attr-name">username</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>username<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ProfileLink</span> <span class="token attr-name">username</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>username<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n   <span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>\n      </div>\n<div class="gatsby-highlight">\n      <pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Avatar</span> <span class="token attr-name">username</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tylermcginnis<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre>\n      </div>\n<p>Từ React 0.14, trong trường hợp một compoment không có state, có thể viết lại bằng Stateless Function Component, cách gọi cho sang thôi, bản chất là một function nhận vào data và trả về một View</p>\n<p>ProfilePic</p>\n<div class="gatsby-highlight">\n      <pre class="language-jsx"><code class="language-jsx"><span class="token keyword">const</span> <span class="token function-variable function">ProfilePic</span> <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token string">\'https://photo.fb.com/\'</span> <span class="token operator">+</span> props<span class="token punctuation">.</span>username\'<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>ProfileLink</p>\n<div class="gatsby-highlight">\n      <pre class="language-jsx"><code class="language-jsx"><span class="token keyword">var</span> <span class="token function-variable function">ProfileLink</span> <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token string">\'https://www.fb.com/\'</span> <span class="token operator">+</span> props<span class="token punctuation">.</span>username<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n      <span class="token punctuation">{</span>props<span class="token punctuation">.</span>username<span class="token punctuation">}</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>\n<span class="token punctuation">)</span></code></pre>\n      </div>\n<p>Avatar</p>\n<div class="gatsby-highlight">\n      <pre class="language-jsx"><code class="language-jsx"><span class="token keyword">const</span> <span class="token function-variable function">Avatar</span> <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ProfilePic</span> <span class="token attr-name">username</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>username<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ProfileLink</span> <span class="token attr-name">username</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>username<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<div class="gatsby-highlight">\n      <pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Avatar</span> <span class="token attr-name">username</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tylermcginnis<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre>\n      </div>\n<p>Khai khai báo component bằng function như vậy, phải đảm bảo nó là một pure function (same input = same return)</p>',frontmatter:{date:"February 27, 2018",path:"/2018-02-27-dung-ui-voi-pure-function-va-ket-hop-nhieu-function",tags:["react","javascript"],title:"Dựng UI với pure function và kết hợp nhiều function trong React",desc:"Khi tạo một React Component, nó có thể là một function, nhận vào tham số, thay vì trả về giá trị, function này trả về UI"}}},pathContext:{prev:{excerpt:"Nghe khá trừa tượng và cao siêu. Tuy nhiên đây là một kỹ thuật hay (architectural pattern), một vài người cũng vạch ra được điểm khó chịu khi làm HOCs, tuy nhiên thích thì học thôi, trong vài trường hợp sẽ hữu dụng. Tổng quan Để đọc hiểu bài này dĩ...",html:'<p>Nghe khá trừa tượng và cao siêu. Tuy nhiên đây là một kỹ thuật hay (architectural pattern), một vài người cũng vạch ra được điểm khó chịu khi làm HOCs, tuy nhiên thích thì học thôi, trong vài trường hợp sẽ hữu dụng.</p>\n<h2>Tổng quan</h2>\n<p>Để đọc hiểu bài này dĩ nhiên cần nắm cơ bản ES6, hiểu cà-ri function là thế nào (Currying Functional Programming)</p>\n<p>Cà-ri function là cách viết tách một function nhận một đống arguments, "băm" function đó ra thành nhiều function con, mỗi function nhận 1 argument. Ví dụ</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token comment">// một hàm sum thông thường</span>\n<span class="token keyword">const</span> <span class="token function-variable function">sum</span> <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=></span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>\n\n<span class="token comment">// cà-ri function</span>\n<span class="token keyword">const</span> <span class="token function-variable function">curriedSum</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n\n<span class="token punctuation">}</span>\n<span class="token comment">// viết hàm cà-ri bằng arrow function</span>\n<span class="token keyword">const</span> <span class="token function-variable function">curriedSum</span> <span class="token operator">=</span> a <span class="token operator">=></span> b <span class="token operator">=></span> a <span class="token operator">+</span> b\n\n<span class="token comment">//gọi hàm cà-ri</span>\n<span class="token function">curriedSum</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span></code></pre>\n      </div>\n<p>Một số cách viết khác của ES6 tìm lại mấy bài cũ của mình đã chia sẽ.</p>\n<h2>Higher-Order Functions</h2>\n<p>Cái này không mới, trước đây trong javascript vẫn thường viết kiểu truyền một anonymous function (callback) như một argument cho 1 function khác, vì function trong javascript là object nên làm được chuyện này, hay 1 function trả về một kết quả trả về của function khác. Xét ví dụ</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">calculator</span> <span class="token operator">=</span> <span class="token punctuation">(</span>inputFunction<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> resultValue <span class="token operator">=</span> <span class="token function">inputFunction</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>resultValue<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> resultValue<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">...</span>all<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> all<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=></span> a <span class="token operator">+</span> b<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">multiply</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">...</span>all<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> all<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token operator">=></span> a<span class="token operator">*</span>b<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>Ta có thể sử dụng hàm <code class="language-text">calculator</code> như sau</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token function">calculator</span><span class="token punctuation">(</span>mutiply<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">//return 8</span>\n<span class="token comment">//</span>\n<span class="token function">calculator</span><span class="token punctuation">(</span>add<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">//return 63</span></code></pre>\n      </div>\n<p>Các hàm như <code class="language-text">add</code>, <code class="language-text">multiply</code> chấp nhận số lượng input không giới hạn, hàm <code class="language-text">calculator</code> sử dụng như một container, extend thêm một số xử lý trước khi gọi hàm <code class="language-text">add</code>, <code class="language-text">multiply</code></p>\n<h2>Higher-Order Components</h2>\n<p>Một higher-order component là một một function nhận vào một <code class="language-text">component</code> như một argument và trả về "phiên bản mở rộng" của component đó.</p>\n<div class="gatsby-highlight">\n      <pre class="language-jsx"><code class="language-jsx"><span class="token punctuation">(</span>InputComponent<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> ExtendedComponent\n<span class="token punctuation">}</span>\n\n<span class="token comment">// hoặc</span>\nInputComponent <span class="token operator">=></span> ExtendedComponent</code></pre>\n      </div>\n<p><code class="language-text">ExtendedComponent</code> là một component container, nó trả về <code class="language-text">InputComponent</code> với một số extend</p>\n<p><img src="https://cms-assets.tutsplus.com/uploads/users/1795/posts/30094/image/Introduction-To-Higher-Order-Components-in-React-Overview.jpg"></p>\n<p>Giờ implement cái khái niệm này</p>\n<div class="gatsby-highlight">\n      <pre class="language-jsx"><code class="language-jsx"><span class="token keyword">const</span> <span class="token function-variable function">withGreyBg</span> <span class="token operator">=</span> WrappedComponent <span class="token operator">=></span> <span class="token keyword">class</span> <span class="token class-name">NewComponent</span> extedns Component <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> bgStyle <span class="token operator">=</span> <span class="token punctuation">{</span>\n        backgroundColor<span class="token punctuation">:</span> <span class="token string">\'grey\'</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token punctuation">(</span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">\'</span>wrapper<span class="token punctuation">\'</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>bgStyle<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>WrappedComponent</span> <span class="token spread"><span class="token punctuation">{</span><span class="token punctuation">...</span><span class="token attr-value">this</span><span class="token punctuation">.</span><span class="token attr-value">props</span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n        <span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> SmallCardWithGreyBg <span class="token operator">=</span> <span class="token function">withGreyBg</span><span class="token punctuation">(</span>SmallCard<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> BigCardWithGreyBg <span class="token operator">=</span> <span class="token function">withGreyBg</span><span class="token punctuation">(</span>BigCard<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> HugeCardWithGreyBg <span class="token operator">=</span> <span class="token function">withGreyBg</span><span class="token punctuation">(</span>HugeCard<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">CardsDemo</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>\n    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>SmallCardWithGreyBg</span> <span class="token spread"><span class="token punctuation">{</span><span class="token punctuation">...</span><span class="token attr-value">this</span><span class="token punctuation">.</span><span class="token attr-value">props</span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>BigCardWithGreyBg</span> <span class="token spread"><span class="token punctuation">{</span><span class="token punctuation">...</span><span class="token attr-value">this</span><span class="token punctuation">.</span><span class="token attr-value">props</span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>\n        <span class="token operator">&lt;</span>HugeCardWithGreyBg <span class="token punctuation">{</span><span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>props <span class="token operator">/</span><span class="token operator">></span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p><img src="https://cms-assets.tutsplus.com/uploads/users/1795/posts/30094/image/Introduction-To-Higher-Order-Components-in-React-An-Example-HOC.jpg"></p>',id:"E:/anluu/luckyluu/posts/2018-03-02-gioi-thieu-higher-order-component/index.md absPath of file >>> MarkdownRemark",timeToRead:2,frontmatter:{date:"2018-03-02T13:35:13.234Z",path:"/2018-03-02-gioi-thieu-higher-order-component-trong-react",tags:["react","javascript"],title:"Giới thiệu Higher-Order Components trong React"}},next:{excerpt:"Tại sao? Câu hỏi đâu tiên cần trả lời: Tại sao chúng ta cần Redux? Dĩ nhiên câu trả lời không phải là bởi vì ai trên mạng cũng bảo thế nên em phải xài nó. Redux được sử dụng rộng rãi vì nó giải quyết  vấn đề  mà chúng ta thường gặp khi làm Single...",html:'<h2>Tại sao?</h2>\n<p>Câu hỏi đâu tiên cần trả lời: Tại sao chúng ta cần Redux?</p>\n<p>Dĩ nhiên câu trả lời không phải là bởi vì ai trên mạng cũng bảo thế nên em phải xài nó.</p>\n<p>Redux được sử dụng rộng rãi vì nó giải quyết <strong>vấn đề</strong> mà chúng ta thường gặp khi làm Single Page App.</p>\n<p>Vấn đề "State management"? Không hề, bản thân React đã giải quyết State management rồi, Redux giúp quản lý <code class="language-text">state</code>, nhưng nó không phải là <strong>vấn đề</strong> mấu chốt.</p>\n<h2>Vấn đề là: Data Flow (Luồng dữ liệu)</h2>\n<p>Nếu sử dụng React một thời gian, chúng ta thấy ngay <code class="language-text">props</code> trong React là dữ liệu đi xuống theo 1 chiều từ trên xuống. Dữ liệu truyền xuống qua <code class="language-text">props</code>.</p>\n<p>Ví dụ với <em>component</em> <code class="language-text">Couter</code> như sau</p>\n<p><img src="https://daveceddia.com/images/counter-component.png"></p>\n<p>Giá trị <code class="language-text">count</code> lưu trong <em>state</em> của component <code class="language-text">App</code>, được truyền xuống qua <em>props</em></p>\n<p><img src="https://daveceddia.com/images/passing-props-down.png"></p>\n<p>Để dữ liệu đi ngược lên trên, có phải chúng ta sẽ có 1 hàm <em>callback</em>, hàm <em>callback</em> này được truyền xuống cho <strong>tất cả</strong> các component con, khi dữ liệu <code class="language-text">count</code> thay đổi, chúng ta gọi lại hàm <em>callback</em> này để \'báo\' cho <code class="language-text">App</code> biết giá trị <code class="language-text">count</code> đã thay đổi.</p>\n<p><img src="https://daveceddia.com/images/passing-callbacks-down.png"></p>\n<p>Hình dung như thế này, dữ liệu như là nguồn điện ở nhà, muốn có điện từ nhà máy tới từng hộ dân ta cần đường dây điện được nối xuyên suốt từ nhà máy đến từng hộ dân, vì điện không thể truyền qua không khí như sóng điện thoại. Đó là cách React đưa dữ liệu đến các <em>component</em> con, với Redux chúng ta sẽ hổ trợ dữ liệu đi qua đường sóng điện thoại.</p>\n<p>Sớm hay muộn gì bạn cũng rơi vào tình huống như trên, container ở trên cùng có một vài dữ liệu mà components bên dưới nó cũng cần dữ liệu tương tự. Lấy ví dụ như thông tin user trên trang Twitter</p>\n<p><img src="https://daveceddia.com/images/twitter-user-data.png"></p>\n<p>Để đưa dữ liệu từ <code class="language-text">App</code> xuống các <code class="language-text">Avatar</code> components, bạn phải truyền dữ liệu này qua những component không cần thiết.</p>\n<p><img src="https://daveceddia.com/images/twitter-hierarchy.png"></p>\n<h2>Kết nối trực tiếp đến dữ liệu với Redux</h2>\n<p>Sử dụng hàm <code class="language-text">connect</code> trong Redux sẽ cho phép chúng ta kết nối bất kỳ <em>component</em> nào đến trung tâm của mọi dữ liệu, thích cái gì thì <em>map</em> nó vô component</p>\n<p><img src="https://daveceddia.com/images/redux-connected-twitter.png"></p>\n<p>Bên cạnh đó nó còn có một số tính năng khác đi kèm, như giúp debug dễ hơn với Redux DevTools cho phép kiểm tra mỗi khi state thay đổi, time-travel debug cho phép roll back lại state trước đó</p>\n<p>Cách connect một component với Redux store</p>\n<div class="gatsby-highlight">\n      <pre class="language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> connect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'react-redux\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">Avatar</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> user <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>user<span class="token punctuation">.</span>avatar<span class="token punctuation">}</span></span><span class="token punctuation">/></span></span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">mapStateToProps</span> <span class="token operator">=</span> state <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n  user<span class="token punctuation">:</span> state<span class="token punctuation">.</span>user\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token punctuation">{</span> Avatar <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">connect</span><span class="token punctuation">(</span>mapStateToProps<span class="token punctuation">)</span><span class="token punctuation">(</span>Avatar<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>Bản thân component <em>Avatar</em> không có gì khác biệt với component khác, nó sẽ nhận <code class="language-text">props</code> và <code class="language-text">render</code> ra như bình thường, hàm <code class="language-text">connect</code> sẽ làm chuyện <em>map</em> cái state ở trong Redux store về thành <code class="language-text">props</code>.</p>\n<h2>Khi nào sử dụng Redux</h2>\n<ul>\n<li>Nếu các <em>component</em> được tổ chức theo cây như ví dụ ở trên</li>\n<li>Nếu cần lưu dữ liệu tạm thời giữa các view, thí dụ load dữ liệu ở trang list xong vô trang detail load dự liệu trang detail, rồi khi quay lại trang list không cần phải load dữ liệu lại lần nữa.</li>\n<li>Nếu ứng dụng lớn, quản lý dữ liệu nhiều.</li>\n</ul>',
id:"E:/anluu/luckyluu/posts/2018-02-14-redux-la-gi-tai-sao-phai-dung/index.md absPath of file >>> MarkdownRemark",timeToRead:3,frontmatter:{date:"2018-02-14T13:35:13.234Z",path:"/2018-02-14-redux-la-gi-tai-sao-phai-dung",tags:["react","javascript","redux"],title:"Redux là gì và tại sao phải dùng?"}}}}}});
//# sourceMappingURL=path---2018-02-27-dung-ui-voi-pure-function-va-ket-hop-nhieu-function-e7a62f4c1943391830ea.js.map