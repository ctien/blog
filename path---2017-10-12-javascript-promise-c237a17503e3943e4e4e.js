webpackJsonp([0xa79db152b646],{1258:function(n,s){n.exports={data:{markdownRemark:{html:'<p>Bạn sẽ gặp đoạn code sau rất nhiều</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">\'/user/1\'</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> user <span class="token operator">=></span> <span class="token punctuation">{</span>\n        <span class="token comment">/* run after API return */</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>\n      </div>\n<p>Đoạn code nằm bên trong <code class="language-text">.then</code> sẽ chạy sau khi nhận dữ liệu trả về từ server trước khi chạy tiếp. <code class="language-text">Promise</code> thực chất là một <em>object</em> cũ xì trong javascript, điều khác biệt là nó có những phương thức cho phép chạy đồng bộ (synchronously)</p>\n<p>Nếu không tin bạn thử check kiểu của Promise sẽ thấy</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">typeof</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">\'object\'</span> <span class="token comment">// true</span></code></pre>\n      </div>\n<p>Để mình nhắc lại lần nữa để bạn không bị cái tên hoa mĩ <em>Promise</em> lừa tình, <strong>Promise chỉ đơn thuần là một object</strong>. Để có thể đợi trả về từ server, trước khi thực hiện chạy đoạn code trong <code class="language-text">.then()</code>, function của bạn <strong>BUỘC PHẢI</strong> trả về một <em>Promise</em>. Function <code class="language-text">fetch</code> được viết như sau</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js">cost <span class="token function-variable function">fetch</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n        <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">(</span>error<span class="token punctuation">,</span> apiResponse<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>\n            <span class="token punctuation">}</span>\n\n            <span class="token function">resolve</span><span class="token punctuation">(</span>apiResponse<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>Giờ tới phần quan trọng, viết lại khai báo Promise (gọi là SimplePromise để tránh trùng tên) để xem cách làm của Promise</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">SimplePromise</span> <span class="token punctuation">{</span>\n    <span class="token function">constructor</span><span class="token punctuation">(</span>executionFunction<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>promiseChain <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">handleError</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">this</span><span class="token punctuation">.</span>onResolve <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>onResolve<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>onReject <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>onReject<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>\n\n        <span class="token function">executionFunction</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>onResolve<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>onReject<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token function">then</span><span class="token punctuation">(</span>onResolve<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>promiseChain<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>onResolve<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">catch</span><span class="token punctuation">(</span>handleError<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>handleError <span class="token operator">=</span> handleError<span class="token punctuation">;</span>\n\n        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token function">onResolve</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">let</span> storedValue <span class="token operator">=</span> value<span class="token punctuation">;</span>\n\n        <span class="token keyword">try</span> <span class="token punctuation">{</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span>promiseChain<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span> nextFunction <span class="token operator">=></span> <span class="token punctuation">{</span>\n                storedValue <span class="token operator">=</span> <span class="token function">nextFunction</span><span class="token punctuation">(</span>storedValue<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span>promiseChain <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">onReject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token function">onReject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleError</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>Khi khởi tạo một Promise <code class="language-text">new Promise((resolve, reject) =&gt;{...} )</code> chúng ta truyền vào một callback function, function này sẽ nhận 2 tham số truyền vào là 2 function internal của Promise <code class="language-text">onResolve</code> và <code class="language-text">onReject</code></p>\n<p>Bên trong constructor đồng thời khởi tạo mảng <code class="language-text">promiseChain</code> và hàm <code class="language-text">handleError</code>, khi thêm một hoặc một mớ <code class="language-text">.then()</code>, các hàm này sẽ được tuần tự đưa vào mảng <code class="language-text">promiseChain</code>, hàm <code class="language-text">.catch()</code> thì được map với hàm <code class="language-text">handleError</code> trong Promise.</p>\n<blockquote>\n<p>Lưu ý, cái này là ví dụ, Promise thực tế thì 2 hàm <code class="language-text">then</code> và <code class="language-text">catch</code> sẽ trả về new Promise, cái này làm cho đơn giản trả về <code class="language-text">this</code> thôi.</p>\n</blockquote>\n<p>Khi một hàm bất đồng bộ (async) được gọi <code class="language-text">resolve(apiResponse)</code>, object promise bắt đầu chạy <code class="language-text">onResolve(apiResponse)</code> nó sẽ loop qua <em>tuần tự</em> mảng <em>promiseChain</em>, thực thi các xử lý trong hàm từ đầu tiên trong mảng, đến hàm thứ 2, 3, 4..., mỗi lần như vậy nó sẽ nhận giá trị <code class="language-text">storedValue</code> đồng thời cập nhập lại <code class="language-text">storedValue</code> này. </p>',timeToRead:2,excerpt:"Bạn sẽ gặp đoạn code sau rất nhiều Đoạn code nằm bên trong   sẽ chạy sau khi nhận dữ liệu trả về từ server trước khi chạy tiếp.   thực chất…",frontmatter:{title:"Promise trong javascript",cover:"",date:"2017-10-12",category:"javascript",tags:["javascript"],desc:"Để hiểu rõ hơn promise, thử build một promise từ scratch"},fields:{slug:"/2017-10-12-javascript-promise"}}},pathContext:{slug:"/2017-10-12-javascript-promise",prev:{frontmatter:{title:"React Bind Pattern: 5 cách chỉ định tham chiếu this",desc:"Để thay đổi ngữ cảnh cho từ khóa this trong javascript, sử dụng ở đâu và như thế nào cho hợp lý nhất",type:"post",category:"react",tags:["react","javascript"]},fields:{slug:"/2017-10-11-react-bind-pattern-5-cach-tham-chieu-this"}},next:{frontmatter:{title:"Góc nhìn về Accessible UI",desc:"Thuật ngữ Accessiblity đang hot trong thời gian gần đây, đã đến lúc thiết kế với tư duy sản phẩm cho mọi người.",type:"post",category:"ux-ui",tags:["ux-ui"]},fields:{slug:"/2017-11-29-goc-nhin-ve-accessible-ui-web"}}}}}});
//# sourceMappingURL=path---2017-10-12-javascript-promise-c237a17503e3943e4e4e.js.map