webpackJsonp([59],{"./node_modules/json-loader/index.js!./.cache/json/2017-10-18-import-va-export-trong-javascript.json":function(n,s){n.exports={data:{markdownRemark:{html:'<p>Một <strong>giá trị</strong>, <strong>hàm</strong>, <strong>object</strong> có thể được <code>export</code> từ một file này và dùng câu lệnh <code>import</code> để sử dụng bên trong file khác.</p>\n<h1>Export</h1>\n<h2>Cú pháp</h2>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">export</span> <span class="token punctuation">{</span>name1<span class="token punctuation">,</span> name2<span class="token punctuation">,</span> name3<span class="token punctuation">,</span><span class="token operator">...</span><span class="token punctuation">,</span> nameN<span class="token punctuation">}</span>\n\n<span class="token comment" spellcheck="true">// export su dung alias</span>\n<span class="token keyword">export</span> <span class="token punctuation">{</span>name1 <span class="token keyword">as</span> differentName1<span class="token punctuation">,</span> name2 <span class="token keyword">as</span> differentName2<span class="token punctuation">}</span>\n\n<span class="token comment" spellcheck="true">// export mot khai bao bien so hoac hang so</span>\n<span class="token keyword">export</span> <span class="token keyword">let</span> name1<span class="token punctuation">,</span> <span class="token keyword">const</span> name2<span class="token punctuation">,</span> <span class="token keyword">var</span> name3\n<span class="token keyword">export</span> <span class="token keyword">let</span> name1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token keyword">const</span> name2 <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token keyword">var</span> name3 <span class="token operator">=</span> <span class="token number">30</span>\n\n<span class="token comment" spellcheck="true">// export mot class hoac function</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> expression<span class="token punctuation">;</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">name1</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<h2>Giải thích</h2>\n<p>Có 2 kiểu <code>export</code></p>\n<ol>\n<li>Export 1 function đã được được khai báo hoặc một giá trị: export có định danh</li>\n</ol>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token comment" spellcheck="true">// exports a function declared earlier</span>\n<span class="token keyword">export</span> <span class="token punctuation">{</span> myFunction <span class="token punctuation">}</span><span class="token punctuation">;</span> \n\n<span class="token comment" spellcheck="true">// exports a constant</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> foo <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<ol start="2">\n<li>Default Export cho một hàm hoặc class</li>\n</ol>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>Khi export có định danh thì khi import cũng phải gọi đúng tên đã export, trong khi sử dụng default export thì khi import đặt tên là gì cũng được.</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">export</span> <span class="token keyword">default</span> k <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// test.js</span>\n\n<span class="token keyword">import</span> m <span class="token keyword">from</span> <span class="token string">\'./test\'</span> \nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// log 12</span>\n</code></pre>\n      </div>\n<p>Trên một file chỉ có thể có một default export, câu lệnh sau không phải là default export</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">export</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token operator">...</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<h1>Import</h1>\n<h2>Cú pháp</h2>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">import</span> defaultExport <span class="token keyword">from</span> <span class="token string">"module-name"</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> name <span class="token keyword">from</span> <span class="token string">"module-name"</span><span class="token punctuation">;</span>\n\n<span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token keyword">export</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"module-name"</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token keyword">export</span> <span class="token keyword">as</span> alias <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"module-name"</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> export1 <span class="token punctuation">,</span> export2 <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"module-name"</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> export1 <span class="token punctuation">,</span> export2 <span class="token keyword">as</span> alias2 <span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"module-name"</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> defaultExport<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token keyword">export</span> <span class="token punctuation">[</span> <span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span> <span class="token punctuation">]</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"module-name"</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> defaultExport<span class="token punctuation">,</span> <span class="token operator">*</span> <span class="token keyword">as</span> name <span class="token keyword">from</span> <span class="token string">"module-name"</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token string">"module-name"</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<h2>Giải thích</h2>\n<p>Module export có tên quá dài, có thể đặt alias trong câu <code>import</code></p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>reallyReallyLongModuleExportName <span class="token keyword">as</span> shortName<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'/modules/my-module.js\'</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>Import tất cả các giá trị, hàm, object,... đã export trong một file khác</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> myModule <span class="token keyword">from</span> <span class="token string">\'another.file\'</span>\n</code></pre>\n      </div>\n<p>Import chỉ định một số hàm, object, giá trị trong file</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>funcA<span class="token punctuation">,</span> objB<span class="token punctuation">,</span> constC<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'another.file\'</span>\n</code></pre>\n      </div>',frontmatter:{date:"October 18, 2017",path:"/2017-10-18-import-va-export-trong-javascript",tags:["javascript"],title:"Import và Export trong Javascript",desc:"Khai báo export và import trong ES6"}}},pathContext:{prev:{excerpt:"Dù cho đang ở level nào của javascript thì trước sau, ít nhiều cũng đụng tới vấn để sort một mảng trong javascript, tài liệu trên mozila có câu này hết sức nguy hiểm  sort is not necessarily stable. , giờ thử xem tại sao gọi là không  stable Vâng...",html:'<p>Dù cho đang ở level nào của javascript thì trước sau, ít nhiều cũng đụng tới vấn để sort một mảng trong javascript, tài liệu trên mozila có câu này hết sức nguy hiểm <strong>sort is not necessarily stable.</strong>, giờ thử xem tại sao gọi là không <strong>stable</strong></p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">const</span> myArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">98</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>\nmyArray<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [ 2, 25, 33, 4, 98 ]</span>\n</code></pre>\n      </div>\n<p>Vâng, <strong>25 > 33 > 4</strong> </p>\n<p>Mảng số ngày sẽ được javascript sort theo thứ tự alphabet, mỗi giá trị số được đưa về <code>string</code> để so sánh.</p>\n<p>Hàm <code>sort</code> có thể số truyền vào là <code>function</code> dùng để so sánh, nếu bạn không đưa hàm này vào, mặc định nó sẽ convert giá trị cần so sánh về <code>string</code> và so sánh mã unicode của này</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span>\nnumbers<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [80, 9]</span>\n\n<span class="token keyword">const</span> strings <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">\'80\'</span><span class="token punctuation">,</span> <span class="token string">\'9\'</span><span class="token punctuation">]</span>\nstrings<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [\'80\', \'9\']</span>\n</code></pre>\n      </div>\n<p>Như vậy thì viết như thế này cũng hoàn toàn hợp lệ</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">const</span> emojis <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"😍"</span><span class="token punctuation">,</span><span class="token string">"😂"</span><span class="token punctuation">,</span><span class="token string">"😰"</span><span class="token punctuation">]</span>\nemojis<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// ["😂", "😍", "😰"]</span>\n\n<span class="token keyword">const</span> wtfJavaScript <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">390</span><span class="token punctuation">,</span> <span class="token string">"😂"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"2325"</span><span class="token punctuation">]</span>  \nwtfJavaScript<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [1, "2325", 390, "😂"]</span>\n</code></pre>\n      </div>\n<h2>Vậy muốn <code>sort</code> mảng số làm sao ?</h2>\n<p>Như đã đề cập, cần đưa một hàm dùng để so sánh, hàm này đặc điểm như sau</p>\n<ul>\n<li>Nếu giá trị trả về của hàm <code>compareFunction(a,b)</code> &#x3C; 0, giá trị a sẽ đứng trước b</li>\n<li>Nếu giá trị trả về = 0, a và b bằng nhau</li>\n<li>Giá trị trả về > 0, a đứng sau b</li>\n</ul>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">const</span> myArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">98</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>\nmyArray<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> a <span class="token operator">-</span> b<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [ 2, 4, 25, 33, 98 ]</span>\n</code></pre>\n      </div>\n<h2>Và hơn thế nữa</h2>\n<p>ECMAScript không đưa ra chuẩn mực nào về thuật toán cho cách <code>sort</code>, nghĩa là Javascript engine muốn apply thuật toán nào thì tùy nó, Google\'s V8 (Javascript engine của Chrome) và NodeJS sử dụng thuật toán <code>quick sort</code> và kết quả thì không hẳn là chính xác 100%. Do đó nên nhớ là <code>sort</code> trên những trình duyệt khác nhau cũng có khả năng cho kết quả khác nhau nếu nó dùng khác Javascript Engine.</p>\n<p>Nếu rảnh, và có trình, thì nên tự implement một sort function để xài, một số thuật toán sort có thể nghiên cứu như <code>InsertionSort</code>, <code>MergeSort</code>, <code>QuickSort</code></p>',id:"E:/anluu/luckyluu/posts/2017-10-19-sort-trong-javascript/index.md absPath of file >>> MarkdownRemark",timeToRead:2,frontmatter:{date:"2017-10-19T13:35:13.234Z",path:"/2017-10-19-sort-trong-javascript",tags:["javascript"],title:"Sort trong javascript"}},next:{excerpt:"Bạn sẽ gặp đoạn code sau rất nhiều Đoạn code nằm bên trong   sẽ chạy sau khi nhận dữ liệu trả về từ server trước khi chạy tiếp.   thực chất là một  object  cũ xì trong javascript, điều khác biệt là nó có những phương thức cho phép chạy đồng bộ...",html:'<p>Bạn sẽ gặp đoạn code sau rất nhiều</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">\'/user/1\'</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> user <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n        <span class="token comment" spellcheck="true">/* run after API return */</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n      </div>\n<p>Đoạn code nằm bên trong <code>.then</code> sẽ chạy sau khi nhận dữ liệu trả về từ server trước khi chạy tiếp. <code>Promise</code> thực chất là một <em>object</em> cũ xì trong javascript, điều khác biệt là nó có những phương thức cho phép chạy đồng bộ (synchronously)</p>\n<p>Nếu không tin bạn thử check kiểu của Promise sẽ thấy</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">typeof</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">\'object\'</span> <span class="token comment" spellcheck="true">// true</span>\n</code></pre>\n      </div>\n<p>Để mình nhắc lại lần nữa để bạn không bị cái tên hoa mĩ <em>Promise</em> lừa tình, <strong>Promise chỉ đơn thuần là một object</strong>. Để có thể đợi trả về từ server, trước khi thực hiện chạy đoạn code trong <code>.then()</code>, function của bạn <strong>BUỘC PHẢI</strong> trả về một <em>Promise</em>. Function <code>fetch</code> được viết như sau</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code>cost fetch <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n        <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">(</span>error<span class="token punctuation">,</span> apiResponse<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>\n            <span class="token punctuation">}</span>\n\n            <span class="token function">resolve</span><span class="token punctuation">(</span>apiResponse<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>Giờ tới phần quan trọng, viết lại khai báo Promise (gọi là SimplePromise để tránh trùng tên) để xem cách làm của Promise</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">class</span> <span class="token class-name">SimplePromise</span> <span class="token punctuation">{</span>\n    <span class="token function">constructor</span><span class="token punctuation">(</span>executionFunction<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>promiseChain <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>handleError <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">this</span><span class="token punctuation">.</span>onResolve <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>onResolve<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>onReject <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>onReject<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>\n\n        <span class="token function">executionFunction</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>onResolve<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>onReject<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token function">then</span><span class="token punctuation">(</span>onResolve<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>promiseChain<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>onResolve<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">catch</span><span class="token punctuation">(</span>handleError<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>handleError <span class="token operator">=</span> handleError<span class="token punctuation">;</span>\n\n        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token function">onResolve</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">let</span> storedValue <span class="token operator">=</span> value<span class="token punctuation">;</span>\n\n        <span class="token keyword">try</span> <span class="token punctuation">{</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span>promiseChain<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span> nextFunction <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n                storedValue <span class="token operator">=</span> <span class="token function">nextFunction</span><span class="token punctuation">(</span>storedValue<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span>promiseChain <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">onReject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token function">onReject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleError</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>Khi khởi tạo một Promise <code>new Promise((resolve, reject) =>{...} )</code> chúng ta truyền vào một callback function, function này sẽ nhận 2 tham số truyền vào là 2 function internal của Promise <code>onResolve</code> và <code>onReject</code></p>\n<p>Bên trong constructor đồng thời khởi tạo mảng <code>promiseChain</code> và hàm <code>handleError</code>, khi thêm một hoặc một mớ <code>.then()</code>, các hàm này sẽ được tuần tự đưa vào mảng <code>promiseChain</code>, hàm <code>.catch()</code> thì được map với hàm <code>handleError</code> trong Promise.</p>\n<blockquote>\n<p>Lưu ý, cái này là ví dụ, Promise thực tế thì 2 hàm <code>then</code> và <code>catch</code> sẽ trả về new Promise, cái này làm cho đơn giản trả về <code>this</code> thôi.</p>\n</blockquote>\n<p>Khi một hàm bất đồng bộ (async) được gọi <code>resolve(apiResponse)</code>, object promise bắt đầu chạy <code>onResolve(apiResponse)</code> nó sẽ loop qua <em>tuần tự</em> mảng <em>promiseChain</em>, thực thi các xử lý trong hàm từ đầu tiên trong mảng, đến hàm thứ 2, 3, 4..., mỗi lần như vậy nó sẽ nhận giá trị <code>storedValue</code> đồng thời cập nhập lại <code>storedValue</code> này. </p>',id:"E:/anluu/luckyluu/posts/2017-10-12-javascript-promise/index.md absPath of file >>> MarkdownRemark",timeToRead:2,frontmatter:{date:"2017-10-12T13:35:13.234Z",path:"/2017-10-12-javascript-promise",tags:["javascript"],title:"Promise trong javascript"}}}}}});
//# sourceMappingURL=path---2017-10-18-import-va-export-trong-javascript-02635012a64fd76e5786.js.map